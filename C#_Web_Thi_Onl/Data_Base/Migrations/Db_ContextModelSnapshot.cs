// <auto-generated />
using System;
using Data_Base.App_DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Base.Migrations
{
    [DbContext(typeof(Db_Context))]
    partial class Db_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data_Base.Models.A.Answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answers_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Answers_Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("Right_Answer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.ToTable("Answerses");
                });

            modelBuilder.Entity("Data_Base.Models.C.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Class_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Class_Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Grade_Id")
                        .HasColumnType("int");

                    b.Property<int>("GradesID")
                        .HasColumnType("int");

                    b.Property<int>("Max_Student")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Teacher_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradesID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Exam_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Exam_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_HisTory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Create_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<int>("Exam_Room_Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("Exam_Room_StudentsId")
                        .HasColumnType("int");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("Exam_Room_StudentsId");

                    b.ToTable("Exam_HisTories");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("End_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<Guid>("Exam_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExamsId")
                        .HasColumnType("int");

                    b.Property<Guid>("Room_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomsID")
                        .HasColumnType("int");

                    b.Property<int>("Start_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamsId");

                    b.HasIndex("RoomsID");

                    b.ToTable("Exam_Rooms");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Exam_Room_Id")
                        .HasColumnType("int");

                    b.Property<int>("Exam_RoomsId")
                        .HasColumnType("int");

                    b.Property<int>("Package_Id")
                        .HasColumnType("int");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exam_RoomsId");

                    b.HasIndex("PackagesId");

                    b.ToTable("Exam_Room_Packages");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Check_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<int>("Exam_Room_Package_Id")
                        .HasColumnType("int");

                    b.Property<int>("Exam_Room_PackagesId")
                        .HasColumnType("int");

                    b.Property<int>("Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exam_Room_PackagesId");

                    b.HasIndex("StudentsId");

                    b.ToTable("Exam_Room_Students");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Student_Answer_HisTory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Answer_Id")
                        .HasColumnType("int");

                    b.Property<int>("AnswersId")
                        .HasColumnType("int");

                    b.Property<int>("Exam_Room_Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("Exam_Room_StudentsId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AnswersId");

                    b.HasIndex("Exam_Room_StudentsId");

                    b.ToTable("Exam_Room_Student_Answer_HisTories");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Exam_Room")
                        .HasColumnType("int");

                    b.Property<int>("Exam_RoomsId")
                        .HasColumnType("int");

                    b.Property<int>("Teacher_Id")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Exam_RoomsId");

                    b.HasIndex("TeachersId");

                    b.ToTable("Exam_Room_Teachers");
                });

            modelBuilder.Entity("Data_Base.Models.G.Grade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Grade_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Grade_Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Data_Base.Models.L.Learning_Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Attendance")
                        .HasColumnType("float");

                    b.Property<double>("Point_15")
                        .HasColumnType("float");

                    b.Property<double>("Point_45")
                        .HasColumnType("float");

                    b.Property<double>("Point_Final")
                        .HasColumnType("float");

                    b.Property<double>("Point_Midterm")
                        .HasColumnType("float");

                    b.Property<double>("Point_Summary")
                        .HasColumnType("float");

                    b.Property<int?>("Point_TypeId")
                        .HasColumnType("int");

                    b.Property<int>("Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<int>("SummariesId")
                        .HasColumnType("int");

                    b.Property<int>("Summary_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Point_TypeId");

                    b.HasIndex("StudentsId");

                    b.HasIndex("SubjectsId");

                    b.HasIndex("SummariesId");

                    b.ToTable("Learning_Summaries");
                });

            modelBuilder.Entity("Data_Base.Models.P.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Class_Id")
                        .HasColumnType("int");

                    b.Property<int>("ClassesId")
                        .HasColumnType("int");

                    b.Property<int>("Create_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("Package_Code")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.Property<string>("Package_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Point_Type_Id")
                        .HasColumnType("int");

                    b.Property<int>("Point_TypesId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassesId");

                    b.HasIndex("PackageId");

                    b.HasIndex("Point_TypesId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("Data_Base.Models.P.Point_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Point_Type_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("SummariesId")
                        .HasColumnType("int");

                    b.Property<int>("Summary_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SummariesId");

                    b.ToTable("Point_Types");
                });

            modelBuilder.Entity("Data_Base.Models.P.Point_Type_Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Point_Type_Id")
                        .HasColumnType("int");

                    b.Property<int>("Point_TypesId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Point_TypesId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Point_Type_Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.Q.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("Package_Id")
                        .HasColumnType("int");

                    b.Property<string>("Question_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Question_Name")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Data_Base.Models.R.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Role_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Data_Base.Models.R.Room", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Room_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Room_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Data_Base.Models.S.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<int>("Point_Type_Id")
                        .HasColumnType("int");

                    b.Property<int>("Point_TypesId")
                        .HasColumnType("int");

                    b.Property<int>("Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Point_TypesId");

                    b.HasIndex("StudentsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Data_Base.Models.S.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Student_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Data_Base.Models.S.Student_Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("Student_Id")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("Teacher_Id")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentsId");

                    b.HasIndex("TeachersId");

                    b.ToTable("Student_Classes");
                });

            modelBuilder.Entity("Data_Base.Models.S.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Subject_Code")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Subject_Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.S.Subject_Grade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Grade_Id")
                        .HasColumnType("int");

                    b.Property<int>("GradesID")
                        .HasColumnType("int");

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GradesID");

                    b.HasIndex("SubjectsId");

                    b.ToTable("Subject_Grades");
                });

            modelBuilder.Entity("Data_Base.Models.S.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("End_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<int>("Start_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<int>("Summary_Code")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<string>("Summary_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("Data_Base.Models.T.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Teacher_Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Data_Base.Models.T.Teacher_Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Class_Id")
                        .HasColumnType("int");

                    b.Property<int>("ClassesId")
                        .HasColumnType("int");

                    b.Property<int>("Teacher_Id")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassesId");

                    b.HasIndex("TeachersId");

                    b.ToTable("Teacher_Classes");
                });

            modelBuilder.Entity("Data_Base.Models.T.Teacher_Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.Property<int>("Teacher_id")
                        .HasColumnType("int");

                    b.Property<int>("TeachersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectsId");

                    b.HasIndex("TeachersId");

                    b.ToTable("Teacher_Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.T.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Package_Id")
                        .HasColumnType("int");

                    b.Property<int>("PackagesId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Test_Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("PackagesId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Data_Base.Models.T.Test_Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("Test_Id")
                        .HasColumnType("int");

                    b.Property<int>("TestsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("TestsId");

                    b.ToTable("Test_Questions");
                });

            modelBuilder.Entity("Data_Base.Models.U.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Create_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<int>("Data_Of_Birth")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Full_Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Last_Mordification_Time")
                        .HasMaxLength(14)
                        .HasColumnType("int");

                    b.Property<string>("Phone_Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("User_Pass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data_Base.Models.A.Answers", b =>
                {
                    b.HasOne("Data_Base.Models.Q.Question", "Questions")
                        .WithMany("Answerses")
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Data_Base.Models.C.Class", b =>
                {
                    b.HasOne("Data_Base.Models.G.Grade", "Grades")
                        .WithMany("Classes")
                        .HasForeignKey("GradesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam", b =>
                {
                    b.HasOne("Data_Base.Models.S.Subject", "Subjects")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_HisTory", b =>
                {
                    b.HasOne("Data_Base.Models.E.Exam_Room_Student", "Exam_Room_Students")
                        .WithMany("Exam_HisTories")
                        .HasForeignKey("Exam_Room_StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam_Room_Students");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room", b =>
                {
                    b.HasOne("Data_Base.Models.E.Exam", "Exams")
                        .WithMany("Exam_Rooms")
                        .HasForeignKey("ExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.R.Room", "Rooms")
                        .WithMany("Exam_Room")
                        .HasForeignKey("RoomsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exams");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Package", b =>
                {
                    b.HasOne("Data_Base.Models.E.Exam_Room", "Exam_Rooms")
                        .WithMany("Exam_Room_Packages")
                        .HasForeignKey("Exam_RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.P.Package", "Packages")
                        .WithMany("Exam_Room_Packages")
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam_Rooms");

                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Student", b =>
                {
                    b.HasOne("Data_Base.Models.E.Exam_Room_Package", "Exam_Room_Packages")
                        .WithMany()
                        .HasForeignKey("Exam_Room_PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Student", "Students")
                        .WithMany("Exam_Room_Students")
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam_Room_Packages");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Student_Answer_HisTory", b =>
                {
                    b.HasOne("Data_Base.Models.A.Answers", "Answers")
                        .WithMany("Exam_Room_Student_Answer_HisTories")
                        .HasForeignKey("AnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.E.Exam_Room_Student", "Exam_Room_Students")
                        .WithMany("Exam_Room_Student_Answer_HisTories")
                        .HasForeignKey("Exam_Room_StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answers");

                    b.Navigation("Exam_Room_Students");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Teacher", b =>
                {
                    b.HasOne("Data_Base.Models.E.Exam_Room", "Exam_Rooms")
                        .WithMany("Exam_Room_Teachers")
                        .HasForeignKey("Exam_RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.T.Teacher", "Teachers")
                        .WithMany("Exam_Room_Teachers")
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam_Rooms");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Data_Base.Models.L.Learning_Summary", b =>
                {
                    b.HasOne("Data_Base.Models.P.Point_Type", null)
                        .WithMany("Learning_Summaries")
                        .HasForeignKey("Point_TypeId");

                    b.HasOne("Data_Base.Models.S.Student", "Students")
                        .WithMany("Learning_Summaries")
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Subject", "Subjects")
                        .WithMany("Learning_Summaries")
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Summary", "Summaries")
                        .WithMany("Learning_Summaries")
                        .HasForeignKey("SummariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Students");

                    b.Navigation("Subjects");

                    b.Navigation("Summaries");
                });

            modelBuilder.Entity("Data_Base.Models.P.Package", b =>
                {
                    b.HasOne("Data_Base.Models.C.Class", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.P.Package", null)
                        .WithMany("Packages")
                        .HasForeignKey("PackageId");

                    b.HasOne("Data_Base.Models.P.Point_Type", "Point_Types")
                        .WithMany("Packages")
                        .HasForeignKey("Point_TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Subject", "Subjects")
                        .WithMany("Packages")
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("Point_Types");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.P.Point_Type", b =>
                {
                    b.HasOne("Data_Base.Models.S.Summary", "Summaries")
                        .WithMany("Point_Types")
                        .HasForeignKey("SummariesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Summaries");
                });

            modelBuilder.Entity("Data_Base.Models.P.Point_Type_Subject", b =>
                {
                    b.HasOne("Data_Base.Models.P.Point_Type", "Point_Types")
                        .WithMany("Point_Type_Subjects")
                        .HasForeignKey("Point_TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Subject", "Subjects")
                        .WithMany("PointType_Subjects")
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Point_Types");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.Q.Question", b =>
                {
                    b.HasOne("Data_Base.Models.P.Package", null)
                        .WithMany("Questions")
                        .HasForeignKey("PackageId");
                });

            modelBuilder.Entity("Data_Base.Models.S.Score", b =>
                {
                    b.HasOne("Data_Base.Models.P.Point_Type", "Point_Types")
                        .WithMany("Scores")
                        .HasForeignKey("Point_TypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Student", "Students")
                        .WithMany("Scores")
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Subject", "Subjects")
                        .WithMany("Scores")
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Point_Types");

                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.S.Student", b =>
                {
                    b.HasOne("Data_Base.Models.U.User", "Users")
                        .WithMany("Students")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data_Base.Models.S.Student_Class", b =>
                {
                    b.HasOne("Data_Base.Models.C.Class", null)
                        .WithMany("Student_Classes")
                        .HasForeignKey("ClassId");

                    b.HasOne("Data_Base.Models.S.Student", "Students")
                        .WithMany("Student_Classes")
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.T.Teacher", "Teachers")
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Data_Base.Models.S.Subject_Grade", b =>
                {
                    b.HasOne("Data_Base.Models.G.Grade", "Grades")
                        .WithMany("Subject_Grades")
                        .HasForeignKey("GradesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.S.Subject", "Subjects")
                        .WithMany("Subject_Grade")
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grades");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Data_Base.Models.T.Teacher", b =>
                {
                    b.HasOne("Data_Base.Models.U.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data_Base.Models.T.Teacher_Class", b =>
                {
                    b.HasOne("Data_Base.Models.C.Class", "Classes")
                        .WithMany("Teacher_Classes")
                        .HasForeignKey("ClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.T.Teacher", "Teachers")
                        .WithMany("Teacher_Classes")
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Data_Base.Models.T.Teacher_Subject", b =>
                {
                    b.HasOne("Data_Base.Models.S.Subject", "Subjects")
                        .WithMany("Teacher_Subject")
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.T.Teacher", "Teachers")
                        .WithMany("Teacher_Subject")
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Data_Base.Models.T.Test", b =>
                {
                    b.HasOne("Data_Base.Models.P.Package", "Packages")
                        .WithMany()
                        .HasForeignKey("PackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packages");
                });

            modelBuilder.Entity("Data_Base.Models.T.Test_Question", b =>
                {
                    b.HasOne("Data_Base.Models.Q.Question", "Questions")
                        .WithMany("Test_Questions")
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Base.Models.T.Test", "Tests")
                        .WithMany("Test_Questions")
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Data_Base.Models.U.User", b =>
                {
                    b.HasOne("Data_Base.Models.R.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Data_Base.Models.A.Answers", b =>
                {
                    b.Navigation("Exam_Room_Student_Answer_HisTories");
                });

            modelBuilder.Entity("Data_Base.Models.C.Class", b =>
                {
                    b.Navigation("Student_Classes");

                    b.Navigation("Teacher_Classes");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam", b =>
                {
                    b.Navigation("Exam_Rooms");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room", b =>
                {
                    b.Navigation("Exam_Room_Packages");

                    b.Navigation("Exam_Room_Teachers");
                });

            modelBuilder.Entity("Data_Base.Models.E.Exam_Room_Student", b =>
                {
                    b.Navigation("Exam_HisTories");

                    b.Navigation("Exam_Room_Student_Answer_HisTories");
                });

            modelBuilder.Entity("Data_Base.Models.G.Grade", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Subject_Grades");
                });

            modelBuilder.Entity("Data_Base.Models.P.Package", b =>
                {
                    b.Navigation("Exam_Room_Packages");

                    b.Navigation("Packages");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Data_Base.Models.P.Point_Type", b =>
                {
                    b.Navigation("Learning_Summaries");

                    b.Navigation("Packages");

                    b.Navigation("Point_Type_Subjects");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Data_Base.Models.Q.Question", b =>
                {
                    b.Navigation("Answerses");

                    b.Navigation("Test_Questions");
                });

            modelBuilder.Entity("Data_Base.Models.R.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data_Base.Models.R.Room", b =>
                {
                    b.Navigation("Exam_Room");
                });

            modelBuilder.Entity("Data_Base.Models.S.Student", b =>
                {
                    b.Navigation("Exam_Room_Students");

                    b.Navigation("Learning_Summaries");

                    b.Navigation("Scores");

                    b.Navigation("Student_Classes");
                });

            modelBuilder.Entity("Data_Base.Models.S.Subject", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Learning_Summaries");

                    b.Navigation("Packages");

                    b.Navigation("PointType_Subjects");

                    b.Navigation("Scores");

                    b.Navigation("Subject_Grade");

                    b.Navigation("Teacher_Subject");
                });

            modelBuilder.Entity("Data_Base.Models.S.Summary", b =>
                {
                    b.Navigation("Learning_Summaries");

                    b.Navigation("Point_Types");
                });

            modelBuilder.Entity("Data_Base.Models.T.Teacher", b =>
                {
                    b.Navigation("Exam_Room_Teachers");

                    b.Navigation("Teacher_Classes");

                    b.Navigation("Teacher_Subject");
                });

            modelBuilder.Entity("Data_Base.Models.T.Test", b =>
                {
                    b.Navigation("Test_Questions");
                });

            modelBuilder.Entity("Data_Base.Models.U.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
