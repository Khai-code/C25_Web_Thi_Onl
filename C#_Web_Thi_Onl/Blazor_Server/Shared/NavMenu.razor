@inject NavigationManager navigation
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage SessionStorage
@inject IJSRuntime jSRuntime
<nav id="navbar" class="navbar navbar-expand-md navbar-light bg-transparent  fixed-top">
    <div class="container-fluid">
        <a class="navbar-brand d-none d-md-flex align-items-center" href="/" style="padding-left:30px">
            <img src="image/LogoHome.png" alt="Logo" class="me-2 logo" width="60" height="60" />
            <span class="fw-bold navbar-brand text-uppercase"
                  style="font-family: 'Poppins', sans-serif;
                     font-size: 1.5rem;
                     font-weight: 600;
                     letter-spacing: 1px;
                     transition: color 0.3s ease-in-out;
               color: #007bff;">
                Smart School
            </span>
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse  justify-content-center" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link nav-text" href="/">
                        <i class="bi bi-house-door me-2 nav-icon"></i> Trang chủ
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link nav-text" href="/bangdiem">
                        <i class="bi bi-journal-text me-2 nav-icon"></i> Bảng điểm
                    </a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle fw-bolder text-black-50" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Thi online
                    </a>
                    <ul class="dropdown-menu dropdown-menu-start">
                        <li><NavLink class="dropdown-item" href="/login-package">Vào thi</NavLink></li>
                        <li><NavLink class="dropdown-item" href="/student-exam-history">Lịch sử bài thi</NavLink></li>
                    </ul>
                </li>
                <li class="nav-item">
                    <a class="nav-link nav-text" href="/lienhe">
                        <i class="bi bi-envelope me-2 nav-icon"></i> Liên hệ
                    </a>
                </li>
            </ul>
        </div>
        <div class="auth-section d-flex align-items-center" style="padding-right:30px">
            <span class="nav-text me-3 d-none d-md-inline">Xin chào, @username</span>
            <div class="dropdown">
                <span class="dropdown-toggle d-flex align-items-center" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    @if (!string.IsNullOrEmpty(avatar))
                    {
                        <img src="@avatar" class="avatar me-2">
                    }
                    else
                    {
                        <div class="avatar-placeholder me-2">@GetInitial(username)</div>
                    }
                </span>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" href="/InforStudent">Hồ sơ</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><button class="dropdown-item text-danger" @onclick="Logout">Đăng xuất</button></li>
                </ul>
            </div>
        </div>
    </div>
</nav>

@code {
    private string username;
    private string avatar;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await SessionStorage.GetAsync<string>("Full_Name");
            var picture = await SessionStorage.GetAsync<string>("Picture");

            if (result.Success && !string.IsNullOrEmpty(result.Value))
            {
                username = result.Value;
            }

            if (picture.Success && !string.IsNullOrEmpty(picture.Value))
            {
                avatar = picture.Value;
            }
            StateHasChanged();
            navigation.LocationChanged += async (sender, args) =>
            {
                await jSRuntime.InvokeVoidAsync("updateNavbar");
            };

            await jSRuntime.InvokeVoidAsync("updateNavbar");

        }
    }
    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("userRole");
        await SessionStorage.DeleteAsync("Full_Name");
        await SessionStorage.DeleteAsync("Picture");
        navigation.NavigateTo("/", forceLoad: true, replace: true);
    }
    private string GetInitial(string name)
    {
        if (!string.IsNullOrWhiteSpace(name))
        {
            return name.Substring(0, 1).ToUpper();
        }
        return "?";
    }
}
