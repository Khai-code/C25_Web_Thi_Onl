@inherits LayoutComponentBase
@inject NavigationManager navigation
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage SessionStorage
@inject IJSRuntime jSRuntime
<BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.BottomRight"
                Timeout="10"
                IconType="Blazored.Toast.Configuration.IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug"
                WarningIcon="fa fa-warning"
                InfoIcon="fa fa-info-circle" />
<div class="container-fluid d-flex flex-column p-0">
    <nav class="top-navbar d-flex align-items-center justify-content-between fixed-top p-2">
        <div class="d-flex align-items-center" style="padding-left:10px">
            <button class="d-flex drak-items-center justify-content-center p-2" style="width: 45px; height: 45px;" @onclick="ToggleSidebar">
                <i class="bi bi-list fs-4"></i>
            </button>

            <div class="logo-container">
                <img src="image/LogoHome.png" alt="SmartSchool" class="logo" />
            </div>
        </div>
        <div class="auth-section d-flex align-items-center" style="padding-right:30px">
            <span class="nav-text me-3 d-none d-md-inline">Xin chào, @username</span>
            <div class="dropdown">
                <span class="dropdown-toggle d-flex align-items-center" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    @if (!string.IsNullOrEmpty(avatar))
                    {
                        <img src="@avatar" class="avatar me-2">
                    }
                    else
                    {
                        <div class="avatar-placeholder me-2">@GetInitial(username)</div>
                    }
                </span>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item" href="/InforStudent">Hồ sơ</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><button class="dropdown-item text-danger" @onclick="Logout">Đăng xuất</button></li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="main-layout d-flex">
        <aside class="sidebar fixed-sidebar p-3 @(isSidebarVisible ? "expanded" : "collapsed")">
            <nav class="nav flex-column">
                <a class="nav-link" href="/"><i class="bi bi-house-fill"></i> <span class="sidebar-text">Trang chủ</span></a>
                <a class="nav-link" href="/teacher-managements">
                    <i class="bi bi-person-lines-fill"></i>
                    <span class="sidebar-text">Danh sách giáo viên</span>
                </a>
                <a class="nav-link" href="/classs">
                    <i class="bi bi-building"></i>
                    <span class="sidebar-text">Quản lý lớp học</span>
                </a>
                <a class="nav-link" href="/exammanagement">
                    <i class="bi bi-calendar-event-fill"></i>
                    <span class="sidebar-text">Quản lý ca thi</span>
                </a>
                <a class="nav-link" href="/Package-Manager">
                    <i class="bi bi-file-text-fill"></i>
                    <span class="sidebar-text">Quản lý bài thi</span>
                </a>
                <a class="nav-link" href="/exam-history">
                    <i class="bi bi-clock-history"></i>
                    <span class="sidebar-text">Lịch sử thi</span>
                </a>
                <a class="nav-link" href="/ReviewExam">
                    <i class="bi bi-pencil-square"></i>
                    <span class="sidebar-text">Phúc khảo</span>
                </a>
            </nav>
        </aside>

        <main class="content hadow flex-grow-1 page-transition">
            <div class="d-flex justify-content-start align-items-center  ps-2 mb-3">
                <div class="fs-5 fw-semibold text-dark">
                    @PageTitle
                </div>
                <div class="d-flex align-items-center">
                    <span class="ps-3 me-2">|</span>
                    <a href="/" class="text-decoration-none text-secondary fs-5">
                        <i class="@PageIcon"></i>
                    </a>
                </div>
            </div>
            <div class="p-2">
                @Body
            </div>
           
        </main>
    </div>
</div>

@code {
    private string username;
    private string avatar;
    private bool isSidebarVisible = true;
    private string PageTitle { get; set; }
    private string PageIcon { get; set; }
    private void SetPageTitle()
    {
        var uri = navigation.ToBaseRelativePath(navigation.Uri);
        if (!uri.StartsWith("/"))
            uri = "/" + uri;

        if (PageTitles.TryGetValue(uri, out var pageInfo))
        {
            PageTitle = pageInfo.Title;
            PageIcon = pageInfo.Icon;
        }
        else
        {
            PageTitle = "Trang chủ";
            PageIcon = "bi-house-fill";
        }
    }


    private readonly Dictionary<string, PageInfo> PageTitles = new()
{
    { "/", new PageInfo { Title = "Trang chủ", Icon = "bi-house-fill" } },
    { "/teacher-managements", new PageInfo { Title = "Danh sách giáo viên", Icon = "bi-person-lines-fill" } },
    { "/classs", new PageInfo { Title = "Quản lý lớp học", Icon = "bi-building" } },
    { "/exammanagement", new PageInfo { Title = "Quản lý ca thi", Icon = "bi-calendar-event-fill" } },
    { "/Package-Manager", new PageInfo { Title = "Quản lý bài thi", Icon = "bi-file-text-fill" } },
    { "/exam-history", new PageInfo { Title = "Lịch sử thi", Icon = "bi-clock-history" } },
    { "/ReviewExam", new PageInfo { Title = "Phúc khảo", Icon = "bi-pencil-square" } }
};

    protected override void OnInitialized()
    {
        SetPageTitle();
        navigation.LocationChanged += (_, __) =>
        {
            SetPageTitle();
            StateHasChanged();
        };
    }
    private void ToggleSidebar()
    {
        isSidebarVisible = !isSidebarVisible;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await SessionStorage.GetAsync<string>("Full_Name");
            var picture = await SessionStorage.GetAsync<string>("Picture");

            if (result.Success && !string.IsNullOrEmpty(result.Value))
            {
                username = result.Value;
            }

            if (picture.Success && !string.IsNullOrEmpty(picture.Value))
            {
                avatar = picture.Value;
            }
            StateHasChanged();
            navigation.LocationChanged += async (sender, args) =>
            {
                await jSRuntime.InvokeVoidAsync("updateNavbar");
            };

            await jSRuntime.InvokeVoidAsync("updateNavbar");

        }
    }
    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("userRole");
        await SessionStorage.DeleteAsync("Full_Name");
        await SessionStorage.DeleteAsync("Picture");
        navigation.NavigateTo("/", forceLoad: true, replace: true);
    }
    private string GetInitial(string name)
    {
        if (!string.IsNullOrWhiteSpace(name))
        {
            return name.Substring(0, 2).ToUpper();
        }
        return "?";
    }
    private class PageInfo
    {
        public string Title { get; set; }
        public string Icon { get; set; }
    }

}