@page "/teacher-managements"
@layout TeacherLayout
@using Blazor_Server.Services
@using Data_Base.Models.S
@using Data_Base.Models.U
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using static Blazor_Server.Services.TeacherManagerService
@inject Notification notification
@inject TeacherManagerService TeacherMangersee
@inject ProtectedSessionStorage SessionStorage
<div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
    @if (status != "2" && status != "3")
    {
        <button class="btn btn-success" type="button" data-bs-target="#offcanvasWithBothOptions" aria-controls="offcanvasWithBothOptions" @onclick="ShowAddForm">
            <i class="bi bi-plus-circle"></i> Thêm giáo viên
        </button>
    }
    <div class="input-group w-25 ms-auto">
        <span class="input-group-text bg-white border-end-0">
            <i class="bi bi-search"></i>
        </span>
        <input type="text" class="form-control border-start-0" @bind="searchText" @bind:event="oninput" placeholder="Tìm kiếm theo tên hoặc số điện thoại..." />
    </div>

</div>

<div class="card card-custom p-4 mb-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="section-title">Danh sách giáo viên</h5>
    </div>
    <div class="table-container" id="tableContainer">
        <div class="table-responsive">
            <table class="table table-hover table-borderless align-middle bg-white  rounded-3">
                <thead class="text-danger text-center">
                    <tr>
                        <th scope="col">STT</th>
                        <th scope="col">Ảnh</th>
                        <th scope="col">Họ tên</th>
                        <th scope="col">Email</th>
                        <th scope="col">Số điện thoại</th>
                        <th scope="col">Ngày sinh</th>
                        <th scope="col">Địa chỉ</th>
                        <th scope="col">Chức vụ</th>
                        <th scope="col">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in PaginatedTeachers.Select((teacher, index) => new { teacher, index }))
                    {
                        <tr class="text-center">
                            <td class="text-muted">@(@item.index + 1)</td>
                            <td>
                                <img src="@item.teacher.Avatar"
                                     class="rounded-circle border border-2 border-primary shadow-sm"
                                     style="width: 48px; height: 48px; object-fit: cover;"
                                     alt="Avatar" />
                            </td>
                            <td class="fw-semibold text-truncate" style="max-width: 180px;">@item.teacher.Full_Name</td>
                            <td class="text-truncate" style="max-width: 220px;">@item.teacher.Email</td>
                            <td>@item.teacher.Phone_Number</td>
                            <td>@item.teacher.date_of_bith.ToString("dd/MM/yyyy")</td>
                            <td class="text-truncate" style="max-width: 180px;">@item.teacher.Address</td>
                            <td>
                                <span class="badge rounded-pill
                            @(item.teacher.Status switch
                              {
                                  1 => "bg-success",
                                  2 => "bg-warning text-dark",
                                  _ => "bg-light text-dark"
                              })">
                                    @(item.teacher.Status switch
                                    {
                                        1 => "Quản lý",
                                        2 => "Giáo viên bộ môn",
                                        _ => "Không xác định"
                                    })
                                </span>
                            </td>
                            <td>
                                @if (status != "2" && status != "3")
                                {
                                    <button class="btn btn-sm btn-outline-primary me-1" title="Sửa"
                                            @onclick="() => EditTeacher(item.teacher.Id)">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" title="Xóa"
                                            @onclick="() => ConfirmDelete(item.teacher.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-outline-info" title="Xem"
                                            @onclick="() => EditTeacher(item.teacher.Id)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>


        </div>
    </div>
    <nav aria-label="Pagination">
        <ul class="pagination justify-content-center my-3">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(CurrentPage - 1)">
                    <i class="bi bi-chevron-left"></i>
                </button>
            </li>

            @for (int i = 1; i <= TotalPages; i++)
            {
                <li class="page-item @(i == CurrentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(i)">
                        @i
                    </button>
                </li>
            }

            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(CurrentPage + 1)">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </li>
        </ul>
    </nav>

</div>
<div class="offcanvas offcanvas-end position-fixed @(isFormVisible ? "show" : "")" tabindex="-1" id="offcanvasWithBothOptions" aria-labelledby="offcanvasWithBothOptionsLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasWithBothOptionsLabel">
            @(isReadOnly ? "Xem thông tin giáo viên" : (isEditing ? "Sửa" : "Thêm") + " Giáo viên")
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close" @onclick="ToggleForm"></button>
    </div>
    <div class="offcanvas-body">
        <EditForm Model="currentTeacher" OnValidSubmit="@(isReadOnly ? null : SaveTeacher)">
                    <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3 d-flex align-items-start gap-3">
                @if (!isReadOnly)
                {
                    <div>
                        <label for="Avatar" class="btn btn-warning mb-2">
                            📷 Tải ảnh lên
                        </label>
                        <InputFile id="Avatar" style="display: none;" OnChange="HandleAvatarUpload" />
                    </div>
                }
                @if (!string.IsNullOrEmpty(avatarPreview))
                {
                    <div class="d-flex flex-column align-items-start">
                        <img src="@avatarPreview" alt="Ảnh xem trước" class="img-thumbnail mb-2" style="max-height: 150px;" />

                        @if (!isEditing && !isReadOnly)
                        {
                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="ClearAvatar">
                                ❌ Xoá ảnh
                            </button>
                        }
                    </div>
                }
            </div>

            <div class="mb-3">
                <label for="name" class="form-label">Họ tên</label>
                <InputText class="form-control"
                           id="name"
                           @bind-Value="currentTeacher.Full_Name"
                           disabled="@isReadOnly"
                           required
                           oninvalid="this.setCustomValidity('Vui lòng nhập họ tên')"
                           oninput="this.setCustomValidity('')" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText type="email" class="form-control" id="email" @bind-Value="currentTeacher.Email" disabled="@isReadOnly" required
                           oninvalid="this.setCustomValidity('Vui lòng nhập email hợp lệ')"
                           oninput="this.setCustomValidity('')" />
            </div>

            <div class="mb-3">
                <label for="Username" class="form-label">Tài khoản</label>
                <InputText class="form-control" id="Username" @bind-Value="currentTeacher.User_name" disabled="@isReadOnly" required
                           oninvalid="this.setCustomValidity('Vui lòng nhập tài khoản')"
                           oninput="this.setCustomValidity('')" />
            </div>

            <div class="mb-3">
                <label for="Password" class="form-label">Mật khẩu</label>
                <InputText type="password" class="form-control" id="Password" @bind-Value="currentTeacher.PassWord" disabled="@isReadOnly" required
                           oninvalid="this.setCustomValidity('Vui lòng nhập mật khẩu')"
                           oninput="this.setCustomValidity('')" />
            </div>

            <div class="mb-3">
                <label for="Phone" class="form-label">Số điện thoại</label>
                <InputText class="form-control" id="Phone"
                           @bind-Value="currentTeacher.Phone_Number"
                           disabled="@isReadOnly"
                           inputmode="numeric"
                           pattern="0[0-9]{9}"
                           required
                           oninvalid="this.setCustomValidity('Vui lòng nhập số điện thoại hợp lệ, bắt đầu bằng 0 và đủ 10 chữ số')"
                           oninput="this.setCustomValidity(''); this.value=this.value.replace(/[^0-9]/g,'');" />

            </div>

            <div class="mb-3">
                <label for="DateOfBirth" class="form-label">Ngày sinh</label>
                <InputDate class="form-control" id="DateOfBirth" @bind-Value="currentTeacher.date_of_bith" disabled="@isReadOnly" required
                           oninvalid="this.setCustomValidity('Vui lòng chọn ngày sinh')"
                           oninput="this.setCustomValidity('')" />
            </div>

            <div class="mb-3">
                <label for="Address" class="form-label">Địa chỉ</label>
                <InputText class="form-control" id="Address" @bind-Value="currentTeacher.Address" disabled="@isReadOnly" required
                           oninvalid="this.setCustomValidity('Vui lòng nhập địa chỉ')"
                           oninput="this.setCustomValidity('')" />
            </div>
            <div class="mb-3">
                <label for="Status" class="form-label">Chức vụ</label>
                <InputSelect class="form-select" id="Status" @bind-Value="currentTeacher.Status" disabled="@isReadOnly" required
                             oninvalid="this.setCustomValidity('Vui lòng chọn chức vụ giáo viên')"
                             oninput="this.setCustomValidity('')">
                    <option value="">-- Chọn chức vụ --</option>
                    <option value="1">Quản lý</option>
                    <option value="2">Giáo viên bộ môn</option>
                </InputSelect>
            </div>
            @if (!isReadOnly)
            {
                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-primary">Lưu</button>
                </div>
            }
        </EditForm>
    </div>
</div>
@code {
    int CurrentPage = 1;
    int PageSize = 6;
    int TotalPages => (int)Math.Ceiling((double)FilteredTeachers.Count / PageSize);
    void ChangePage(int page)
    {
        if (page < 1 || page > TotalPages)
            return;

        CurrentPage = page;
    }
    List<listteacher> PaginatedTeachers => FilteredTeachers
    .Skip((CurrentPage - 1) * PageSize)
    .Take(PageSize)
    .ToList();
    private bool isFormVisible = false;
    private bool isEditing = false;
    private bool isReadOnly => status == "2";
    private listteacher currentTeacher = new listteacher();
    private List<listteacher> allTeachers = new List<listteacher>();
    private List<Subject> allSubject = new List<Subject>();
    private string searchText = "";
    private string status;
    private List<listteacher> FilteredTeachers => string.IsNullOrWhiteSpace(searchText)
     ? allTeachers
     : allTeachers.Where(t =>
         t.Full_Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)||
         t.Phone_Number.Contains(searchText, StringComparison.OrdinalIgnoreCase)
     ).ToList();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await SessionStorage.GetAsync<string>("Status");
            status = result.Success ? result.Value : string.Empty;
            allTeachers = await TeacherMangersee.GetAllTeacher();
            allSubject = await TeacherMangersee.GetAllSubject();
        }
        catch
        {

        }
    }

    private void ToggleForm()
    {
        isFormVisible = !isFormVisible;
        if (!isFormVisible)
        {
            avatarPreview = null;
            currentTeacher = new listteacher();
            isEditing = false;
        }
    }

    private void ShowAddForm()
    {
        currentTeacher = new listteacher();
        avatarPreview = null;
        currentTeacher.date_of_bith = DateTime.Now;
        isEditing = false;
        isFormVisible = true;
    }

    private void EditTeacher(int id)
    {
        currentTeacher = allTeachers.FirstOrDefault(t => t.Id == id);
        if (currentTeacher != null)
        {
            avatarPreview = currentTeacher.Avatar;
            isEditing = true;
            isFormVisible = true;
        }
    }
    private IBrowserFile selectedFile;
    private string? avatarPreview;
    private string? avatarBase64;
    private void ClearAvatar()
    {
        avatarPreview = null;
        currentTeacher.Avatar = null;
    }
    private async Task HandleAvatarUpload(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            var bytes = ms.ToArray();

            avatarBase64 = Convert.ToBase64String(bytes);
            avatarPreview = $"data:{selectedFile.ContentType};base64,{avatarBase64}";

            currentTeacher.Avatar = avatarBase64;
        }
    }

    private async Task SaveTeacher()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(currentTeacher.Phone_Number) ||
                currentTeacher.Phone_Number.Length != 10 ||
                !currentTeacher.Phone_Number.All(char.IsDigit))
            {
                await notification.ShowSweetAlert("Số điện thoại không hợp lệ! Phải gồm đúng 10 chữ số.", "error");
                return;
            }

            var today = DateTime.Today;
            if (currentTeacher.date_of_bith > today)
            {
                await notification.ShowSweetAlert("Ngày sinh không được ở tương lai!", "error");
                return;
            }
            var age = today.Year - currentTeacher.date_of_bith.Year;
            if (currentTeacher.date_of_bith.Date > today.AddYears(-age)) age--;

            if (age < 18)
            {
                await notification.ShowSweetAlert("Giáo viên phải ít nhất 18 tuổi!", "warning");
                return;
            }
            else if (age > 100)
            {
                await notification.ShowSweetAlert("Ngày sinh không hợp lệ (quá 100 tuổi)!", "warning");
                return;
            }

            if (isEditing)
            {
                var updateResult = await TeacherMangersee.UpdateTeacherAsync(currentTeacher.Id, currentTeacher, selectedFile);
                if (updateResult)
                {
                    await notification.ShowSweetAlert($"Cập nhật giáo viên {currentTeacher.Full_Name} thành công!", "success");
                    allTeachers = await TeacherMangersee.GetAllTeacher();
                }
                else
                {
                    await notification.ShowSweetAlert("Cập nhật giáo viên thất bại.", "error");
                    allTeachers = await TeacherMangersee.GetAllTeacher();
                }
            }
            else
            {
                var result = await TeacherMangersee.CreateTeacherAsync(currentTeacher, selectedFile);

                if (result != null)
                {
                    await notification.ShowSweetAlert($"Đã thêm giáo viên {currentTeacher.Full_Name} thành công!", "success");
                    allTeachers = await TeacherMangersee.GetAllTeacher();
                }
                else
                {
                    await notification.ShowSweetAlert("Không thể thêm giáo viên mới", "error");
                }
            }
            isFormVisible = false;
            currentTeacher = new listteacher();
        }
        catch (Exception ex)
        {
            await notification.ShowSweetAlert($"Có lỗi xảy ra: {ex.Message}", "error");
        }
    }



    private async Task ConfirmDelete(int id)
    {
        try
        {
            var delete = await TeacherMangersee.DeleteTeacher(id);
            if (delete != null)
            {
                await notification.ShowSweetAlert("Xóa giáo viên thành công!", "success");
                allTeachers = await TeacherMangersee.GetAllTeacher();
            }
            else
            {
                await notification.ShowSweetAlert("Xóa giáo viên thất bại!", "error");
            }
        }
        catch { }
    }
    private void OnFileSelected(ChangeEventArgs e)
    {
        // Handle file import
    }

    private void ExportToExcel()
    {
        // Handle export logic
    }
}
