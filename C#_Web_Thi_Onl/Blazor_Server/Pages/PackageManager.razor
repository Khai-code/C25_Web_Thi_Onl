@page "/Package-Manager"
@using Blazor_Server.Services
@using Data_Base.GenericRepositories
@using Data_Base.Models.A
@using Data_Base.Models.E
@using Data_Base.Models.Q
@using Data_Base.Models.T
@using Data_Base.V_Model
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.IdentityModel.Tokens.Jwt
@using static Blazor_Server.Services.ModelViewQuesEssayService
@using static Blazor_Server.Services.PackageManager
@using static Blazor_Server.Services.Package_Test_ERP
@inject NavigationManager Navigation
@inject Package_Test_ERP PTERP
@inject Blazor_Server.Services.PackageManager pm
@inject Notification notification
@layout TeacherLayout
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService toastService

<div class="container-fluid mt-3">
    <div class=" mb-3">
        <form class="w-100" style="max-width: 1200px;">
            <!-- Hàng 2: Bộ lọc bên trái, nút thêm bài thi bên phải -->
            <div class="row align-items-end">
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-success w-150 justify-content-end" disabled="@(this._currentTeacher.Position != 0 ? "disabled" : null)" @onclick="OpenAddExamModal">
                        + Thêm bài thi
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- Danh sách bài thi -->
    <div class="card shadow-sm rounded-4 border-0">
        <div class="card-header bg-white d-flex justify-content-between align-items-center px-4 py-3">
            <h5 class="mb-0 fw-bold text-primary">📦 Danh sách gói đề</h5>
            <input type="text" class="form-control w-auto" @bind="Search" @bind:event="oninput" placeholder="🔍 Tìm kiếm..." />
        </div>
        <div class="custom-table-wrapper">
            <table class="table table-striped table-bordered text-center align-middle custom-table">
                <thead class="table-light text-center">
                    <tr>
                        <th class="col-stt">STT</th>
                        <th class="col-ma">Mã</th>
                        <th class="col-ten">Tên</th>
                        <th class="col-mon">Môn học</th>
                        <th class="col-lop">Lớp</th>
                        <th class="col-sobai">Số bài</th>
                        <th class="col-gvthi">GV coi thi 1(GV chủ nhiệm)</th>
                        <th class="col-gvcn">GV coi thi 2</th>
                        <th class="col-gvcn">GV gia đề</th>
                        <th class="col-batdau">Bắt đầu</th>
                        <th class="col-ketthuc">Kết thúc</th>
                        <th class="col-trangthai">Trạng thái</th>
                        <th class="col-thaotac">Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var baiThi in filterInactive.Where(o => o.Status != 3))
                    {
                        <tr>
                            <td class="text-center text-muted">@baiThi.Id</td>
                            <td>@baiThi.Code</td>
                            <td class="fw-semibold">@baiThi.Name</td>
                            <td><span class="badge bg-primary-subtle text-primary">@baiThi.SubjectName</span></td>
                            <td><span class="badge bg-success-subtle text-success">@baiThi.ClassName</span></td>
                            <td class="text-center">@baiThi.ClassNub</td>
                            <td><span class="text-success">@baiThi.TeacherClassName</span></td>
                            <td><span class="text-primary">@baiThi.TeacherExamRoomName</span></td>
                            <td><span class="text-primary">@baiThi.TeacherGivesQuestionName</span></td>
                            <td>@ConvertLong.ConvertLongToDateTime(baiThi.StartTime)</td>
                            <td>@ConvertLong.ConvertLongToDateTime(baiThi.EndTime)</td>
                            <td>
                                @if (baiThi.Status == 0)
                                {
                                    <span class="text-success">Chưa thi</span>
                                }
                                else if (baiThi.Status == 1)
                                {
                                    <span class="text-danger">Đang thi</span>
                                }
                                else
                                {
                                    <span class="text-muted">Không xác định</span>
                                }
                            </td>
                            <td>
                                <div class="d-flex gap-2 justify-content-center">
                                    <button class="btn btn-sm btn-outline-danger" title="DS câu hỏi"
                                    data-bs-toggle="tooltip"
                                    @onclick="() => GetLstQues(baiThi.Id, baiThi.PackageTypeId)">
                                        <i class="bi bi-list-ul"></i>
                                    </button>

                                    <button class="btn btn-sm btn-outline-primary" title="Thêm câu hỏi"
                                    data-bs-toggle="tooltip" disabled="@((baiThi.Status == 1) || (this._currentTeacher.Id != baiThi.TeacherGivesQuestionId)? "disabled" : null)"
                                    @onclick="() => OpenAddExamModalQuesEssay(baiThi.Id, baiThi.PackageTypeId, baiThi.ClassId, baiThi.SubjectId)">
                                        <i class="bi bi-plus-circle"></i>
                                    </button>

                                    @* <button class="btn btn-sm btn-outline-primary" title="Thêm câu hỏi"
                                    data-bs-toggle="tooltip"
                                    disabled="@((baiThi.Status == 1) ? "disabled" : null)"
                                    @onclick="() => OpenAddExamModalQuesEssay(baiThi.Id, baiThi.PackageTypeId, baiThi.ClassId, baiThi.SubjectId)">
                                        <i class="bi bi-plus-circle"></i>
                                    </button> *@

                                    <button class="btn btn-sm btn-outline-warning" title="Sửa"
                                    data-bs-toggle="tooltip"
                                    disabled="@((baiThi.Status == 1) ? "disabled" : null)"
                                    @onclick="() => StartEditPackage(baiThi.Id)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

    </div>



    <!-- Modal Thêm Bài Thi -->
    @if (IsAddExamModalOpen)
    {
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content relative shadow-2xl rounded-2xl border border-green-200 p-6 bg-white">
                    <!-- Nút đóng modal -->
                    <button type="button" class="absolute top-3 right-4 text-gray-500 hover:text-red-600 text-2xl font-bold transition duration-200" @onclick="CloseModal">
                        ×
                    </button>

                    <div class="space-y-6">
                        <h2 class="text-3xl font-bold text-center bg-gradient-to-r from-green-500 via-lime-400 to-green-500 text-white py-2 rounded-lg shadow">
                            🌿 Thêm Gói Đề Thi
                        </h2>

                        <form class="space-y-6">
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label for="packageName" class="block font-medium text-green-700 mb-1">Tên Package</label>
                                    <input type="text" id="packageName" name="packageName" class="w-full border border-green-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-400 hover:border-green-500 transition" @bind="PackageName">
                                </div>

                                <div>
                                    <label for="subject" class="block font-medium text-green-700 mb-1">Bài thi</label>
                                    <select id="subject" name="subject" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="packageTestADO.Package.Package_Type_Id">
                                        <option value="">-- Chọn bài thi --</option>
                                        @foreach (var pt in packageTypeViewModels)
                                        {
                                            <option value="@pt.Package_Type_Id">@pt.Package_Type_Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label class="block font-medium text-green-700 mb-1">Thời gian tạo</label>
                                    <input type="text" class="w-full bg-gray-100 border border-gray-300 rounded-lg px-3 py-2 text-gray-600" value="@CreateTimeFormatted" readonly>
                                </div>

                                <div>
                                    <label for="CountQuestion" class="block font-medium text-green-700 mb-1">Số lượng câu hỏi</label>
                                    <input type="text" id="CountQuestion" name="CountQuestion" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="CountQuestion">
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label for="startTime" class="block font-medium text-green-700 mb-1">Bắt đầu</label>
                                    <input type="datetime-local" id="startTime" name="startTime" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="Start_Time" required />
                                </div>
                                <div>
                                    <label for="endTime" class="block font-medium text-green-700 mb-1">Kết thúc</label>
                                    <input type="datetime-local" id="endTime" name="endTime" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="End_Time" required>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label for="room" class="block font-medium text-green-700 mb-1">Bài thi</label>
                                    <select id="exam" name="exam"
                                    class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400"
                                    @onchange="OnExamChanged">
                                        <option value="">-- Chọn gói Exam --</option>
                                        @foreach (var exam in examsViewModels)
                                        {
                                            SubjectId = exam.Subject_Id;
                                            <option value="@exam.Exams_Id">@exam.Exams_Name</option>
                                        }
                                    </select>
                                </div>

                                <div>
                                    <label for="class" class="block font-medium text-green-700 mb-1">Lớp</label>
                                    <select id="class" name="class" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400">
                                        <option value="">-- Chọn gói lớp --</option>
                                        @foreach (var classes in classViewModels)
                                        {
                                            Homeroom_Teacher = classes.Homeroom_Teacher;
                                            <option value="@classes.Class_Id">@classes.Class_Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label for="pointType" class="block font-medium text-green-700 mb-1">Loại bài thi</label>
                                    <select id="pointType" name="pointType" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400"
                                    @onchange="OnPointTypeChanged">
                                        <option value="">-- Chọn gói loại --</option>
                                        @foreach (var point in pointTypeViewModels)
                                        {
                                            <option value="@point.PointType_Id">@point.PointType_Name</option>
                                        }
                                    </select>
                                </div>

                                <div>
                                    <label for="room" class="block font-medium text-green-700 mb-1">Phòng thi</label>
                                    <select id="room" name="room" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="packageTestADO.Exam_Room.Room_Id">
                                        <option value="">-- Chọn gói phòng --</option>
                                        @foreach (var room in roomViewModels)
                                        {
                                            <option value="@room.Room_Id">@room.Room_Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label for="subject" class="block font-medium text-green-700 mb-1">Môn thi</label>
                                    <input id="subject" name="subject" class="w-full border border-green-300 rounded-lg px-3 py-2 bg-gray-100 text-gray-700" value="@subjectViewModel?.Subject_Name" readonly />
                                </div>

                                <div>
                                    <label for="teacher1" class="block font-medium text-green-700 mb-1">Giáo viên coi thi 1</label>
                                    <select id="teacher1" name="teacher1" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="TeacherId1">
                                        <option value="">-- Chọn giáo viên coi thi --</option>
                                        @foreach (var tea in teacherViewModels.Where(o => o.Teacher_Id != TeacherId2))
                                        {
                                            <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                                <div>
                                    <label for="teacher" class="block font-medium text-green-700 mb-1">Giáo viên gia đề</label>
                                    <select id="teacher" name="teacher" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="packageTestADO.Package.Teacher_Id">
                                        <option value="">-- Chọn giáo viên coi thi --</option>
                                        @foreach (var tea in teacherViewModels.Where(o => o.Subject_Id == SubjectId && o.Teacher_Id != Homeroom_Teacher))
                                        {
                                            <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                        }
                                    </select>
                                </div>

                                <div>
                                    <label for="teacher2" class="block font-medium text-green-700 mb-1">Giáo viên coi thi 2</label>
                                    <select id="teacher2" name="teacher2" class="w-full border border-green-300 rounded-lg px-3 py-2 hover:border-green-500 focus:ring-2 focus:ring-green-400" @bind="TeacherId2">
                                        <option value="">-- Chọn giáo viên coi thi --</option>
                                        @foreach (var tea in teacherViewModels.Where(o => o.Teacher_Id != TeacherId1))
                                        {
                                            <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                        }
                                    </select>
                                </div>
                            </div>

                            <button class="w-full bg-gradient-to-r from-green-500 via-emerald-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-2 px-4 rounded-xl font-semibold shadow-md transition duration-200 flex items-center justify-center gap-2"
                            @onclick="Creta_P_ER_ERP" @onclick:preventDefault>
                                ➕ Thêm Package
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!--Model thêm câu hỏi tự luân  -->
@if (IsAddExamModalQuesEssay)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content shadow-lg rounded-4">
                <div class="modal-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="modal-title"><i class="bi bi-patch-question-fill me-2"></i>Thêm Câu Hỏi Tự Luận</h5>
                    <div class="d-flex gap-2">
                        <label class="btn btn-light text-primary border-primary fw-semibold">
                            <i class="bi bi-upload me-1"></i> Tải Excel lên
                            <InputFile OnChange="HandleFileSelectedessay" class="d-none" accept=".xlsx,.xls" />
                        </label>
                        <a href="files/Book2.xlsx" download class="btn btn-outline-light fw-semibold">
                            <i class="bi bi-download me-1"></i> Tải file mẫu
                        </a>
                    </div>
                </div>

                <div class="modal-body">
                    <div class="row">
                        <!-- Form nhập liệu -->
                        <div class="col-md-6 border-end pe-4 d-flex flex-column justify-content-between">
                            <div>
                                <form>
                                    <div class="mb-3">
                                        <label for="questionName" class="form-label fw-bold">📝 Nội dung câu hỏi</label>
                                        <textarea class="form-control" id="questionName" rows="5" placeholder="Nhập nội dung câu hỏi"
                                        @bind="questionAnswers.question.Question_Name"></textarea>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">📌 Loại câu hỏi</label>
                                        <select class="form-select" @bind="questionAnswers.question.Question_Type_Id">
                                            <option value="">-- Chọn Loại câu hỏi --</option>
                                            @foreach (var qt in questionTypeViewModels)
                                            {
                                                <option value="@qt.Question_Type_Id">@qt.Question_Type_Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">🎯 Mức độ</label>
                                        <select class="form-select" @bind="questionAnswers.question.Question_Level_Id">
                                            <option value="">-- Chọn mức độ câu hỏi --</option>
                                            @foreach (var ql in questionlevelViewModel)
                                            {
                                                <option value="@ql.Question_Level_Id">@ql.Question_Level_Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">⭐ Số điểm</label>
                                        <input class="form-control" type="number" placeholder="Số điểm cho câu hỏi"
                                        @bind="questionAnswers.question.Maximum_Score" min="0" />
                                    </div>
                                </form>
                            </div>

                            <div class="mt-3 text-end">
                                <button class="btn btn-success me-2" @onclick="CreateQues">
                                    <i class="bi bi-check-circle me-1"></i> Lưu câu hỏi
                                </button>
                                <button class="btn btn-secondary" @onclick="CloseModal">
                                    <i class="bi bi-x-circle me-1"></i> Hủy
                                </button>
                            </div>
                        </div>

                        <!-- Danh sách câu hỏi -->
                        <div class="col-md-6 ps-4 d-flex flex-column justify-content-between">
                            <div>
                                <h6 class="fw-bold text-primary mb-3">📚 Danh sách câu hỏi có sẵn</h6>
                                <div style="max-height: 500px; overflow-y: auto;" class="border rounded p-3 bg-light">
                                    @if (histDTOs != null && histDTOs.Any())
                                    {
                                        @foreach (var pkg in histDTOs)
                                        {
                                            <div class="mb-4">
                                                <strong class="text-secondary fst-italic">@pkg.Package_Name</strong>
                                                <ul class="list-group list-group-flush mt-2">
                                                    @foreach (var ques in pkg.Questions)
                                                    {
                                                        <li class="list-group-item px-2 py-2 d-flex align-items-start">
                                                            <input class="form-check-input me-2 mt-1" type="checkbox"
                                                            @onchange="@(() => ToggleSelectedQues(ques.QuestionId))"
                                                            checked="@selectedQuestionIds.Contains(ques.QuestionId)" />
                                                            <div>
                                                                <div class="fw-semibold">@ques.QuestionName</div>
                                                                @if (ques.Answers != null && ques.Answers.Any())
                                                                {
                                                                    <ul class="ms-4 mt-1 mb-0">
                                                                        @foreach (var ans in ques.Answers)
                                                                        {
                                                                            <li class="text-muted small">- @ans.AnswersName</li>
                                                                        }
                                                                    </ul>
                                                                }
                                                            </div>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="text-muted fst-italic">Không có dữ liệu câu hỏi.</p>
                                    }
                                </div>
                            </div>

                            <div class="mt-3 text-end">
                                <button class="btn btn-primary" @onclick="() => SaveListQuestions(selectedQuestionIds)">
                                    <i class="bi bi-save2 me-1"></i> Lưu các câu hỏi đã chọn
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


<!--Model thêm câu hỏi trắc nghiệm  -->
@if (IsAddExamModalQuesMultipleChoice)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white justify-content-between">
                    <h5 class="modal-title">Thêm Câu Hỏi</h5>
                    <div class="d-flex gap-2">
                        <label class="btn btn-light btn-sm mb-0">
                            📤 Tải Excel
                            <InputFile OnChange="HandleFileSelected" class="d-none" accept=".xlsx,.xls" />
                        </label>
                        <a href="files/Book11.xlsm" download class="btn btn-outline-light btn-sm">📄 Tải file mẫu</a>
                        <button class="btn-close" @onclick="CloseModal"></button>
                    </div>
                </div>

                <div class="modal-body row">
                    <!-- Form nhập câu hỏi -->
                    <div class="col-md-6 border-end">
                        <form>
                            <div class="mb-3">
                                <label for="questionName" class="form-label">Nội dung câu hỏi</label>
                                <input class="form-control" id="questionName" type="text" placeholder="Nhập nội dung câu hỏi" @bind="questionAnswers.question.Question_Name" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Loại câu hỏi</label>
                                <select class="form-control" @bind="SelectedQuestionTypeId">
                                    <option value="">-- Chọn loại câu hỏi --</option>
                                    @foreach (var qt in questionTypeViewModels)
                                    {
                                        <option value="@qt.Question_Type_Id">@qt.Question_Type_Name</option>
                                    }
                                </select>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Mức độ</label>
                                <select class="form-control" @bind="questionAnswers.question.Question_Level_Id">
                                    <option value="">-- Chọn mức độ --</option>
                                    @foreach (var ql in questionlevelViewModel)
                                    {
                                        <option value="@ql.Question_Level_Id">@ql.Question_Level_Name</option>
                                    }
                                </select>
                            </div>

                            @if (CheckType == 1)
                            {
                                <!-- Đúng/Sai -->
                                <div class="mb-3 border rounded p-3">
                                    <label class="form-label fw-bold">Đáp án Đúng/Sai</label>
                                    @foreach (var ans in lstAns)
                                    {
                                        <div class="input-group mb-2">
                                            <span class="input-group-text">
                                                <input type="radio" name="tfanswer" checked="@Equals(selectedAnswer, ans)" @onchange="@(() => selectedAnswer = ans)" />
                                            </span>
                                            <input class="form-control" type="text" @bind="ans.Name" />
                                        </div>
                                    }
                                </div>
                            }
                            else if (CheckType == 2)
                            {
                                <!-- Một đáp án đúng -->
                                <div class="mb-3 border rounded p-3">
                                    <label class="form-label fw-bold">Chọn đáp án đúng (1 đáp án):</label>
                                    @foreach (var ans in lstAns)
                                    {
                                        <div class="input-group mb-2">
                                            <span class="input-group-text">
                                                <input type="radio" name="singleanswer" checked="@Equals(selectedAnswer, ans)" @onchange="@(() => selectedAnswer = ans)" />
                                            </span>
                                            <input class="form-control" type="text" placeholder="Nhập đáp án" @bind="ans.Name" />
                                            <button type="button" class="btn btn-danger" @onclick="() => RemoveAnswer(ans)">❌</button>
                                        </div>
                                    }
                                    <button type="button" class="btn btn-outline-primary mt-2" @onclick="AddAnswer">➕ Thêm đáp án</button>
                                </div>
                            }
                            else if (CheckType == 3)
                            {
                                <div class="mb-3 border rounded p-3">
                                    <label class="form-label fw-bold">Đáp án (chọn nhiều):</label>
                                    @foreach (var ans in lstAns)
                                    {
                                        <div class="input-group mb-2">
                                            <span class="input-group-text">
                                                <input type="checkbox" @bind="ans.Right" />
                                            </span>
                                            <input class="form-control" type="text" placeholder="Đáp án" @bind="ans.Name" />
                                            <button type="button" class="btn btn-danger" @onclick="() => RemoveAnswer(ans)">❌</button>
                                        </div>
                                    }
                                    <button type="button" class="btn btn-outline-primary mt-2" @onclick="AddAnswer">➕ Thêm đáp án</button>
                                </div>
                            }
                        </form>
                    </div>

                    <!-- Danh sách câu hỏi có sẵn -->
                    <div class="col-md-6 ps-4 d-flex flex-column justify-content-between">
                        <div>
                            <h6 class="fw-bold">📋 Danh sách câu hỏi có sẵn</h6>
                            <div style="max-height: 500px; overflow-y: auto;">
                                @if (histDTOs != null && histDTOs.Any())
                                {
                                    @foreach (var pkg in histDTOs)
                                    {
                                        <div class="mb-3">
                                            <strong class="text-secondary">@pkg.Package_Name</strong>
                                            <ul class="list-group">
                                                @foreach (var ques in pkg.Questions)
                                                {
                                                    <li class="list-group-item">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="ques_@ques.QuestionId"
                                                            checked="@selectedQuestionIds.Contains(ques.QuestionId)"
                                                            @onchange="@(() => ToggleSelectedQues(ques.QuestionId))" />
                                                            <label class="form-check-label" for="ques_@ques.QuestionId">
                                                                <div class="fw-semibold">@ques.QuestionName</div>
                                                                @if (ques.Answers != null && ques.Answers.Any())
                                                                {
                                                                    <ul class="ms-3 mt-1 mb-0">
                                                                        @foreach (var ans in ques.Answers)
                                                                        {
                                                                            <li>- @ans.AnswersName @if (ans.Right_Answer == 1)
                                                                                {
                                                                                    <span class="badge bg-success ms-1">✔</span>
                                                                                }</li>
                                                                        }
                                                                    </ul>
                                                                }
                                                            </label>
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted fst-italic">Không có dữ liệu câu hỏi.</p>
                                }
                            </div>
                        </div>

                        <div class="mt-3 text-end">
                            <button class="btn btn-primary" @onclick="() => SaveListQuestions(selectedQuestionIds)">
                                <i class="bi bi-save2"></i> Lưu các câu hỏi đã chọn
                            </button>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="CreateQues">
                        <i class="bi bi-save"></i> Lưu
                    </button>
                    <button class="btn btn-secondary" @onclick="CloseModal">Hủy</button>
                </div>
            </div>
        </div>
    </div>
}


@if (IsListQuestyon )
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content shadow rounded-4 position-relative">

                <!-- Nút đóng -->
                <button type="button" class="btn-close position-absolute top-0 end-0 m-2" @onclick="CloseModal" aria-label="Close"></button>

                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold">📋 Danh sách câu hỏi</h5>
                </div>

                <div class="modal-body">
                    @if (lstQues?.Any() == true)
                    {
                        @foreach (var question in lstQues)
                        {
                            <div class="question-box border rounded-3 p-3 mb-3 bg-light shadow-sm" style="font-size: 0.9rem;">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <strong class="text-dark">❓ Câu hỏi:</strong>
                                        <span class="text-primary">@question.QuestionName</span>
                                    </div>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-outline-warning"
                                        @onclick="() => StartEditQuestion(question)">
                                            ✏️ Sửa
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteQues(question.QuestionId, question.QuestionTypeId)" >@*@onclick="() => UpdateQuestion(question.QuestionId)"*@
                                            🗑️ Xóa
                                        </button>
                                    </div>
                                </div>
                                @if(packageTypeId == 2)
                                {
                                    <ul class="list-unstyled ps-3 mb-0">
                                        @foreach (var ans in question.Answers ?? new())
                                        {
                                            <li class="mb-1">
                                                <span class="text-secondary">•</span> @ans.AnswersName
                                                @if (ans.Right_Answer == 1)
                                                {
                                                    <span class="badge bg-success ms-2">Đúng</span>
                                                }
                                            </li>
                                        }
                                    </ul>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info text-center">Không có câu hỏi nào.</div>
                    }
                </div>
            </div>
        </div>
    </div>

}


@if (isEditing && lstQuesAns != null && packageTypeId == 2)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content shadow-lg rounded-4 border-0 position-relative">
                <!-- Nút đóng (X) -->
                <button type="button"
                class="btn-close position-absolute top-0 end-0 m-3"
                aria-label="Close"
                @onclick="CancelEdit">
                </button>
                <form onsubmit="return false" class="p-4">
                    <div class="mb-4">
                        <label class="form-label fw-bold fs-5">Câu hỏi:</label>
                        <input type="text" class="form-control form-control-lg" @bind="lstQuesAns.QuestionName" placeholder="Nhập nội dung câu hỏi..." />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold fs-5">Danh sách đáp án:</label>
                        @for (int i = 0; i < lstQuesAns.Answers.Count; i++)
                        {
                            int index = i; // Capture index for closure
                            <div class="d-flex mb-3 align-items-center">
                                <span class="me-2 fw-bold">@((char)(65 + i)).</span>
                                <input type="text"
                                class="form-control me-3"
                                value="@lstQuesAns.Answers[i].AnswersName"
                                @oninput="(e) => UpdateAnswerName(index, e.Value.ToString())"
                                placeholder="Nhập đáp án..." />
                                @if (lstQuesAns.QuestionTypeId == 1 || lstQuesAns.QuestionTypeId == 2)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input"
                                        type="radio"
                                        name="correctAnswer"
                                        checked="@(lstQuesAns.Answers[i].Right_Answer == 1)"
                                        @onclick="() => SetCorrectAnswer(index)" />
                                        <label class="form-check-label ms-1 text-success fw-semibold">✔️ Đúng</label>
                                    </div>
                                }
                                else if (lstQuesAns.QuestionTypeId == 3)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input"
                                        type="checkbox"
                                        checked="@(lstQuesAns.Answers[i].Right_Answer == 1)"
                                        @onclick="() => ToggleCorrectAnswer(index)" />
                                        <label class="form-check-label ms-1 text-success fw-semibold">✔️ Đúng</label>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <!-- Thông báo lỗi validation -->
                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert alert-danger mb-3">
                            @validationMessage
                        </div>
                    }

                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-outline-secondary me-2 px-4 py-2 rounded-pill" @onclick="CancelEdit">❌ Hủy</button>
                        <button type="button" class="btn btn-primary px-4 py-2 rounded-pill" @onclick="SaveEditedQuestion">💾 Lưu</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@if (isEssay && lstQuesAns != null && packageTypeId == 1)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content shadow-lg rounded-4 border-0 position-relative">
                <!-- Nút đóng (X) -->
                <button type="button"
                class="btn-close position-absolute top-0 end-0 m-3"
                aria-label="Close"
                @onclick="CancelEdit">
                </button>
                <form onsubmit="return false" class="p-4">
                    <div class="mb-4">
                        <label class="form-label fw-bold fs-5">Câu hỏi:</label>
                        <input type="text" class="form-control form-control-lg" @bind="lstQuesAns.QuestionName" placeholder="Nhập nội dung câu hỏi..." />
                    </div>
                    <!-- Thông báo lỗi validation -->
                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert alert-danger mb-3">
                            @validationMessage
                        </div>
                    }

                    <div class="d-flex justify-content-end mt-4">
                        <button type="button" class="btn btn-outline-secondary me-2 px-4 py-2 rounded-pill" @onclick="CancelEdit">❌ Hủy</button>
                        <button type="button" class="btn btn-primary px-4 py-2 rounded-pill" @onclick="SaveEditedQuestion">💾 Lưu</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}


@if (updatePackageTestADO != null && IsUpdateExamModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content relative shadow-lg rounded-lg border border-gray-300">
                <!-- Nút đóng modal -->
                <button type="button" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-2xl font-bold" @onclick="CloseModal">
                    ×
                </button>

                <div class="p-6 space-y-6">
                    <h2 class="text-2xl font-bold text-center text-green-700 uppercase">Cập Nhật Gói Đề Thi</h2>

                    <form class="space-y-6">
                        <!-- Hàng 1: Tên package + Bài thi -->
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <div>
                                <label for="packageName" class="block text-sm font-medium text-gray-700 mb-1">Tên Package</label>
                                <input type="text" id="packageName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                                @bind="updatePackageTestADO.Package_Name" />
                            </div>

                            <div>
                                <label for="packageType" class="block text-sm font-medium text-gray-700 mb-1">Bài thi</label>
                                <input type="text" id="packageName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                                @bind="updatePackageTestADO.Package_Type_Name" readonly />
                            </div>
                        </div>

                        <!-- Hàng 2: Ngày tạo (readonly) + Số lượng câu -->
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Thời gian tạo</label>
                                <input type="text" class="w-full bg-gray-100 border border-gray-300 rounded-md px-3 py-2 text-gray-600" value="@CreateTimeFormatted" readonly />
                            </div>

                            <div>
                                <label for="CountQuestion" class="block text-sm font-medium text-gray-700 mb-1">Số lượng câu hỏi</label>
                                <input type="text" id="CountQuestion" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                @bind="updatePackageTestADO.Number_Of_Questions" />
                            </div>
                        </div>

                        <!-- Hàng 3: Start - End time -->
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <div>
                                <label for="startTime" class="block text-sm font-medium text-gray-700 mb-1">Bắt đầu</label>
                                <input type="datetime-local" id="startTime" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                @bind="Start_Time" />
                            </div>

                            <div>
                                <label for="endTime" class="block text-sm font-medium text-gray-700 mb-1">Kết thúc</label>
                                <input type="datetime-local" id="endTime" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                @bind="End_Time" />
                            </div>
                        </div>

                        <!-- Hàng 4: Môn học - Lớp -->
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <div>
                                <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">Môn học</label>
                                <input type="text" id="packageName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                                @bind="updatePackageTestADO.Subject_Name" readonly />
                            </div>

                            <div>
                                <label for="class" class="block text-sm font-medium text-gray-700 mb-1">Lớp</label>
                                <select id="class" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                @bind="updatePackageTestADO.Class_Id">
                                    <option value="">-- Chọn lớp --</option>
                                    @foreach (var classes in classViewModels)
                                    {
                                        <option value="@classes.Class_Id">@classes.Class_Name</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Hàng 5: Loại điểm - Phòng thi -->
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <div>
                                <label for="pointType" class="block text-sm font-medium text-gray-700 mb-1">Loại bài thi</label>
                                <input type="text" id="packageName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                                @bind="updatePackageTestADO.Package_Type_Name" readonly />
                            </div>

                            <div>
                                <label for="room" class="block text-sm font-medium text-gray-700 mb-1">Phòng thi</label>
                                <select id="room" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                @bind="updatePackageTestADO.Room_Id">
                                    <option value="">-- Chọn phòng --</option>
                                    @foreach (var room in roomViewModels)
                                    {
                                        <option value="@room.Room_Id">@room.Room_Name</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Hàng 6: Đề thi - Giáo viên coi thi -->
                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <div>
                                <label for="exam" class="block text-sm font-medium text-gray-700 mb-1">Đề thi</label>
                                <input type="text" id="packageName" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                                @bind="updatePackageTestADO.Exam_Name" readonly />
                            </div>

                            <div>
                                <label for="teacher" class="block text-sm font-medium text-gray-700 mb-1">Giáo viên coi thi 1</label>
                                <select id="teacher" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                        @bind="updatePackageTestADO.GV1_Id">
                                    <option value="">-- Chọn giáo viên --</option>
                                    @foreach (var tea in teacherViewModels)
                                    {
                                        <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                            <div>
                                <label for="exam" class="block text-sm font-medium text-gray-700 mb-1">Giảo viên gia đề</label>
                                <select id="teacher" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                        @bind="updatePackageTestADO.TeacherPackage_Id">
                                    <option value="">-- Chọn giáo viên --</option>
                                    @foreach (var tea in teacherViewModels)
                                    {
                                        <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                    }
                                </select>
                            </div>

                            <div>
                                <label for="teacher" class="block text-sm font-medium text-gray-700 mb-1">Giáo viên coi thi 2</label>
                                <select id="teacher" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                        @bind="updatePackageTestADO.GV2_Id">
                                    <option value="">-- Chọn giáo viên --</option>
                                    @foreach (var tea in teacherViewModels)
                                    {
                                        <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </form>

                    <div class="flex justify-end gap-4 pt-4 border-t border-gray-200 mt-6">
                        <button class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md font-semibold" @onclick="() => UpdatePackage(updatePackageTestADO)">
                            Cập nhật
                        </button>

                        <button class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-6 py-2 rounded-md font-semibold"
                        @onclick="CloseModal">
                            Hủy
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private bool IsListQuestyon = false;
    private bool IsAddExamModalOpen = false;
    private bool IsAddExamModalQuesEssay = false;
    private bool IsAddExamModalQuesMultipleChoice = false;
    public int packageId { get; set; }
    public int packageTypeId { get; set; }
    public int ClassId { get; set; }
    public int SubjectId { get; set; }
    public int Homeroom_Teacher { get; set; }
    public int TeacherId1 { get; set; } = 0;
    public int TeacherId2 { get; set; } = 0;
    public int CheckType { get; set; }
    public int time { get; set; } = 0;
    public int IsCheck { get; set; } = 0;
    private bool isEditing = false;
    private bool isEssay = false;
    private bool IsUpdateExamModalOpen = false;
    private string Search;

    List<PackageInactive> packageInactive =new List<PackageInactive>();
    List<PackageInactive> filterInactive => string.IsNullOrWhiteSpace(Search) ? 
    packageInactive : packageInactive.Where(o => o.ClassName.Contains(Search, StringComparison.OrdinalIgnoreCase) || 
                                                 o.SubjectName.Contains(Search, StringComparison.OrdinalIgnoreCase) ||
                                                 o.Name.Contains(Search, StringComparison.OrdinalIgnoreCase) ||
                                                 o.PackageTypeName.Contains(Search, StringComparison.OrdinalIgnoreCase) ||
                                                 o.Code.ToString().Contains(Search, StringComparison.OrdinalIgnoreCase)).ToList();
    PackageTestADO packageTestADO = new PackageTestADO
        {
            Exam_Room = new Exam_Room(),
            Exam_Room_Package = new Exam_Room_Package(),
            Package = new Data_Base.Models.P.Package(),
            lstExamRoomTeacher = new List<Exam_Room_Teacher>(),
            lstTeacherId = new List<int>()
        };

    V_Package updatePackageTestADO = new V_Package();

    QuestionAdo questionAnswers = new QuestionAdo
        {
            question = new Question()
        };
    Question question = new Question();
    SubjectViewModel subjectViewModel = new SubjectViewModel();
    TeacherViewModel currteacher = new TeacherViewModel();
    List<PackageTypeViewModel> packageTypeViewModels = new List<PackageTypeViewModel>();      
    List<ClassViewModel> classViewModels = new List<ClassViewModel>();
    List<PointTypeViewModel> pointTypeViewModels = new List<PointTypeViewModel>();
    List<ExamsViewModel> examsViewModels = new List<ExamsViewModel>();
    List<RoomViewModel> roomViewModels = new List<RoomViewModel>();
    List<TeacherViewModel> teacherViewModels = new List<TeacherViewModel>();
    List<QuestionlevelViewModel> questionlevelViewModel = new List<QuestionlevelViewModel>();
    List<QuestionTypeViewModel> questionTypeViewModels = new List<QuestionTypeViewModel>();
    List<HistDTO> histDTOs = new List<HistDTO>();
    List<AnsAdo> lstAns = new List<AnsAdo>();
    AnsAdo ans = new AnsAdo();
    Teacher _currentTeacher = new Teacher();
    public DateTime Create_Time = DateTime.Now;
    private string CreateTimeFormatted => Create_Time.ToString("dd/MM/yyyy HH:mm:ss");
    long timeLong;
    public DateTime Start_Time { get; set; } = DateTime.Now;
    public DateTime Start_Times
    {
        get => Start_Time;
        set
        {
            Start_Time = value;
            CheckDuration();
        }
    }
    public DateTime End_Time { get; set; } = DateTime.Now.AddMinutes(15);
    public DateTime End_Times
    {
        get => End_Time;
        set
        {
            End_Time = value;
            CheckDuration();
        }
    }

    public int CountQuestion { get; set; }
    public string PackageName = null;
    private AnsAdo selectedAnswer;
    private List<ListQuesAns> lstQues = new List<ListQuesAns>();
    private ListQuesAns lstQuesAns = new ListQuesAns();
    public List<int> selectedQuestionIds = new List<int>();
    private string validationMessage = "";
    private int iduser;

    void CancelEdit()
    {
        isEssay = false;
        isEditing = false;
        lstQuesAns = null;
        validationMessage = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await PackageType();
        //await Subject();
        await Classes();
        await PointType();
        await Exam();
        await Room();
        await PackageInactive();
        await TeacherViewModel();
        //await QuestionTypeViewModels();
        await QuestionlevelViewModel();
        _currentTeacher = await TeacherGivesQuestion();
    }

    public void OnExamChanged(ChangeEventArgs e)
    {
        try
        {
            var selectedValue = e.Value?.ToString();
            if (!string.IsNullOrEmpty(selectedValue))
            {
                packageTestADO.Exam_Room.Exam_Id = int.Parse(selectedValue);


                subjectViewModel = PTERP.GetSubjectOfExam(this.SubjectId);

                if (subjectViewModel != null)
                {
                    packageTestADO.Package.Subject_Id = subjectViewModel.Subject_Id;
                }
            }
            else
            {
                // Nếu chọn lại option mặc định "-- Chọn gói Exam --"
                this.SubjectId = 0;
                packageTestADO.Exam_Room.Exam_Id = 0;
                packageTestADO.Package.Subject_Id = 0;
                subjectViewModel = null;
            }

        }
        catch (Exception ex)
        {

        }
    }

    public async Task<Teacher> TeacherGivesQuestion()
    {
        try
        {
            Teacher T = new Teacher();
            var resuilt = await SessionStorage.GetAsync<string>("Id");
            if (resuilt.Success && !string.IsNullOrEmpty(resuilt.Value))
            {
                iduser = int.Parse(resuilt.Value);

                T = await pm.TeacherGives(iduser) ?? null;
            }

            return T;
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
            return null;
        }
    }

    // public async Task OnClassChanged(ChangeEventArgs e)
    // {
    //     try
    //     {
    //         var selectedValue = e.Value?.ToString();
    //         if (!string.IsNullOrEmpty(selectedValue))
    //         {
    //             packageTestADO.Package.Class_Id = int.Parse(selectedValue);

    //             currteacher = await pm.GetTeacherOfClass(this.Homeroom_Teacher);

    //             if (currteacher != null)
    //             {
    //                 packageTestADO.lstTeacherId.Add(currteacher.Teacher_Id);
    //             }
    //         }
    //         else
    //         {
    //             this.Homeroom_Teacher = 0;
    //             currteacher = null;
    //         }

    //     }
    //     catch (Exception ex)
    //     {
    //         toastService.ShowError("Lỗi: " + ex);
    //     }
    // }

    protected override void OnInitialized()
    {
        try
        {
            SelectedQuestionTypeId = questionAnswers.question.Question_Type_Id;
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }

    }

    public void AddAns()
    {
        try
        {
            int answerCount = 0;
            switch (this.CheckType)
            {
                case 1:
                    answerCount = 2;
                    break;
                case 2:
                    answerCount = 4;
                    break;
                case 3:
                    answerCount = 4;
                    break;
                default:
                    answerCount = 0;
                    break;
            }

            lstAns.Clear();
            for (int i = 0; i < answerCount; i++)
            {
                lstAns.Add(new AnsAdo());
            }

            // selectedAnswer = lstAns.FirstOrDefault();
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private void AddAnswer()
    {
        lstAns.Add(new AnsAdo());
    }

    private void RemoveAnswer(AnsAdo answer)
    {
        lstAns.Remove(answer);
    }

    public async Task SaveListQuestions(List<int> quesId)
    {
        try
        {
            if (quesId != null && quesId.Count > 0 && this.packageId > 0)
            {
                if (IsAddExamModalQuesMultipleChoice)
                {
                    IsCheck = 2;
                }
                else if (IsAddExamModalQuesEssay)
                {
                    IsCheck = 1;
                }
                else
                {
                    toastService.ShowError("Trương trình lỗi");
                    return;
                }
                bool checkLstQue = await pm.CreateListQuestionTL(quesId, this.packageId, this.IsCheck);

                if (!checkLstQue)
                {
                    toastService.ShowError("Thêm câu hỏi thất bại");
                    return;
                }
                else
                {
                    toastService.ShowSuccess("Thêm câu thành công");
                }
            }

            this.selectedQuestionIds.Clear();
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private int selectedQuestionTypeId;

    public int SelectedQuestionTypeId
    {
        get => selectedQuestionTypeId;
        set
        {
            if (selectedQuestionTypeId != value)
            {
                selectedQuestionTypeId = value;
                questionAnswers.question.Question_Type_Id = value; // đồng bộ lại model
                CheckquestionType(value);
                AddAns();
            }
        }
    }

    private void OnPointTypeChanged(ChangeEventArgs e)
    {
        try
        {
            if (int.TryParse(e.Value?.ToString(), out int selectedPointTypeId))
            {
                packageTestADO.Package.Point_Type_Id = selectedPointTypeId;

                if (selectedPointTypeId == 1 || selectedPointTypeId == 2)
                {
                    packageTestADO.Package.ExecutionTime = 900;
                    this.time = 900;

                    TimeSpan duration = End_Time - Start_Time;
                    if (duration.TotalSeconds < this.time)
                    {
                        toastService.ShowWarning($"Thời gian nhập không đúng! Thời gian phải tối thiểu {time / 60} phút ({time} giây)");
                        return;
                    }
                }
                else if (selectedPointTypeId == 3)
                {
                    packageTestADO.Package.ExecutionTime = 2700;
                    this.time = 2700;
                    TimeSpan duration = End_Time - Start_Time;
                    if (duration.TotalSeconds < this.time)
                    {
                        toastService.ShowWarning($"Thời gian nhập không đúng! Thời gian phải tối thiểu {time / 60} phút ({time} giây)");
                        return;
                    }
                }
                else if (selectedPointTypeId == 4 || selectedPointTypeId == 5)
                {
                    packageTestADO.Package.ExecutionTime = 5400;
                    this.time = 5400;
                    TimeSpan duration = End_Time - Start_Time;
                    if (duration.TotalSeconds != this.time)
                    {
                        toastService.ShowWarning($"Thời gian nhập không đúng! Thời gian phải tối thiểu {time / 60} phút ({time} giây)");
                        return;
                    }
                }
                else
                {
                    this.time = 0;
                }
            }
            else
            {
                packageTestADO.Package.Point_Type_Id = 0;
                time = 0;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    private void CheckDuration()
    {
        int seconds = (int)(End_Time - Start_Time).TotalSeconds;

        if (time > 0 && seconds != time)
        {
            toastService.ShowWarning($"Thời gian nhập không đúng! Phải đúng {time / 60} phút ({time} giây)");
            return;
        }

    }

    private async Task OnQuestionTypeChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        if (int.TryParse(value, out int questionTypeId))
        {
            CheckquestionType(questionTypeId);
        }
    }

    private void CheckquestionType(int questioTypeId)
    {
        try
        {
            this.CheckType = questioTypeId;
        }
        catch (Exception ex)
        {
            toastService.ShowWarning("Không tìm loại câu hỏi");
        }
    }

    private void CloseModal()
    {

        this.selectedQuestionIds.Clear();
        this.IsAddExamModalOpen = false;
        this.IsAddExamModalQuesEssay = false;
        this.IsAddExamModalQuesMultipleChoice = false;
        this.IsUpdateExamModalOpen = false;
        this.IsListQuestyon = false;
    }

    private void OpenAddExamModal()
    {
        IsAddExamModalOpen = true;
        StateHasChanged();
    }

    private void ToggleSelectedQues(int questionId)
    {
        if (selectedQuestionIds.Contains(questionId))
            selectedQuestionIds.Remove(questionId);
        else
            selectedQuestionIds.Add(questionId);
    }

    private bool IsAllQuestionsSelected(HistDTO hist)
    {
        return hist.Questions.All(q => selectedQuestionIds.Contains(q.QuestionId));
    }

    private void ToggleAllQuestions(HistDTO hist)
    {
        bool allSelected = IsAllQuestionsSelected(hist);

        foreach (var ques in hist.Questions)
        {
            if (allSelected)
            {
                selectedQuestionIds.Remove(ques.QuestionId); // Bỏ chọn hết
            }
            else
            {
                if (!selectedQuestionIds.Contains(ques.QuestionId))
                    selectedQuestionIds.Add(ques.QuestionId); // Thêm nếu chưa có
            }
        }
    }

    private async Task OpenAddExamModalQuesEssay(int packageId, int packageTypeId, int Classid, int SubjectId)
    {
        try
        {
            if (Classid == 0)
            {
                toastService.ShowWarning("Không xác định được lớp tham gia thi");
                return;
            }

            if (SubjectId == 0)
            {
                toastService.ShowWarning("Không xác định được môn thi");
                return;
            }
            if (packageId != null && packageTypeId != null)
            {
                this.packageId = packageId;
                if (packageTypeId == 1)
                {
                    this.packageTypeId = packageTypeId;
                    this.IsAddExamModalQuesEssay = true;
                    this.IsAddExamModalQuesMultipleChoice = false;
                }
                else if (packageTypeId == 2)
                {
                    this.packageTypeId = packageTypeId;
                    this.IsAddExamModalQuesEssay = false;
                    this.IsAddExamModalQuesMultipleChoice = true;
                }
            }
            else
            {
                if (packageId == null)
                {
                    toastService.ShowWarning("Không tìm thấy gói đề");
                    return;
                }
                if (packageTypeId == null)
                {
                    toastService.ShowWarning("Không tìm thấyloại bài thi");
                    return;
                }
            }
            questionTypeViewModels = await pm.GetQuestionType(packageTypeId);
            histDTOs = await pm.GetQuesTL(SubjectId, packageTypeId, Classid);
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    public async Task CreateQues()
    {
        try
        {
            bool Addquestion = false;
            questionAnswers.question.Package_Id = this.packageId;
            if (questionAnswers.question.Question_Name == null)
            {
                toastService.ShowSuccess("Không có nội dung câu hỏi!");
                return;
            }
            if (IsAddExamModalQuesMultipleChoice)
            {
                foreach (var item in lstAns)
                {
                    if (CheckType == 1 || CheckType == 2)
                    {
                        item.Right = (item == selectedAnswer);
                    }

                    if (item.Name.Trim() == null)
                    {
                        toastService.ShowSuccess($"Đáp án " + item + " chưa có nội dung");
                        return;
                    }
                }
                Addquestion = await pm.CreatequesTN(questionAnswers, lstAns);
            }
            else if (IsAddExamModalQuesEssay)
            {
                Addquestion = await pm.CreateQuestionTL(questionAnswers);
            }

            if (Addquestion == true)
            {
                toastService.ShowSuccess("Thêm dữ liệu thành công!");
                this.IsAddExamModalQuesEssay = false;
                return;
            }
            else
            {
                toastService.ShowError("Thêm thất bại");
                return;
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    public async Task QuestionlevelViewModel()
    {
        try
        {
            questionlevelViewModel = await pm.GetQuestionLevel();
        }
        catch (Exception ex)
        {
            questionlevelViewModel = new List<QuestionlevelViewModel>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    public async Task PackageInactive()
    {
        try
        {
            packageInactive = await pm.GetPackageInactive();
        }
        catch (Exception ex)
        {
            packageInactive = new List<PackageInactive>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    public async Task PackageType()
    {
        try
        {
            packageTypeViewModels = await PTERP.GetPackageType();
        }
        catch (Exception ex)
        {
            packageTypeViewModels = new List<PackageTypeViewModel>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    // public async Task Subject()
    // {
    //     try
    //     {
    //         subjectViewModel = await PTERP.GetSubjectOfExam();
    //     }
    //     catch (Exception ex)
    //     {
    //         subjectViewModel = new List<SubjectViewModel>();
    //         toastService.ShowError("Lỗi: " + ex.Message);
    //     }
    // }

    public async Task Classes()
    {
        try
        {
            classViewModels = await PTERP.GetClasses();
        }
        catch (Exception ex)
        {
            classViewModels = new List<ClassViewModel>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    public async Task TeacherViewModel()
    {
        try
        {
            teacherViewModels = await pm.GetTeacher();
        }
        catch (Exception ex)
        {
            packageInactive = new List<PackageInactive>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    public async Task PointType()
    {
        try
        {
            pointTypeViewModels = await PTERP.GetPointType();
        }
        catch (Exception ex)
        {
            pointTypeViewModels = new List<PointTypeViewModel>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    public async Task Exam()
    {
        try
        {
            examsViewModels = await PTERP.GetExam();
        }
        catch (Exception ex)
        {
            examsViewModels = new List<ExamsViewModel>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    public async Task Room()
    {
        try
        {
            roomViewModels = await PTERP.GetRoom();
        }
        catch (Exception ex)
        {
            roomViewModels = new List<RoomViewModel>();
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    private async Task Creta_P_ER_ERP()
    {
        try
        {
            if (Create_Time != null && Start_Time != null && End_Time != null 
                && ConvertLong.ConvertDateTimeToLong(Create_Time) < ConvertLong.ConvertDateTimeToLong(Start_Time) 
                && ConvertLong.ConvertDateTimeToLong(Start_Time) < ConvertLong.ConvertDateTimeToLong(End_Time))
            {
                packageTestADO.Package.Create_Time = ConvertLong.ConvertDateTimeToLong(Create_Time);
                packageTestADO.Exam_Room.Start_Time = ConvertLong.ConvertDateTimeToLong(Start_Time);
                packageTestADO.Exam_Room.End_Time = ConvertLong.ConvertDateTimeToLong(End_Time);
            }
            else
            {
                toastService.ShowError("Thời gian bắt đầu và kết thúc không hợp lệ");
                return;
            }

            if (PackageName.Trim() != null)
                packageTestADO.Package.Package_Name = PackageName;
            else
            {
                toastService.ShowError("Chưa nhập tên gói đề");
                return;
            }


            if (CountQuestion > 0)
            {
                packageTestADO.Package.Number_Of_Questions = CountQuestion;
            }
            else
            {
                toastService.ShowError("Chưa nhập số lượng câu hỏi cho bài thi");
                return;
            }

            if (TeacherId1 == null || TeacherId1 == 0 || TeacherId2 == null || TeacherId2 == 0)
            {
                toastService.ShowError("Chưa chọn giám thị");
                return;
            }
            else
            {
                packageTestADO.lstTeacherId.Add(TeacherId1);
                packageTestADO.lstTeacherId.Add(TeacherId2);
            }

            if(Homeroom_Teacher == null || Homeroom_Teacher == 0)
            {
                toastService.ShowError("Chưa chọn lớp tham ra thi");
                return;
            }

            var packageTestViewModel = await PTERP.AddPackageTestERP(packageTestADO);
            if (packageTestViewModel != null)
            {
                toastService.ShowSuccess("Thêm dữ liệu thành công!");
                IsAddExamModalOpen = false;
            }
            else
            {
                toastService.ShowError("Thêm thất bại");
            }
            await PackageInactive();
        }
        catch (Exception ex)
        {
            packageTestADO = new PackageTestADO();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    private async Task HandleFileSelectedessay(InputFileChangeEventArgs e)
    {
        try
        {
            System.Diagnostics.Debugger.Break();
            var file = e.File;
            if (file == null) return;

            var content = new MultipartFormDataContent();
            System.Diagnostics.Debugger.Break();
            var fileContent = new StreamContent(file.OpenReadStream(1024 * 1024 * 15)); // 15MB max
            System.Diagnostics.Debugger.Break();
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            System.Diagnostics.Debugger.Break();

            content.Add(fileContent, "file", file.Name);

            bool check = await pm.CreateExcelEssay(content, packageId);
            if (check)
                toastService.ShowSuccess("Thêm dữ liệu thành công!");
            else
                toastService.ShowError("Thêm thất bại");
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            System.Diagnostics.Debugger.Break();
            var file = e.File;
            if (file == null) return;

            var content = new MultipartFormDataContent();
            System.Diagnostics.Debugger.Break();
            var fileContent = new StreamContent(file.OpenReadStream(1024 * 1024 * 15)); // 15MB max
            System.Diagnostics.Debugger.Break();
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            System.Diagnostics.Debugger.Break();

            content.Add(fileContent, "file", file.Name);

            bool check = await pm.CreateExcel(content, packageId);
            if (check)
                toastService.ShowSuccess("Thêm dữ liệu thành công!");
            else
                toastService.ShowError("Thêm thất bại");
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private async Task GetLstQues(int packageId, int packageTypeId)
    {
        try
        {
            if (packageId <= 0 && packageTypeId <= 0)
            {
                toastService.ShowError("Không xác định được gói đề ");
                return;
            }
            IsListQuestyon = true;
            this.packageTypeId = packageTypeId;
            this.packageId = packageId;
            lstQues = await pm.GetQuestyonNew(packageId, packageTypeId);

            if (lstQues == null || lstQues.Count <=0)
            {
                toastService.ShowWarning("Gói đề chưa có câu hỏi");
                return;
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private async Task DeleteQues(int questionId, int? questionTypeId)
    {
        try
        {
            if (questionId <= 0)
            {
                toastService.ShowError("Không xác định được gói đề ");
                return;
            }

            bool check = await pm.DeleteQuestion(questionId, questionTypeId);

            if (check)
            {
                // Xoá câu hỏi khỏi danh sách hiển thị tạm thời
                var quesToRemove = lstQues.FirstOrDefault(q => q.QuestionId == questionId);
                if (quesToRemove != null)
                {
                    lstQues.Remove(quesToRemove);
                }

                toastService.ShowSuccess("Xóa thành công");

                // Gọi lại danh sách (nếu muốn đảm bảo dữ liệu mới nhất từ server)
                await GetLstQues(packageId, packageTypeId);
            }
            else
            {
                toastService.ShowError("Xóa thất bại");
                return;
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private void StartEditQuestion(ListQuesAns question)
    {
        try
        {
            if (packageTypeId == 2)
            {
                lstQuesAns = new ListQuesAns
                    {
                        QuestionId = question.QuestionId,
                        QuestionName = question.QuestionName,
                        QuestionTypeId = question.QuestionTypeId,
                        PackageId = question.PackageId,
                        MaximumScore = question.MaximumScore,
                        Leva = question.Leva,
                        Answers = question.Answers.Select(a => new Answer
                        {
                            AnswerId = a.AnswerId,
                            AnswersName = a.AnswersName,
                            Right_Answer = a.Right_Answer,
                            QuestionId = a.QuestionId
                        }).ToList()
                    };
                validationMessage = "";
                isEditing = true;
            }
            else if (packageTypeId == 1)
            {
                lstQuesAns = new ListQuesAns
                    {
                        QuestionId = question.QuestionId,
                        QuestionName = question.QuestionName,
                        QuestionTypeId = question.QuestionTypeId,
                        PackageId = question.PackageId,
                        MaximumScore = question.MaximumScore,
                        Leva = question.Leva,
                    };
                validationMessage = "";
                isEssay = true;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    private async Task SaveEditedQuestion()
    {
        try
        {
            // Validate trước khi lưu
            if (!ValidateAnswers())
            {
                return; // Không lưu nếu validation fail
            }

            bool check = await pm.UpdateQuestionAns(lstQuesAns, packageTypeId);
            if (check)
            {
                isEditing = false;
                lstQuesAns = null;
                validationMessage = "";
                toastService.ShowSuccess("Update thành công");
                await GetLstQues(packageId, packageTypeId);
            }
            else
            {
                toastService.ShowError("Update thất bại");
                return;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    private bool ValidateAnswers()
    {
        try
        {
            validationMessage = "";

            // Kiểm tra câu hỏi có nội dung
            if (string.IsNullOrWhiteSpace(lstQuesAns.QuestionName))
            {
                validationMessage = "Vui lòng nhập nội dung câu hỏi!";
                return false;
            }

            // Kiểm tra tất cả đáp án có nội dung
            if (packageTypeId == 2)
            {
                foreach (var answer in lstQuesAns.Answers)
                {
                    if (string.IsNullOrWhiteSpace(answer.AnswersName))
                    {
                        validationMessage = "Vui lòng nhập nội dung cho tất cả đáp án!";
                        return false;
                    }
                }

                var correctAnswersCount = lstQuesAns.Answers.Count(a => a.Right_Answer == 1);

                if (correctAnswersCount == 0)
                {
                    validationMessage = "Vui lòng chọn ít nhất 1 đáp án đúng!";
                    return false;
                }

                // Kiểm tra câu hỏi single choice chỉ có 1 đáp án đúng
                if ((lstQuesAns.QuestionTypeId == 1 || lstQuesAns.QuestionTypeId == 2) && correctAnswersCount > 1)
                {
                    validationMessage = "Câu hỏi trắc nghiệm chỉ được chọn 1 đáp án đúng!";
                    return false;
                }
            }

            return true;
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
            return false;
        }
    }

    private void UpdateAnswerName(int index, string value)
    {
        if (index >= 0 && index < lstQuesAns.Answers.Count)
        {
            lstQuesAns.Answers[index].AnswersName = value;
            validationMessage = ""; // Clear validation message
        }
    }

    private async Task StartEditPackage(int packageId)
    {
        try
        {
            if (packageId == null || packageId <= 0)
            {
                toastService.ShowError("Không tìm được gói đề");
                return;
            }

            updatePackageTestADO = await PTERP.FillPackage(packageId);
            if (updatePackageTestADO != null)
            {
                Start_Time = ConvertLong.ConvertLongToDateTime(updatePackageTestADO.Start_Time);
                End_Time = ConvertLong.ConvertLongToDateTime(updatePackageTestADO.End_Time);
                this.IsUpdateExamModalOpen = true;
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    private async Task UpdatePackage(V_Package packageAdo)
    {
        try
        {
            if (packageAdo == null)
            {
                toastService.ShowError("Không tìm được gói đề");
                return;
            }

            packageAdo.Start_Time = ConvertLong.ConvertDateTimeToLong(Start_Time);
            packageAdo.End_Time = ConvertLong.ConvertDateTimeToLong(End_Time);

            bool check = await PTERP.UpdatePackage(packageAdo);

            if (check)
            {
                IsUpdateExamModalOpen = false;
                await PackageInactive();
            }
            else
            {
                toastService.ShowError(PTERP.ErrorMes);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    private void SetCorrectAnswer(int index)
    {
        // Reset tất cả về 0
        for (int i = 0; i < lstQuesAns.Answers.Count; i++)
        {
            lstQuesAns.Answers[i].Right_Answer = 0;
        }
        // Set đáp án được chọn thành 1
        lstQuesAns.Answers[index].Right_Answer = 1;

        // Clear validation message khi user thực hiện action
        validationMessage = "";

        // Trigger re-render
        StateHasChanged();
    }

    private void ToggleCorrectAnswer(int index)
    {
        lstQuesAns.Answers[index].Right_Answer = lstQuesAns.Answers[index].Right_Answer == 1 ? 0 : 1;

        // Clear validation message khi user thực hiện action
        validationMessage = "";

        // Trigger re-render
        StateHasChanged();
    }
}

<style>
    .custom-table-wrapper {
        overflow-x: auto;
        white-space: nowrap;
    }

    .custom-table {
        table-layout: fixed;
        min-width: 1200px; /* hoặc lớn hơn tùy nội dung */
    }

        .custom-table th,
        .custom-table td {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

    /* Tuỳ chỉnh độ rộng từng cột */
    .col-stt {
        width: 60px;
    }

    .col-ma {
        width: 120px;
    }

    .col-ten {
        width: 200px;
    }

    .col-mon {
        width: 130px;
    }

    .col-lop {
        width: 130px;
    }

    .col-sobai {
        width: 90px;
    }

    .col-gvthi {
        width: 200px;
    }

    .col-gvcn {
        width: 200px;
    }

    .col-batdau,
    .col-ketthuc {
        width: 200px;
    }

    .col-trangthai {
        width: 100px;
    }

    .col-thaotac {
        width: 150px;
    }
</style>
