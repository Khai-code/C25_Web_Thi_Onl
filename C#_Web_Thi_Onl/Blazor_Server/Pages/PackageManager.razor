@page "/Package-Manager"
@using Blazor_Server.Services
@using Data_Base.GenericRepositories
@using Data_Base.Models.A
@using Data_Base.Models.E
@using Data_Base.Models.Q
@using Data_Base.Models.T
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.IdentityModel.Tokens.Jwt
@using static Blazor_Server.Services.ModelViewQuesEssayService
@using static Blazor_Server.Services.PackageManager
@using static Blazor_Server.Services.Package_Test_ERP
@inject NavigationManager Navigation
@inject Package_Test_ERP PTERP
@inject Blazor_Server.Services.PackageManager pm
@inject Notification notification
@layout TeacherLayout
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService toastService

<div class="container mt-3">
    <h2 class="mb-4">Quản lý Bài thi</h2>
    <!-- Bộ tìm kiếm + nút thêm bài thi -->
    <div class=" mb-3">
        <form class="w-100" style="max-width: 1200px;">
            <!-- Hàng 1: Tên bài thi và nút Tìm kiếm -->
            <div class="row">
                <div class="d-flex p-2">
                    <div class="p-2">
                        <button type="button" class="btn btn-primary w-200" disabled>Tìm kiếm</button>
                    </div>
                    <div class="p-2">
                        <input type="text" class="form-control" placeholder="Tìm kiếm" disabled>
                    </div>
                </div>

            </div>

            <!-- Hàng 2: Bộ lọc bên trái, nút thêm bài thi bên phải -->
            <div class="row align-items-end">
                <!-- Bộ lọc -->
                <div class="col-md-9">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <select class="form-control" @bind="packageTestADO.Package.Subject_Id">
                                <option value="">-- Chọn môn học --</option>
                                @foreach (var subj in subjectViewModel)
                                {
                                    <option value="@subj.Subject_Id">@subj.Subject_Name</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-3">
                            <select class="form-control" @bind="packageTestADO.Package.Class_Id">
                                <option value="">-- Chọn lớp --</option>
                                @foreach (var classes in classViewModels)
                                {
                                    <option value="@classes.Class_Id">@classes.Class_Name</option>
                                }
                            </select>
                        </div>

                        <div class="col-md-3">
                            @* <label for="startTime" class="block font-medium mb-1">Bắt đầu</label>@* @bind="Start_Time" *@
                            @* <input type="date" id="startTime" name="startTime" class="form-control" style="max-width: 200px;" required> *@
                        </div>
                        <div class="col-md-3">
                            @* <label for="endTime" class="block font-medium mb-1">Kết thúc</label>@* @bind="End_Time" *@
                            @* <input type="date" id="endTime" name="endTime" class="form-control" style="max-width: 200px;" required> *@
                        </div>
                    </div>
                </div>
                <div class="col-md-1"> </div>
                <!-- Nút thêm bài thi bên phải -->
                <div class="col-md-2 d-flex justify-content-end ">
                    <button type="button" class="btn btn-success w-150 justify-content-end" @onclick="OpenAddExamModal">
                        + Thêm bài thi
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- Danh sách bài thi -->
    <table class="table table-bordered shadow-sm table-hover">
        <thead class="table-light">
            <tr>
                <th>#</th>
                <th>Mã gói đề</th>
                <th>Tên gói đề</th>
                <th>Môn học</th>
                <th>Lớp</th>
                <th>Số lượng bài thi</th>
                <th>Giáo viên coi thi</th>
                <th>Giáo viên chủ nhiêu</th>
                <th>Thời gian bắt đầu</th>
                <th>Thời gian kết thúc</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var baiThi in packageInactive)
            {
                <tr>
                    <td>@baiThi.Id</td>
                    <td>@baiThi.Code</td>
                    <td>@baiThi.Name</td>
                    <td>@baiThi.SubjectName</td>
                    <td>@baiThi.ClassName</td>
                    <td>@baiThi.ClassNub</td>
                    <td>@baiThi.TeacherExamRoom</td>
                    <td>@baiThi.TeacherClass</td>
                    <td>@ConvertLong.ConvertLongToDateTime(baiThi.StartTime)</td>
                    <td>@ConvertLong.ConvertLongToDateTime(baiThi.EndTime)</td>
                    <td>
                        <button class="btn btn-secondary btn-sm me-1" @onclick="() => OpenAddExamModalQuesEssay(baiThi.Id, baiThi.PackageTypeId, baiThi.ClassId, baiThi.SubjectId)" title="Thêm câu hỏi">
                            <i class="bi bi-plus-circle"></i> Thêm câu hỏi
                        </button>
                        @* <button class="btn btn-danger btn-sm me-1" @onclick="() => XoaBaiThi(baiThi.Id)" title="Xóa">
                            <i class="bi bi-trash"></i> Xóa
                        </button>
                        <button class="btn btn-warning btn-sm" @onclick="() => SuaBaiThi(baiThi.Id)" title="Sửa">
                            <i class="bi bi-pencil"></i> Sửa
                        </button> *@
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal Thêm Bài Thi -->
    @if (IsAddExamModalOpen)
    {
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content relative">
                    <!-- Nút đóng modal -->
                    <button type="button" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-xl font-bold" @onclick="CloseModal">
                        ×
                    </button>

                    <!-- Nội dung chia 2 phần -->
                    <div class="bg-white shadow-lg rounded-xl p-6 w-full max-w-7xl mx-auto flex gap-6">
                        <!-- Form bên trái -->
                        <div class="w-2/3 space-y-4">
                            <h2 class="text-xl md:text-2xl font-bold mb-2 text-center text-green-600">Thêm Gói Đề Thi</h2>
                            <form class="space-y-4">
                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <label for="packageName" class="block font-medium mb-1">Tên Package</label>
                                        <input type="text" id="packageName" name="packageName" class="w-full border rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-400" @bind="PackageName">
                                    </div>

                                    <div>
                                        <label for="subject" class="block font-medium mb-1">Bài thi</label>
                                        <select id="subject" name="subject" class="w-full border rounded-lg px-3 py-2" @bind="packageTestADO.Package.Package_Type_Id">
                                            <option value="">-- Chọn bài thi --</option>
                                            @foreach (var pt in packageTypeViewModels)
                                            {
                                                <option value="@pt.Package_Type_Id">@pt.Package_Type_Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div>
                                    <label for="createTime" class="block font-medium mb-1">Thời gian tạo</label>
                                    <input type="text" class="w-full bg-gray-100 border rounded-lg px-3 py-2 text-gray-600" value="@CreateTimeFormatted" readonly>
                                </div>

                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <label for="startTime" class="block font-medium mb-1">Bắt đầu</label>
                                        <input type="datetime-local" id="startTime" name="startTime" required class="w-full border rounded-lg px-3 py-2" @bind="Start_Time" />
                                    </div>
                                    <div>
                                        <label for="endTime" class="block font-medium mb-1">Kết thúc</label>
                                        <input type="datetime-local" id="endTime" name="endTime" required class="w-full border rounded-lg px-3 py-2" @bind="End_Time">
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <label for="subject" class="block font-medium mb-1">Môn học</label>
                                        <select id="subject" name="subject" class="w-full border rounded-lg px-3 py-2" @bind="packageTestADO.Package.Subject_Id">
                                            <option value="">-- Chọn gói môn --</option>
                                            @foreach (var subj in subjectViewModel)
                                            {
                                                <option value="@subj.Subject_Id">@subj.Subject_Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div>
                                        <label for="class" class="block font-medium mb-1">Lớp</label>
                                        <select id="class" name="class" class="w-full border rounded-lg px-3 py-2" @bind="packageTestADO.Package.Class_Id">
                                            <option value="">-- Chọn gói lớp --</option>
                                            @foreach (var classes in classViewModels)
                                            {
                                                <option value="@classes.Class_Id">@classes.Class_Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <label for="pointType" class="block font-medium mb-1">Loại bài thi</label>
                                        <select id="pointType" name="pointType" class="w-full border rounded-lg px-3 py-2" @bind="packageTestADO.Package.Point_Type_Id">
                                            <option value="">-- Chọn gói loại --</option>
                                            @foreach (var point in pointTypeViewModels)
                                            {
                                                <option value="@point.PointType_Id">@point.PointType_Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div>
                                        <label for="room" class="block font-medium mb-1">Phòng thi</label>
                                        <select id="room" name="room" class="w-full border rounded-lg px-3 py-2" @bind="packageTestADO.Exam_Room.Room_Id">
                                            <option value="">-- Chọn gói phòng --</option>
                                            @foreach (var room in roomViewModels)
                                            {
                                                <option value="@room.Room_Id">@room.Room_Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                    <div>
                                        <label for="exam" class="block font-medium mb-1">Đề thi</label>
                                        <select id="exam" name="exam" class="w-full border rounded-lg px-3 py-2" @bind="packageTestADO.Exam_Room.Exam_Id">
                                            <option value="">-- Chọn gói Exam --</option>
                                            @foreach (var exam in examsViewModels)
                                            {
                                                <option value="@exam.Exams_Id">@exam.Exams_Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div>
                                        <label for="teacher" class="block font-medium mb-1">Giáo viên coi thi</label>
                                        <select id="teacher" name="teacher" class="w-full border rounded-lg px-3 py-2" @bind="packageTestADO.Exam_Room_Teacher.Teacher_Id">
                                            <option value="">-- Chọn giáo viên coi thi --</option>
                                            @foreach (var tea in teacherViewModels)
                                            {
                                                <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>

                                <button class="w-full bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-lg text-base font-semibold"
                                @onclick="Creta_P_ER_ERP" @onclick:preventDefault>
                                    thêm package
                                </button>
                            </form>
                        </div>

                        <!-- Danh sách câu hỏi bên phải -->
                        <div class="w-1/3 bg-gray-50 border border-gray-200 rounded-lg p-4 overflow-y-auto max-h-[700px]">
                            <h3 class="text-lg font-semibold text-green-600 mb-3 text-center">Danh sách câu hỏi</h3>
                            @* @if (questionListViewModels != null && questionListViewModels.Any())
                            {
                                <ul class="space-y-2">
                                    @foreach (var q in questionListViewModels)
                                    {
                                        <li class="bg-white p-3 rounded-lg shadow text-sm border border-gray-200">
                                            <span class="font-medium">Câu hỏi:</span> @q.Question_Text
                                        </li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="text-gray-500 text-sm text-center">Chưa có câu hỏi nào.</p>
                            } *@
                        </div>
                    </div>
                </div>
            </div>
        </div>

    }
</div>

<!--Model thêm câu hỏi tự luân  -->
@if (IsAddExamModalQuesEssay)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Thêm Câu Hỏi</h5>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <!-- Cột trái: Form nhập liệu -->
                        <div class="col-md-6 border-end pe-4 d-flex flex-column justify-content-between">
                            <div>
                                <form>
                                    <div class="mb-3">
                                        <label for="questionName" class="form-label">Nội dung câu hỏi</label>
                                        <textarea class="form-control" id="questionName" rows="5" placeholder="Nhập nội dung câu hỏi"
                                        @bind="questionAnswers.question.Question_Name"></textarea>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Loại câu hỏi</label>
                                        <select class="form-control" @bind="questionAnswers.question.Question_Type_Id">
                                            <option value="">-- Chọn Loại câu hỏi --</option>
                                            @foreach (var qt in questionTypeViewModels)
                                            {
                                                <option value="@qt.Question_Type_Id">@qt.Question_Type_Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Mức độ</label>
                                        <select class="form-control" @bind="questionAnswers.question.Question_Level_Id">
                                            <option value="">-- Chọn mức độ câu hỏi --</option>
                                            @foreach (var ql in questionlevelViewModel)
                                            {
                                                <option value="@ql.Question_Level_Id">@ql.Question_Level_Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Số điểm</label>
                                        <input class="form-control" type="text" placeholder="Số điểm cho câu hỏi"
                                        @bind="questionAnswers.question.Maximum_Score" />
                                    </div>
                                </form>
                            </div>

                            <!-- Footer riêng cho form bên trái -->
                            <div class="mt-3 text-end">
                                <button class="btn btn-success me-2" @onclick="CreateQues">
                                    <i class="bi bi-save"></i> Lưu
                                </button>
                                <button class="btn btn-secondary" @onclick="CloseModal">
                                    Hủy
                                </button>
                            </div>
                        </div>

                        <!-- Cột phải: Danh sách câu hỏi -->
                        <div class="col-md-6 ps-4 d-flex flex-column justify-content-between">
                            <div>
                                <h6>Danh sách câu hỏi có sẵn</h6>
                                <div style="max-height: 500px; overflow-y: auto;">
                                    @if (histDTOs != null && histDTOs.Any())
                                    {
                                        @foreach (var pkg in histDTOs)
                                        {
                                            <div class="mb-3">
                                                <strong class="text-secondary">@pkg.Package_Name</strong>
                                                <ul class="list-group">
                                                    @foreach (var ques in pkg.Questions)
                                                    {
                                                        <li class="list-group-item d-flex align-items-start">
                                                            <input class="form-check-input me-2 mt-1" type="checkbox"
                                                            @onchange="@(() => ToggleSelectedQues(ques.QuestionId))"
                                                            checked="@selectedQuestionIds.Contains(ques.QuestionId)" />
                                                            <div>
                                                                <div>@ques.QuestionName</div>
                                                                @if (ques.Answers != null && ques.Answers.Any())
                                                                {
                                                                    <ul class="ms-4 mt-1">
                                                                        @foreach (var ans in ques.Answers)
                                                                        {
                                                                            <li>- @ans.AnswersName</li>
                                                                        }
                                                                    </ul>
                                                                }
                                                            </div>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p>Không có dữ liệu câu hỏi.</p>
                                    }
                                </div>
                            </div>

                            <!-- Nút lưu riêng cho danh sách câu hỏi đã chọn -->
                            <div class="mt-3 text-end">
                                <button class="btn btn-primary" @onclick="() =>SaveListQuestions(selectedQuestionIds)">
                                    <i class="bi bi-save2"></i> Lưu các câu hỏi đã chọn
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if (IsAddExamModalQuesMultipleChoice)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Thêm Câu Hỏi</h5>
                </div>
                <div class="modal-body">
                    <!-- Nội dung form -->
                    <form>
                        <div class="mb-3">
                            <label for="questionName" class="form-label">Nội dung câu hỏi</label>
                            <input class="form-control" id="questionName" type="text" placeholder="Số điểm cho câu hỏi" @bind="questionAnswers.question.Question_Name" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Loại câu hỏi</label>
                            <select class="form-control" @bind="questionAnswers.question.Question_Type_Id">
                                <option value="">-- Chọn Loại câu hỏi --</option>
                                @foreach (var qt in questionTypeViewModels)
                                {
                                    <option value="@qt.Question_Type_Id">@qt.Question_Type_Name</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Mức độ</label>
                            <select class="form-control" @bind="questionAnswers.question.Question_Level_Id">
                                <option value="">-- Chọn mức độ câu hỏi --</option>
                                @foreach (var ql in questionlevelViewModel)
                                {
                                    <option value="@ql.Question_Level_Id">@ql.Question_Level_Name</option>
                                }
                            </select>
                        </div>

                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-success" >
                        <i class="bi bi-save"></i> Lưu
                    </button>
                    <button class="btn btn-secondary" @onclick="CloseModal">
                        Hủy
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool IsAddExamModalOpen = false;
    private bool IsAddExamModalQuesEssay = false;
    private bool IsAddExamModalQuesMultipleChoice = false;
    public int packageId { get; set; }
    public int packageTypeId { get; set; }
    public int ClassId { get; set; }
    public int SubjectId { get; set; }
    List<PackageInactive> packageInactive = new List<PackageInactive>();
    PackageTestADO packageTestADO = new PackageTestADO
        {
            Exam_Room = new Exam_Room(),
            Exam_Room_Package = new Exam_Room_Package(),
            Package = new Data_Base.Models.P.Package(),
            Exam_Room_Teacher = new Exam_Room_Teacher()
        };
    QuestionAnswers questionAnswers = new QuestionAnswers
        {
            question = new Question()
        };
    Question question = new Question();
    List<SubjectViewModel> subjectViewModel = new List<SubjectViewModel>();
    List<PackageTypeViewModel> packageTypeViewModels = new List<PackageTypeViewModel>();
    List<ClassViewModel> classViewModels = new List<ClassViewModel>();
    List<PointTypeViewModel> pointTypeViewModels = new List<PointTypeViewModel>();
    List<ExamsViewModel> examsViewModels = new List<ExamsViewModel>();
    List<RoomViewModel> roomViewModels = new List<RoomViewModel>();
    List<TeacherViewModel> teacherViewModels = new List<TeacherViewModel>();
    List<QuestionlevelViewModel> questionlevelViewModel = new List<QuestionlevelViewModel>();
    List<QuestionTypeViewModel> questionTypeViewModels = new List<QuestionTypeViewModel>();
    List<HistDTO> histDTOs = new List<HistDTO>();
    public DateTime Create_Time = DateTime.Now;
    private string CreateTimeFormatted => Create_Time.ToString("dd/MM/yyyy HH:mm:ss");

    public DateTime Start_Time = DateTime.Now;
    public DateTime End_Time = DateTime.Now;
    public string PackageName = null;

    public List<int> selectedQuestionIds = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        await PackageType();
        await Subject();
        await Classes();
        await PointType();
        await Exam();
        await Room();
        await PackageInactive();
        await TeacherViewModel();
        //await QuestionTypeViewModels();
        await QuestionlevelViewModel();
    }

    public async Task SaveListQuestions(List<int> quesId)
    {
        try
        {
            if (quesId != null && quesId.Count > 0 && this.packageId > 0)
            {
                var Addlstquestion = await pm.CreateListQuestionTL(quesId, this.packageId);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private void CloseModal()
    {
        IsAddExamModalOpen = false;
        IsAddExamModalQuesEssay = false;
        IsAddExamModalQuesMultipleChoice = false;
    }

    private void OpenAddExamModal()
    {
        IsAddExamModalOpen = true;
    }

    private void ToggleSelectedQues(int questionId)
    {
        if (selectedQuestionIds.Contains(questionId))
            selectedQuestionIds.Remove(questionId);
        else
            selectedQuestionIds.Add(questionId);
    }

    private bool IsAllQuestionsSelected(HistDTO hist)
    {
        return hist.Questions.All(q => selectedQuestionIds.Contains(q.QuestionId));
    }

    private void ToggleAllQuestions(HistDTO hist)
    {
        bool allSelected = IsAllQuestionsSelected(hist);

        foreach (var ques in hist.Questions)
        {
            if (allSelected)
            {
                selectedQuestionIds.Remove(ques.QuestionId); // Bỏ chọn hết
            }
            else
            {
                if (!selectedQuestionIds.Contains(ques.QuestionId))
                    selectedQuestionIds.Add(ques.QuestionId); // Thêm nếu chưa có
            }
        }
    }

    private async Task OpenAddExamModalQuesEssay(int packageId, int packageTypeId, int Classid, int SubjectId)
    {
        try
        {
            if (Classid == 0)
                toastService.ShowWarning("Không xác định được lớp tham gia thi");

            if (SubjectId == 0)
                toastService.ShowWarning("Không xác định được môn thi");
            if (packageId != null && packageTypeId != null)
            {
                this.packageId = packageId;
                if (packageTypeId == 1)
                {
                    this.packageTypeId = packageTypeId;
                    this.IsAddExamModalQuesEssay = true;
                    this.IsAddExamModalQuesMultipleChoice = false;
                }
                else if (packageTypeId == 2)
                {
                    this.packageTypeId = packageTypeId;
                    this.IsAddExamModalQuesEssay = false;
                    this.IsAddExamModalQuesMultipleChoice = true;
                }
            }
            else
            {
                if (packageId == null)
                {
                    toastService.ShowWarning("Không tìm thấy gói đề");  
                }
                if (packageTypeId == null)
                {
                    toastService.ShowWarning("Không tìm thấyloại bài thi");
                }
            }
            questionTypeViewModels = await pm.GetQuestionType(packageTypeId);
            histDTOs = await pm.GetQuesTL(SubjectId, packageTypeId, Classid);
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    public async Task CreateQues()
    {
        try
        {
            questionAnswers.question.Package_Id = this.packageTypeId;
            var Addquestion = await pm.CreateQuestionTL(questionAnswers);
            if (Addquestion == true)
            {
                toastService.ShowSuccess("Thêm dữ liệu thành công!");
                this.IsAddExamModalQuesEssay = false;
            }
            else
                toastService.ShowError("Thêm thất bại");
        }
        catch (Exception ex)
        {
            
        }
    }

    public async Task QuestionlevelViewModel()
    {
        try
        {
            questionlevelViewModel = await pm.GetQuestionLevel();
        }
        catch (Exception ex)
        {
            questionlevelViewModel = new List<QuestionlevelViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task QuestionTypeViewModels()
    {
        try
        {
            
        }
        catch (Exception ex)
        {
            questionTypeViewModels = new List<QuestionTypeViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task PackageInactive()
    {
        try
        {
            packageInactive = await pm.GetPackageInactive();
        }
        catch (Exception ex)
        {
            packageInactive = new List<PackageInactive>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task PackageType()
    {
        try
        {
            packageTypeViewModels = await PTERP.GetPackageType();
        }
        catch (Exception ex)
        {
            packageTypeViewModels = new List<PackageTypeViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task Subject()
    {
        try
        {
            subjectViewModel = await PTERP.GetSubject();
        }
        catch (Exception ex)
        {
            subjectViewModel = new List<SubjectViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task Classes()
    {
        try
        {
            classViewModels = await PTERP.GetClasses();
        }
        catch (Exception ex)
        {
            classViewModels = new List<ClassViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task TeacherViewModel()
    {
        try
        {
            teacherViewModels = await pm.GetTeacher();
        }
        catch (Exception ex)
        {
            packageInactive = new List<PackageInactive>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task PointType()
    {
        try
        {
            pointTypeViewModels = await PTERP.GetPointType();
        }
        catch (Exception ex)
        {
            pointTypeViewModels = new List<PointTypeViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task Exam()
    {
        try
        {
            examsViewModels = await PTERP.GetExam();
        }
        catch (Exception ex)
        {
            examsViewModels = new List<ExamsViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    public async Task Room()
    {
        try
        {
            roomViewModels = await PTERP.GetRoom();
        }
        catch (Exception ex)
        {
            roomViewModels = new List<RoomViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    private async Task Creta_P_ER_ERP()
    {
        try
        {
            if (Create_Time != null && Start_Time != null && End_Time != null 
                && ConvertLong.ConvertDateTimeToLong(Create_Time) < ConvertLong.ConvertDateTimeToLong(Start_Time) 
                && ConvertLong.ConvertDateTimeToLong(Start_Time) < ConvertLong.ConvertDateTimeToLong(End_Time))
            {
                packageTestADO.Package.Create_Time = ConvertLong.ConvertDateTimeToLong(Create_Time);
                packageTestADO.Exam_Room.Start_Time = ConvertLong.ConvertDateTimeToLong(Start_Time);
                packageTestADO.Exam_Room.End_Time = ConvertLong.ConvertDateTimeToLong(End_Time);
            }
            else
            {
                toastService.ShowError("Thời gian bắt đầu và kết thúc không hợp lệ");
            }
            if (PackageName.Trim() != null)
            {
                packageTestADO.Package.Package_Name = PackageName;
            }
            
            var packageTestViewModel = await PTERP.AddPackageTestERP(packageTestADO);
            if (packageTestViewModel != null)
            {
                toastService.ShowSuccess("Thêm dữ liệu thành công!");
                IsAddExamModalOpen = false;
            }
            else
            {
                toastService.ShowError("Thêm thất bại");
            }
        }
        catch (Exception ex)
        {
            packageTestADO = new PackageTestADO();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    
}
