@page "/classs"
@using Blazor_Server.Services
@using Data_Base.Models.C
@using Data_Base.Models.G
@using Data_Base.Models.S
@using Data_Base.Models.T
@using Data_Base.Models.U
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject ClassServices ClassService
@inject IJSRuntime JSRuntime
@inject HttpClient _client
@inject NavigationManager nav
@layout TeacherLayout 

<h3>Quản lý Lớp học</h3>

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (successMessage != null)
{
    <div class="alert alert-success">
        @successMessage
    </div>
}

<div class="container-fluid">
    <!-- Phần chọn khối và lớp -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Chọn khối và lớp</h5>
                    @if (selectedGrade != null)
                    {
                        <button class="btn btn-success btn-sm" @onclick="ShowAddClassModal">
                            <i class="bi bi-plus-circle"></i> Thêm lớp cho khối @selectedGrade.Grade_Name
                        </button>
                    }
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <label>Chọn khối:</label>
                            <select class="form-control" @onchange="OnGradeChange">
                                <option value="">-- Chọn khối --</option>
                                @if (grades != null)
                                {
                                    @foreach (var grade in grades)
                                    {
                                        <option value="@grade.ID" selected="@(selectedGrade?.ID == grade.ID)">
                                            @grade.Grade_Name
                                        </option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label>Chọn lớp:</label>
                            <select class="form-control" @onchange="OnClassChange">
                                <option value="">-- Chọn lớp --</option>
                                @if (filteredClasses != null)
                                {
                                    @foreach (var classItem in filteredClasses)
                                    {
                                        <option value="@classItem.Id" selected="@(selectedClass?.Id == classItem.Id)">
                                            @classItem.Class_Name
                                        </option>
                                    }
                                }
                            </select>
                            @if (selectedClass != null)
                            {
                                <button class="btn btn-danger btn-sm mt-2" @onclick="ConfirmDeleteClass">
                                    <i class="bi bi-trash"></i> Xoá lớp @selectedClass.Class_Name
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (selectedClass != null)
    {
        <div class="row">
            <!-- Danh sách học sinh -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Danh sách học sinh lớp @selectedClass.Class_Name</h5>
                        <button class="btn btn-primary btn-sm" @onclick="AddNewStudent">
                            <i class="bi bi-plus-circle"></i> Thêm học sinh
                        </button>
                    </div>
                    <div class="card-body">
                        @if (isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="list-group">
                                @if (classStudents != null && classStudents.Any())
                                {
                                    @foreach (var student in classStudents)
                                    {
                                        <div class="list-group-item @(selectedStudent?.Id == student.Id ? "active" : "")" @onclick="() => SelectStudent(student)" style="cursor:pointer;">
                                            <img src="@GetStudentAvatarPath(student)" class="avatar-img" alt="@student.Full_Name" />

                                            <div class="student-info">
                                                <h6>@student.Full_Name</h6>
                                                <div class="text-muted">
                                                    <div><i class="bi bi-person"></i> @student.User_Name</div>
                                                    @if (!string.IsNullOrWhiteSpace(student.Email))
                                                    {
                                                        <div><i class="bi bi-envelope"></i> @student.Email</div>
                                                    }
                                                    @if (!string.IsNullOrWhiteSpace(student.Phone_Number))
                                                    {
                                                        <div><i class="bi bi-telephone"></i> @student.Phone_Number</div>
                                                    }
                                                    @if (student.Data_Of_Birth > 0)
                                                    {
                                                        <div><i class="bi bi-calendar"></i> @ConvertLongToDateTime(student.Data_Of_Birth)?.ToString("dd/MM/yyyy")</div>
                                                    }
                                                    @if (!string.IsNullOrWhiteSpace(student.Address))
                                                    {
                                                        <div><i class="bi bi-geo-alt"></i> @student.Address</div>
                                                    }
                                                </div>
                                            </div>

                                            <div class="action-buttons">
                                                <button class="btn btn-outline-info btn-sm" title="Sửa" @onclick:stopPropagation="true" @onclick="() => EditStudent(student)">
                                                    <i class="bi bi-pencil-square"></i>
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm" title="Xoá" @onclick:stopPropagation="true" @onclick="() => ConfirmDeleteStudent(student)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="alert alert-info">
                                        Không có học sinh nào trong lớp này
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Bảng điểm của học sinh -->
            <div class="col-md-6">
                @if (selectedStudent != null)
                {
                    <div class="card">
                        <div class="card-header">
                            <h5>Bảng điểm của @selectedStudent.Full_Name</h5>
                        </div>
                        <div class="mb-3">
                            <label>Chọn kỳ học:</label>
                            <select class="form-control" @onchange="OnSummaryChange">
                                @foreach (var summary in summaries)
                                {
                                    <option value="@summary.Id" selected="@(summary.Id == selectedSummaryId)">
                                        @summary.Summary_Name
                                    </option>
                                }
                            </select>
                        </div>

                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Môn học</th>
                                            <th>Loại điểm</th>
                                            <th>Điểm</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (studentScores != null && studentScores.Any())
                                        {
                                            @foreach (var score in studentScores)
                                            {
                                                <tr>
                                                    <td>@(subjectDict.ContainsKey(score.Subject_Id) ? subjectDict[score.Subject_Id] : $"Môn {score.Subject_Id}")</td>
                                                    <td>@(pointTypeDict.ContainsKey(score.Point_Type_Id) ? pointTypeDict[score.Point_Type_Id] : $"Loại {score.Point_Type_Id}")</td>
                                                    <td>@score.Point</td>

                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="3" class="text-center">Không có điểm số nào</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card">
                        <div class="card-body text-center">
                            <div class="alert alert-info">
                                Vui lòng chọn học sinh để xem bảng điểm
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body text-center">
                        <div class="alert alert-info">
                            Vui lòng chọn khối và lớp để xem thông tin
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal thêm/sửa học sinh -->
    @if (showStudentModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditMode ? "Cập nhật thông tin học sinh" : "Thêm học sinh mới")</h5>
                        <button type="button" class="btn-close" @onclick="CloseStudentModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentStudent" OnValidSubmit="SaveStudent">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="row">
                                <!-- Phần upload ảnh đại diện -->
                                <div class="col-md-4 mb-3 text-center">
                                    <div class="mb-3">
                                        <img src="@previewImageUrl" class="rounded-circle border"
                                        style="width: 150px; height: 150px; object-fit: cover;" alt="Avatar" />
                                    </div>
                                    <div class="mb-3">
                                        <InputFile OnChange="HandleFileSelected" class="form-control" accept="image/*" />
                                        <small class="text-muted">Chọn ảnh đại diện (tối đa 2MB)</small>
                                    </div>
                                </div>

                                <!-- Thông tin cơ bản -->
                                <div class="col-md-8">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Họ tên <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentStudent.Full_Name" class="form-control" required />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Tài khoản <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentStudent.User_Name" class="form-control" required />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Mật khẩu <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentStudent.User_Pass" type="password" class="form-control" required />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Email</label>
                                            <InputText @bind-Value="currentStudent.Email" class="form-control" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Số điện thoại</label>
                                            <InputText @bind-Value="currentStudent.Phone_Number" class="form-control" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Ngày sinh <span class="text-danger">*</span></label>
                                            <InputDate @bind-Value="birthDate"
                                            class="form-control"
                                            format="yyyy-MM-dd"
                                            max="@MaxBirthDate.ToString("yyyy-MM-dd")"
                                            min="@MinBirthDate.ToString("yyyy-MM-dd")" />
                                            <ValidationMessage For="@(() => birthDate)" />
                                            @if (birthDate > MaxBirthDate)
                                            {
                                                <span class="text-danger">Ngày sinh không thể ở tương lai</span>
                                            }
                                            @if (birthDate < MinBirthDate)
                                            {
                                                <span class="text-danger">Ngày sinh không hợp lệ</span>
                                            }

                                        </div>
                                        <div class="col-md-12 mb-3">
                                            <label class="form-label">Địa chỉ</label>
                                            <InputText @bind-Value="currentStudent.Address" class="form-control" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseStudentModal">Hủy</button>
                                <button type="submit" class="btn btn-primary">
                                    @(isEditMode ? "Cập nhật" : "Thêm mới")
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal xác nhận xóa -->
    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Xác nhận xóa</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Bạn có chắc chắn muốn xóa học sinh <strong>@studentToDelete?.Full_Name</strong>?</p>
                        <p class="text-danger">Hành động này không thể hoàn tác!</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Hủy</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteStudent">Xóa</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- MODAL THÊM LỚP -->
    @if (showAddClassModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Thêm lớp mới cho khối @selectedGrade.Grade_Name</h5>
                        <button type="button" class="btn-close" @onclick="CloseAddClassModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@model" OnValidSubmit="CreateNewClass">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label class="form-label">Tên lớp</label>
                                <InputText @bind-Value="model.ClassName" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Giáo viên chủ nhiệm</label>
                                <select class="form-control" @bind="model.TeacherId" required>
                                    <option value="">-- Chọn giáo viên --</option>
                                    @foreach (var teacher in teacherDisplayList)
                                    {
                                        <option value="@teacher.TeacherId">@teacher.DisplayName</option>
                                    }
                                </select>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseAddClassModal">Hủy</button>
                                <button type="submit" class="btn btn-primary">Thêm lớp</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- MODAL XÁC NHẬN XOÁ LỚP -->
    @if (showDeleteClassConfirm)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Xác nhận xoá lớp</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteClassConfirm = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Bạn có chắc chắn muốn xoá lớp <strong>@selectedClass.Class_Name</strong>?</p>
                        <p class="text-danger">Tất cả học sinh và dữ liệu liên quan sẽ bị mất.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="() => showDeleteClassConfirm = false">Huỷ</button>
                        <button class="btn btn-danger" @onclick="DeleteClass">Xoá</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Class> classes;
    private List<Class> filteredClasses;
    private List<User> classStudents;
    private List<Score> studentScores;
    private List<Grade> grades;
    private Class selectedClass;
    private User selectedStudent;
    private Grade selectedGrade;
    private bool isLoading = true;
    private string errorMessage;
    private string successMessage;
    private List<Summary> summaries = new();
    private int selectedSummaryId = 0;
    public ClassWithTeacherModel model = new ClassWithTeacherModel();

    // Thêm các biến để xử lý quản lý học sinh
    private User currentStudent = new User();
    private User studentToDelete;
    private bool showStudentModal = false;
    private bool showDeleteConfirmation = false;
    private Class newClass = new Class();
    private List<Teacher> teachers = new();
    private List<User> users = new();
    private List<(int TeacherId, string DisplayName)> teacherDisplayList = new();
    private bool showAddClassModal = false;
    private bool showDeleteClassConfirm = false;
    private bool isEditMode = false;
    private IBrowserFile selectedFile;
    private string previewImageUrl = "/image/avatars/default-avatar.png";
    private DateTime MinBirthDate = new DateTime(1900, 1, 1);
    private DateTime MaxBirthDate = DateTime.Today;
    private DateTime? birthDate = null;
    private Dictionary<int, string> subjectDict = new();
    private Dictionary<int, string> pointTypeDict = new();


    private DateTime? ConvertLongToDateTime(long? dateLong)
    {
        if (!dateLong.HasValue || dateLong.Value < 19000101000000 || dateLong.Value > 20991231235959)
            return null;

        string dateStr = dateLong.Value.ToString().PadLeft(14, '0');
        try
        {
            string birthDate = dateLong.Value.ToString().PadLeft(14, '0'); // yyyyMMddHHmmss
            int year = int.Parse(dateStr.Substring(0, 4));
            int month = int.Parse(dateStr.Substring(4, 2));
            int day = int.Parse(dateStr.Substring(6, 2));

            return new DateTime(year, month, day);  
        }
        catch
        {
            return null;
        }
    }

    private long? ConvertDateTimeToLong(DateTime? dateTime)
    {
        if (!dateTime.HasValue) return null;

        try
        {
            return long.Parse(dateTime.Value.ToString("yyyyMMddHHmmss"));
        }
        catch
        {
            return null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadTeachers();
            await LoadGrades();
            await LoadClasses();
            teachers = await ClassService.GetAllTeachersAsync();
            summaries = await ClassService.GetAllSummaries();
            if (summaries.Any())
            {
                selectedSummaryId = summaries.First().Id;
            }

        }
        catch
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGrades()
    {
        try
        {
            grades = await ClassService.GetAllGrades();
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {grades?.Count ?? 0} grades");
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải danh sách khối: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.log", $"Error loading grades: {ex}");
        }
    }

    private async Task LoadClasses()
    {
        try
        {
            classes = await ClassService.GetAllClass();
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {classes?.Count ?? 0} classes");
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải danh sách lớp: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.log", $"Error loading classes: {ex}");
            throw;
        }
    }

    private async Task LoadTeachers()
    {
        try
        {
            teachers = await _client.GetFromJsonAsync<List<Teacher>>("api/Teacher/Get");
            users = await _client.GetFromJsonAsync<List<User>>("api/User/Get");

            // Ghép User vào Teacher
            teacherDisplayList = (from t in teachers
                                  join u in users on t.User_Id equals u.Id
                                  select (t.Id, $"{u.Full_Name} ({u.User_Name})"))
                                  .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] LoadTeachers: {ex.Message}");
        }
    }


    private void OnGradeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int gradeId))
        {
            selectedGrade = grades?.FirstOrDefault(g => g.ID == gradeId);
            selectedClass = null;
            selectedStudent = null;
            studentScores = null;
            FilterClasses();
        }
    }

    private void OnClassChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int classId))
        {
            selectedClass = classes?.FirstOrDefault(c => c.Id == classId);
            selectedStudent = null;
            studentScores = null;
            if (selectedClass != null)
            {
                _ = LoadClassStudents();
            }
        }
    }

    private async Task OnSummaryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            selectedSummaryId = id;
            if (selectedStudent != null)
            {
                await SelectStudent(selectedStudent); // Reload điểm theo kỳ
            }
        }
    }


    private void FilterClasses()
    {
        if (selectedGrade != null && classes != null)
        {
            filteredClasses = classes.Where(c => c.Grade_Id == selectedGrade.ID).ToList();
        }
        else
        {
            filteredClasses = new List<Class>();
        }
    }

    private void ShowAddClassModal()
    {
        if (selectedGrade == null)
        {
            errorMessage = "Vui lòng chọn khối trước khi thêm lớp.";
            return;
        }

        model = new ClassWithTeacherModel
            {
                GradeId = selectedGrade.ID,
                MaxStudent = 50
            };

        showAddClassModal = true;
    }

    private void CloseAddClassModal()
    {
        showAddClassModal = false;
    }

    private async Task CreateNewClass()
    {
        try
        {
            var success = await ClassService.CreateClassWithTeacherAsync(model);
            if (success)
            {
                successMessage = $"Đã tạo lớp {model.ClassName} thành công.";
                await LoadClasses();
                FilterClasses();
            }
            else
            {
                errorMessage = "Không thể tạo lớp. Vui lòng thử lại.";
            }

            showAddClassModal = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tạo lớp: {ex.Message}";
            showAddClassModal = false;
        }
    }

    private void ConfirmDeleteClass()
    {
        showDeleteClassConfirm = true;
    }

    private async Task DeleteClass()
    {
        var result = await ClassService.DeleteClassAsync(selectedClass.Id);
        if (result)
        {
            successMessage = $"Đã xoá lớp {selectedClass.Class_Name} thành công.";
            selectedClass = null;
            await LoadClasses();
            FilterClasses();
        }
        else
        {
            errorMessage = "Không thể xoá lớp. Vui lòng thử lại.";
        }

        showDeleteClassConfirm = false;
    }

    private async Task LoadClassStudents()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Lấy danh sách Student_Class
            var studentClasses = await ClassService.GetAllStudentClass();
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {studentClasses?.Count ?? 0} student classes");

            // Lọc ra các Student_Class thuộc lớp được chọn
            var classStudentIds = studentClasses
                .Where(sc => sc.Class_Id == selectedClass.Id)
                .Select(sc => sc.Student_Id)
                .ToList();

            // Lấy danh sách tất cả học sinh (User có Role_Id = 1)
            var allStudents = await ClassService.GetStudentsAsync();

            // Lấy danh sách Student để map Student_Id → User_Id
            var allStudentEntities = await _client.GetFromJsonAsync<List<Student>>("api/Student/Get");

            // Lấy danh sách User_Id của các Student thuộc class
            var userIdsInClass = allStudentEntities
                .Where(s => classStudentIds.Contains(s.Id)) // Lấy Student có Id thuộc Class
                .Select(s => s.User_Id)
                .ToList();

            // Cuối cùng, lọc User theo User_Id
            classStudents = allStudents
                .Where(u => userIdsInClass.Contains(u.Id))
                .ToList();

        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải danh sách học sinh: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.log", $"Error in LoadClassStudents: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectStudent(User student)
    {
        try
        {
            selectedStudent = student;

            // Lấy danh sách Student
            var students = await _client.GetFromJsonAsync<List<Student>>("api/Student/Get");
            var studentEntity = students?.FirstOrDefault(s => s.User_Id == student.Id);

            if (studentEntity == null)
            {
                errorMessage = "Không tìm thấy thông tin học sinh trong bảng Student.";
                studentScores = new List<Score>();
                return;
            }

            // Lấy danh sách điểm
            var allScores = await ClassService.GetAllScore();
            studentScores = allScores
                .Where(s => s.Student_Id == studentEntity.Id) 
                .ToList();
            subjectDict = await ClassService.GetSubjectDictionary();
            pointTypeDict = await ClassService.GetPointTypeDictionary();
            var allPointTypes = await ClassService.GetAllPointTypes();
            var currentSummary = summaries.FirstOrDefault(s => s.Id == selectedSummaryId);

            if (currentSummary != null && allPointTypes != null)
            {
                var filteredPointTypeIds = allPointTypes
                    .Where(pt => pt.Summary_Id == currentSummary.Id)
                    .Select(pt => pt.Id)
                    .ToList();

                studentScores = studentScores
                    .Where(s => filteredPointTypeIds.Contains(s.Point_Type_Id))
                    .ToList();
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải bảng điểm: {ex.Message}";
        }
    }


    // Phương thức để lấy đường dẫn ảnh đại diện của học sinh
    private string GetStudentAvatarPath(User student)
    {
        return ClassService.GetUserAvatarPath(student);
    }

    // Các phương thức xử lý quản lý học sinh
    private void AddNewStudent()
    {
        currentStudent = new User
            {
                Role_Id = 1,
                Status = 1,
                Data_Of_Birth = ConvertDateTimeToLong(DateTime.Today) ?? 0,
                Create_Time = ConvertDateTimeToLong(DateTime.Now) ?? 0,
                Last_Mordification_Time = ConvertDateTimeToLong(DateTime.Now) ?? 0
            };

        birthDate = DateTime.Today;
        previewImageUrl = "/image/avatars/default-avatar.png";
        selectedFile = null;
        isEditMode = false;
        showStudentModal = true;
    }

    private void EditStudent(User student)
    {
        try
        {
            // Gán dữ liệu hiện tại vào form sửa
            currentStudent = new User
                {
                    Id = student.Id,
                    Full_Name = student.Full_Name,
                    User_Name = student.User_Name,
                    User_Pass = student.User_Pass,
                    Email = student.Email,
                    Address = student.Address,
                    Phone_Number = student.Phone_Number,
                    Data_Of_Birth = student.Data_Of_Birth,
                    Create_Time = student.Create_Time,
                    Last_Mordification_Time = student.Last_Mordification_Time,
                    Avatar = student.Avatar,
                    Status = student.Status,
                    Role_Id = student.Role_Id
                };

            birthDate = ConvertLongToDateTime(student.Data_Of_Birth);

            previewImageUrl = string.IsNullOrWhiteSpace(student.Avatar)
                ? "/image/avatars/default-avatar.png"
                : student.Avatar.StartsWith("/") ? student.Avatar : $"/{student.Avatar}";


            selectedFile = null;
            isEditMode = true;
            showStudentModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải thông tin học sinh: {ex.Message}";
            showStudentModal = false;
        }
    }


    private void ConfirmDeleteStudent(User student)
    {
        studentToDelete = student;
        showDeleteConfirmation = true;
    }

    private async Task DeleteStudent()
    {
        try
        {
            var result = await ClassService.DeleteStudent(studentToDelete.Id);
            if (result)
            {
                successMessage = $"Đã xóa học sinh {studentToDelete.Full_Name} thành công.";
                // Nếu đang chọn học sinh bị xoá, clear selection
                if (selectedStudent?.Id == studentToDelete.Id)
                {
                    selectedStudent = null;
                    studentScores = null;
                }
                await LoadClassStudents();
            }
            else
            {
                errorMessage = "Không thể xóa học sinh. Vui lòng thử lại sau.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi xóa học sinh: {ex.Message}";
        }
        finally
        {
            showDeleteConfirmation = false;
            StateHasChanged();
        }
    }

    private async Task SaveStudent()
    {
        try
        {
            errorMessage = null;
            successMessage = null;

            if (string.IsNullOrWhiteSpace(currentStudent.Full_Name) ||
                string.IsNullOrWhiteSpace(currentStudent.User_Name) ||
                string.IsNullOrWhiteSpace(currentStudent.User_Pass))
            {
                errorMessage = "Vui lòng nhập đầy đủ thông tin bắt buộc.";
                return;
            }

            if (!birthDate.HasValue || birthDate.Value.Year < 1900)
            {
                errorMessage = "Ngày sinh không hợp lệ.";
                return;
            }

            currentStudent.Data_Of_Birth = ConvertDateTimeToLong(birthDate.Value) ?? 0;
            currentStudent.Last_Mordification_Time = ConvertDateTimeToLong(DateTime.Now) ?? 0;
            currentStudent.Role_Id = 1;
            currentStudent.Status = 1;

            bool success = false;

            if (isEditMode)
            {
                // ✅ Gọi hàm cập nhật
                success = await ClassService.UpdateStudent(currentStudent.Id, currentStudent, selectedFile);
                if (success)
                {
                    successMessage = $"Đã cập nhật thông tin học sinh {currentStudent.Full_Name} thành công.";
                }
                else
                {
                    errorMessage = "Không thể cập nhật học sinh.";
                    return;
                }
            }
            else
            {
                // ✅ Gọi hàm tạo mới
                var studentId = await ClassService.CreateStuent(currentStudent, selectedFile);
                if (studentId == null)
                {
                    errorMessage = "Không thể tạo học sinh mới.";
                    return;
                }

                if (selectedClass != null)
                {
                    success = await ClassService.AddStudentToClass(studentId.Value, selectedClass.Id);
                    if (!success)
                    {
                        errorMessage = "Không thể thêm học sinh vào lớp.";
                        return;
                    }

                    successMessage = $"Đã thêm học sinh {currentStudent.Full_Name} vào lớp {selectedClass.Class_Name} thành công!";
                }
                else
                {
                    successMessage = $"Đã thêm học sinh {currentStudent.Full_Name} thành công!";
                }
            }

            await LoadClassStudents(); // Load lại danh sách
            showStudentModal = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi lưu học sinh: {ex.Message}";
        }
    }



    private void CloseStudentModal()
    {
        showStudentModal = false;
        errorMessage = null;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        // Validate file size and type
        if (selectedFile != null)
        {
            if (selectedFile.Size > 2 * 1024 * 1024) // 2MB
            {
                errorMessage = "Kích thước file quá lớn. Vui lòng chọn file có kích thước nhỏ hơn 2MB.";
                return;
            }

            if (!selectedFile.ContentType.StartsWith("image/"))
            {
                errorMessage = "Vui lòng chọn file ảnh (jpg, png, etc).";
                return;
            }

            // Preview the image
            var imageFormat = "image/png";
            var resizedImage = await selectedFile.RequestImageFileAsync(imageFormat, 300, 300);
            var buffer = new byte[resizedImage.Size];

            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageBase64 = Convert.ToBase64String(buffer);
            previewImageUrl = $"data:{imageFormat};base64,{imageBase64}";
        }
    }

    private async Task<List<Score>> GetStudentScores(int studentId)
    {
        try
        {
            var allScores = await ClassService.GetAllScore();
            return allScores?
                .Where(s => s.Student_Id == studentId)
                .ToList() ?? new List<Score>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting scores: {ex.Message}");
            return new List<Score>();
        }
    }
} 