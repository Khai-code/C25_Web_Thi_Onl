    @page "/classs"
    @using Blazor_Server.Services
    @using Data_Base.Models.C
    @using Data_Base.Models.G
    @using Data_Base.Models.S
    @using Data_Base.Models.T
    @using Data_Base.Models.U
    @using System.Net.Http.Json
    @using Microsoft.AspNetCore.Components.Forms
    @inject ClassServices ClassService
    @inject IJSRuntime JSRuntime
    @inject HttpClient _client
    @inject NavigationManager nav
    @inject Learning_SummaryService summaryService
    @inject IJSRuntime jsRuntime
    @layout TeacherLayout
    @inject Blazored.Toast.Services.IToastService toastService


<div class="container-fluid">
    <!-- Phần chọn khối và lớp -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="d-flex align-items-end flex-wrap gap-3">

                <!-- Chọn khối -->
                <div style="min-width: 100px;">
                    <select class="form-control" @onchange="OnGradeChange">
                        <option value="">-- Chọn khối --</option>
                        @if (grades != null)
                        {
                            @foreach (var grade in grades)
                            {
                                <option value="@grade.ID" selected="@(selectedGrade?.ID == grade.ID)">
                                     @grade.Grade_Name
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Chọn lớp -->
                <div style="min-width: 100px;">
                    <select class="form-control" @onchange="OnClassChange">
                        <option value="">-- Chọn lớp --</option>
                        @if (filteredClasses != null)
                        {
                            @foreach (var classItem in filteredClasses)
                            {
                                <option value="@classItem.Id" selected="@(selectedClass?.Id == classItem.Id)">
                                    @classItem.Class_Name
                                </option>
                            }
                        }
                    </select>
                </div>

                <!-- Nút Thêm lớp -->
                @if (selectedGrade != null)
                {
                    <div>
                        <button class="btn btn-success btn-sm" @onclick="ShowAddClassModal">
                            <i class="bi bi-plus-circle"></i> Thêm lớp
                        </button>
                    </div>
                }

                <!-- Tìm kiếm -->
                <div class="d-flex align-items-center gap-2 ms-auto" style="min-width: 350px;">
                    <input type="text" class="form-control form-control-sm" placeholder="Tìm tên lớp hoặc giáo viên"
                    @bind="searchTerm" @bind:event="oninput" />
                    <button class="btn btn-primary btn-sm d-flex align-items-center gap-1"
                    @onclick="SearchClass" style="min-width: 100px;">
                        <i class="bi bi-search"></i> <span>Tìm kiếm</span>
                    </button>
                </div>

            </div>
        </div>
    </div>


    @if (selectedClass != null)
    {
        <div class="row mb-3">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Thông tin lớp học</h5>
                        <div class="text-muted mb-2">
                            <div>Lớp: <strong>@selectedClass.Class_Name</strong></div>
                            <div>Giáo viên chủ nhiệm: <strong>@classTeacherName</strong></div>
                            <div>Số học sinh: <strong>@(selectedClass?.Number ?? 0)</strong></div>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary btn-sm" @onclick="AddNewStudent">
                                <i class="bi bi-plus-circle"></i> Thêm học sinh
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="ConfirmDeleteClass">
                                <i class="bi bi-trash"></i> Xoá lớp
                            </button>
                            <button class="btn btn-info btn-sm" @onclick="OpenSummaryModal">
                                <i class="bi bi-journal-text"></i> Xem bảng điểm tổng kết
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="@(selectedStudent != null ? "col-md-2" : "col-md-12")">
                <div class="card student-list-panel @(selectedStudent != null ? "minimized" : "")">
                    <div class="card-header @(selectedStudent != null ? "d-none" : "")">
                        <h5>Danh sách học sinh</h5>
                    </div>

                    <div class="card-body">
                        <div class="list-group">
                            @if (classStudents != null && classStudents.Any())
                            {
                                @foreach (var student in classStudents)
                                {
                                    <div class="list-group-item @(selectedStudent?.Id == student.Id ? "active" : "")" style="cursor: pointer;">
                                        <!-- Avatar luôn hiện -->
                                        <div class="student-avatar text-center">
                                            <img src="@GetStudentAvatarPath(student)" class="avatar-img" alt="@student.Full_Name" />
                                        </div>

                                        <!-- Phần thông tin chỉ hiện khi chưa chọn học sinh -->
                                        @if (selectedStudent == null)
                                        {
                                            <div class="student-info">
                                                <h6>@student.Full_Name</h6>
                                                <div class="text-muted">
                                                    <div><i class="bi bi-person"></i> @student.User_Name</div>
                                                    @if (!string.IsNullOrWhiteSpace(student.Email))
                                                    {
                                                        <div><i class="bi bi-envelope"></i> @student.Email</div>
                                                    }
                                                    @if (!string.IsNullOrWhiteSpace(student.Phone_Number))
                                                    {
                                                        <div><i class="bi bi-telephone"></i> @student.Phone_Number</div>
                                                    }
                                                    @if (student.Data_Of_Birth > 0)
                                                    {
                                                        <div><i class="bi bi-calendar"></i> @ConvertLongToDateTime(student.Data_Of_Birth)?.ToString("dd/MM/yyyy")</div>
                                                    }
                                                    @if (!string.IsNullOrWhiteSpace(student.Address))
                                                    {
                                                        <div><i class="bi bi-geo-alt"></i> @student.Address</div>
                                                    }
                                                </div>
                                            </div>

                                            <div class="action-buttons mt-1">
                                                <button class="btn btn-outline-info btn-sm" title="Sửa" @onclick:stopPropagation="true" @onclick="() => EditStudent(student)">
                                                    <i class="bi bi-pencil-square"></i>
                                                </button>
                                                <button class="btn btn-outline-danger btn-sm" title="Xoá" @onclick:stopPropagation="true" @onclick="() => ConfirmDeleteStudent(student)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                                <button class="btn btn-outline-primary btn-sm" title="Xem bảng điểm" @onclick:stopPropagation="true" @onclick="() => ShowStudentSummary(student)">
                                                    <i class="bi bi-clipboard-data"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }

                            }
                            else
                            {
                                <div class="alert alert-info">Không có học sinh nào trong lớp này</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-10">
                <!-- Bảng điểm -->
                @if (selectedStudent != null && learningSummaryList.Any())
                {
                    <div class="col-md-8">
                        <div class="card score-summary-card fade-in">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">📊 Tổng kết của học sinh: @selectedStudent.Full_Name</h5>
                                <button class="btn btn-sm btn-outline-danger" @onclick="CloseStudentSummary">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(currentSummaryName))
                                {
                                    <p class="text-muted mt-2">
                                        <i class="bi bi-calendar-event"></i> Kỳ hiện tại: <strong>@currentSummaryName</strong>
                                    </p>
                                }
                                @if (isAnnualSummary)
                                {
                                    <button class="btn btn-outline-secondary mt-3" @onclick="OpenStudentDetailScoreModal">
                                        <i class="bi bi-list-ul"></i> Xem chi tiết điểm
                                    </button>
                                }

                                <table class="table table-bordered table-hover table-striped score-table">
                                    <thead>
                                        <tr>
                                            <th class="text-center">Môn học</th>
                                            <th class="text-center">Điểm tổng kết</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var subject in summarySubjects)
                                        {
                                            <tr>
                                                <td class="text-center">@subject</td>
                                                <td class="text-center">
                                                    @learningSummaryList.First().SubjectScores.GetValueOrDefault(subject).ToString("0.00")
                                                </td>
                                            </tr>
                                        }
                                        <tr class="table-info">
                                            <td class="text-center"><strong>Tổng kết kỳ</strong></td>
                                            <td class="text-center"><strong>@learningSummaryList.First().Term_Summary.ToString("0.00")</strong></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>


    }
    else
    {
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body text-center">
                        <div class="alert alert-info">
                            Vui lòng chọn khối và lớp để xem thông tin
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (showStudentScoreMessageBox)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Thông báo</h5>
                        <button type="button" class="btn-close" @onclick="CloseScoreMessageBox"></button>
                    </div>
                    <div class="modal-body">
                        <p>Học sinh <strong>@selectedStudent?.Full_Name</strong> hiện chưa có bảng điểm tổng kết cho kỳ này.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" @onclick="CloseScoreMessageBox">Đóng</button>
                    </div>
                </div>
            </div>
        </div>
    }


    <!-- Modal thêm/sửa học sinh -->
    @if (showStudentModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditMode ? "Cập nhật thông tin học sinh" : "Thêm học sinh mới")</h5>
                        <div class="d-flex gap-2 modal-buttons">
                            <!-- Tải Excel lên -->
                            <label class="btn btn-outline-primary btn-xs">
                                <i class="bi bi-file-earmark-excel"></i> Tải Excel lên
                                <InputFile OnChange="HandleFileSelectedExcel" class="d-none" accept=".xlsx,.xls" />
                            </label>
                            <!-- Tải file mẫu -->
                            <a href="files/Book1.xlsm" download>
                                <button class="btn btn-outline-secondary btn-xs">
                                    <i class="bi bi-file-earmark"></i> Tải file mẫu
                                </button>
                            </a>
                        </div>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentStudent" OnValidSubmit="SaveStudent">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <!-- Phần upload ảnh đại diện -->
                                <div class="col-md-4 mb-3 text-center">
                                    <div class="mb-3">
                                        <img src="@previewImageUrl" class="rounded-circle border"
                                        style="width: 150px; height: 150px; object-fit: cover;" alt="Avatar" />
                                    </div>
                                    <div class="mb-3">
                                        <InputFile OnChange="HandleFileSelected" class="form-control" accept="image/*" />
                                        <small class="text-muted">Chọn ảnh đại diện (tối đa 2MB)</small>
                                    </div>
                                </div>

                                <!-- Thông tin cơ bản -->
                                <div class="col-md-8">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Họ tên <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentStudent.Full_Name" 
                                            oninvalid="this.setCustomValidity('Vui lòng nhập họ tên')"
                                            oninput="this.setCustomValidity('')" class="form-control" required />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Tài khoản <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentStudent.User_Name" class="form-control" required
                                            oninvalid="this.setCustomValidity('Vui lòng nhập tài khoản')"
                                            oninput="this.setCustomValidity('')" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Mật khẩu <span class="text-danger">*</span></label>
                                            <InputText @bind-Value="currentStudent.User_Pass" type="password" class="form-control" required
                                            oninvalid="this.setCustomValidity('Vui lòng nhập mật khẩu')"
                                            oninput="this.setCustomValidity('')" />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label for="email" class="form-label">Email</label>
                                            <InputText type="email" @bind-Value="currentStudent.Email" id="email" class="form-control" required
                                            oninvalid="this.setCustomValidity('Vui lòng nhập email hợp lệ')"
                                            oninput="this.setCustomValidity('')"  />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Số điện thoại</label>
                                            <InputText class="form-control" id="Phone"
                                            @bind-Value="currentStudent.Phone_Number"
                                            inputmode="numeric"
                                            pattern="0[0-9]{9}"
                                            required
                                            oninvalid="this.setCustomValidity('Vui lòng nhập số điện thoại hợp lệ, bắt đầu bằng 0 và đủ 10 chữ số')"
                                            oninput="this.setCustomValidity(''); this.value=this.value.replace(/[^0-9]/g,'');" />

                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Ngày sinh <span class="text-danger">*</span></label>
                                            <InputDate @bind-Value="birthDate"
                                            class="form-control"
                                            format="yyyy-MM-dd"
                                            max="@MaxBirthDate.ToString("yyyy-MM-dd")"
                                            min="@MinBirthDate.ToString("yyyy-MM-dd")"
                                            oninvalid="this.setCustomValidity('Vui lòng chọn ngày sinh')"
                                            oninput="this.setCustomValidity('')" />
                                            <ValidationMessage For="@(() => birthDate)" required />
                                            @if (birthDate > MaxBirthDate)
                                            {
                                                <span class="text-danger">Ngày sinh không thể ở tương lai</span>
                                            }
                                            @if (birthDate < MinBirthDate)
                                            {
                                                <span class="text-danger">Ngày sinh không hợp lệ</span>
                                            }

                                        </div>
                                        <div class="col-md-12 mb-3">
                                            <label class="form-label">Địa chỉ</label>
                                            <InputText @bind-Value="currentStudent.Address" class="form-control"
                                            oninvalid="this.setCustomValidity('Vui lòng nhập địa chỉ')"
                                            oninput="this.setCustomValidity('')" required />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseStudentModal">Hủy</button>
                                <button type="submit" class="btn btn-primary">
                                    @(isEditMode ? "Cập nhật" : "Thêm mới")
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Modal xác nhận xóa -->
    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Xác nhận xóa</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteConfirmation = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Bạn có chắc chắn muốn xóa học sinh <strong>@studentToDelete?.Full_Name</strong>?</p>
                        <p class="text-danger">Hành động này không thể hoàn tác!</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation = false">Hủy</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteStudent">Xóa</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- MODAL THÊM LỚP -->
    @if (showAddClassModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Thêm lớp mới cho khối @selectedGrade.Grade_Name</h5>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@model" OnValidSubmit="CreateNewClass">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label class="form-label">Tên lớp</label>
                                <InputText @bind-Value="model.ClassName"
                                class="form-control"
                                required
                                pattern="[1-9][A-Za-z]"
                                oninvalid="this.setCustomValidity('Vui lòng nhập tên lớp hợp lệ, ví dụ: 6A')"
                                oninput="this.setCustomValidity('')" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Giáo viên chủ nhiệm</label>
                                <select class="form-control" @bind="model.TeacherId" required
                                oninvalid="this.setCustomValidity('Vui lòng chọn giáo viên chủ nhiệm')"
                                oninput="this.setCustomValidity('')">
                                    <option value="">-- Chọn giáo viên --</option>
                                    @foreach (var teacher in teacherDisplayList)
                                    {
                                        <option value="@teacher.TeacherId">@teacher.DisplayName</option>
                                    }
                                </select>

                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseAddClassModal">Hủy</button>
                                <button type="submit" class="btn btn-primary">Thêm lớp</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- MODAL XÁC NHẬN XOÁ LỚP -->
    @if (showDeleteClassConfirm)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Xác nhận xoá lớp</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteClassConfirm = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Bạn có chắc chắn muốn xoá lớp <strong>@selectedClass.Class_Name</strong>?</p>
                        <p class="text-danger">Tất cả học sinh và dữ liệu liên quan sẽ bị mất.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="() => showDeleteClassConfirm = false">Huỷ</button>
                        <button class="btn btn-danger" @onclick="DeleteClass">Xoá</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
<div class="modal fade" id="summaryModal" tabindex="-1" aria-labelledby="summaryModalLabel" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-fullscreen-md-down">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="summaryModalLabel">📊 Tổng kết học tập</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="summary-header mb-4">
                    <p><strong>Lớp:</strong> <span class="highlight-text">@classNameForSummary</span></p>
                    <p><strong>Kỳ hiện tại:</strong> <span class="highlight-text">@currentSummaryName</span></p>
                </div>
                <table class="table table-striped table-hover table-bordered custom-table">
                    <thead>
                        <tr>
                            <th class="text-center">STT</th>
                            <th>Học sinh</th>
                            @foreach (var subject in summarySubjects)
                            {
                                <th class="text-center">@subject</th>
                            }
                            <th class="text-center">Tổng Kết Kỳ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (learningSummaryList != null && learningSummaryList.Any())
                        {
                            @foreach (var (studentSummary, index) in pagedLearningSummaryList.Select((item, idx) => (item, idx)))
                            {
                                <tr>
                                    <td class="text-center">@((currentPage - 1) * pageSize + index + 1)</td>
                                    <td>@(studentSummary.Student_Name ?? "[Không rõ]")</td>
                                    @foreach (var subject in summarySubjects)
                                    {
                                        <td class="text-center">
                                            @(studentSummary.SubjectScores != null &&
                                                        studentSummary.SubjectScores.TryGetValue(subject, out var score)
                                                        ? score.ToString("0.00")
                                                        : "-")
                                        </td>
                                    }
                                    <td class="text-center">@studentSummary.Term_Summary.ToString("0.00")</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="100%" class="text-center no-data">Không có dữ liệu tổng kết.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="PreviousPage" disabled="@(currentPage <= 1)">Trang trước</button>
                <span>Trang @currentPage / @totalPages</span>
                <button type="button" class="btn btn-secondary" @onclick="NextPage" disabled="@(currentPage >= totalPages)">Trang sau</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@if (showStudentDetailModal)
{
    <div class="modal fade show" style="display:block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi tiết điểm của học sinh: @selectedStudent?.Full_Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseStudentDetailScoreModal"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex gap-3">
                        @foreach (var term in new[] { "Kỳ 1", "Kỳ 2" })
                        {
                            <div class="w-50">
                                <h6 class="text-primary mb-2">@term</h6>
                                <div class="overflow-auto shadow rounded border">
                                    <table class="table-bangdiem w-100">
                                        <thead>
                                            <tr>
                                                <th>Môn học</th>
                                                <th colspan="3">Miệng</th>
                                                <th colspan="3">15 phút</th>
                                                <th colspan="2">45 phút</th>
                                                <th>Giữa kỳ</th>
                                                <th>Cuối kỳ</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var group in splitTermScores.GetValueOrDefault(term, new()).GroupBy(x => x.SubjectName))
                                            {
                                                <tr>
                                                    <td class="fw-semibold">@group.Key</td>

                                                    @* Miệng *@
                                                    @for (int i = 0; i < 3; i++)
                                                    {
                                                        var p = group.Where(x => x.PointTypeName == "Attendance").ElementAtOrDefault(i)?.Point ?? 0;
                                                        <td class="@(p < 5 ? "score-low" : "score-good")">@p</td>
                                                    }

                                                    @* 15 phút *@
                                                    @for (int i = 0; i < 3; i++)
                                                    {
                                                        var p = group.Where(x => x.PointTypeName == "Point_15").ElementAtOrDefault(i)?.Point ?? 0;
                                                        <td class="@(p < 5 ? "score-low" : "score-good")">@p</td>
                                                    }

                                                    @* 45 phút *@
                                                    @for (int i = 0; i < 2; i++)
                                                    {
                                                        var p = group.Where(x => x.PointTypeName == "Point_45").ElementAtOrDefault(i)?.Point ?? 0;
                                                        <td class="@(p < 5 ? "score-low" : "score-good")">@p</td>
                                                    }

                                                    @* Giữa kỳ *@
                                                    @{
                                                        var mid = group.FirstOrDefault(x => x.PointTypeName == "Point_Midterm")?.Point ?? 0;
                                                    }
                                                    <td class="@(mid < 5 ? "score-low" : "score-good")">@mid</td>

                                                    @* Cuối kỳ *@
                                                    @{
                                                        var final = group.FirstOrDefault(x => x.PointTypeName == "Point_Final")?.Point ?? 0;
                                                    }
                                                    <td class="@(final < 5 ? "score-low" : "score-good")">@final</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseStudentDetailScoreModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<Class> classes;
    private List<Class> filteredClasses;
    private List<User> classStudents;
    private List<Score> studentScores;
    private List<Grade> grades;
    private Class selectedClass;
    private User selectedStudent;
    private Grade selectedGrade;
    private bool isLoading = true;
    private List<Summary> summaries = new();
    private int selectedSummaryId = 0;
    public ClassWithTeacherModel model = new ClassWithTeacherModel();

    // Thêm các biến để xử lý quản lý học sinh
    private User currentStudent = new User();
    private User studentToDelete;
    private bool showStudentModal = false;
    private bool showDeleteConfirmation = false;
    private Class newClass = new Class();
    private List<Teacher> teachers = new();
    private List<User> users = new();
    private List<(int TeacherId, string DisplayName)> teacherDisplayList = new();
    private bool showAddClassModal = false;
    private bool showDeleteClassConfirm = false;
    private bool isEditMode = false;
    private IBrowserFile selectedFile;
    private string previewImageUrl = "/image/avatars/default-avatar.png";
    private DateTime MinBirthDate = new DateTime(1900, 1, 1);
    private DateTime MaxBirthDate = DateTime.Today;
    private DateTime? birthDate = null;
    private Dictionary<int, string> subjectDict = new();
    private Dictionary<int, string> pointTypeDict = new();
    private string searchTerm = "";
    private string classTeacherName = "Chưa xác định";
    private List<Learning_SummaryView> learningSummaryList = new();
    private List<string> summarySubjects = new();
    private string currentSummaryName = "";
    private string classNameForSummary = "";
    private bool showStudentScoreMessageBox = false;
    private Dictionary<string, List<DetailedStudentScore>> splitTermScores = new();
    private bool showStudentDetailModal = false;
    private bool isAnnualSummary = false;

    private int currentPage = 1; // Trang hiện tại
    private int pageSize = 10;  // Số học sinh mỗi trang
    private int totalPages;     // Tổng số trang
    private List<Learning_SummaryView> pagedLearningSummaryList = new();

    private void UpdatePagedList()
    {
        if (learningSummaryList != null && learningSummaryList.Any())
        {
            totalPages = (int)Math.Ceiling(learningSummaryList.Count / (double)pageSize);
            pagedLearningSummaryList = learningSummaryList
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        else
        {
            totalPages = 0;
            pagedLearningSummaryList = new List<Learning_SummaryView>();
        }
        StateHasChanged(); // Cập nhật giao diện sau khi thay đổi dữ liệu
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedList();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedList();
        }
    }

    private DateTime? ConvertLongToDateTime(long? dateLong)
    {
        if (!dateLong.HasValue || dateLong.Value < 19000101000000 || dateLong.Value > 20991231235959)
            return null;

        string dateStr = dateLong.Value.ToString().PadLeft(14, '0');
        try
        {
            string birthDate = dateLong.Value.ToString().PadLeft(14, '0'); // yyyyMMddHHmmss
            int year = int.Parse(dateStr.Substring(0, 4));
            int month = int.Parse(dateStr.Substring(4, 2));
            int day = int.Parse(dateStr.Substring(6, 2));

            return new DateTime(year, month, day);
        }
        catch
        {
            return null;
        }
    }

    private long? ConvertDateTimeToLong(DateTime? dateTime)
    {
        if (!dateTime.HasValue) return null;

        try
        {
            return long.Parse(dateTime.Value.ToString("yyyyMMddHHmmss"));
        }
        catch
        {
            return null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadClasses();
            await LoadTeachers();
            await LoadGrades();
            teachers = await ClassService.GetAllTeachersAsync();
            summaries = await ClassService.GetAllSummaries();
            if (summaries.Any())
            {
                selectedSummaryId = summaries.First().Id;
            }

        }
        catch
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGrades()
    {
        try
        {
            grades = await ClassService.GetAllGrades();
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {grades?.Count ?? 0} grades");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi tải danh sách khối:ex.Message");
            await JSRuntime.InvokeVoidAsync("console.log", $"Error loading grades: {ex}");
        }
    }

    private async Task LoadClasses()
    {
        try
        {
            classes = await ClassService.GetAllClass();
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {classes?.Count ?? 0} classes");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi tải danh sách lớp: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.log", $"Error loading classes: {ex}");
            throw;
        }
    }

    private async Task LoadTeachers()
    {
        try
        {
            teacherDisplayList = await ClassService.GetAvailableTeachersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] LoadTeachers (Blazor): {ex.Message}");
            teacherDisplayList = new();
        }
    }



    private void OnGradeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int gradeId))
        {
            selectedGrade = grades?.FirstOrDefault(g => g.ID == gradeId);
            selectedClass = null;
            selectedStudent = null;
            studentScores = null;
            FilterClasses();
        }
    }

    private async void OnClassChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int classId))
        {
            selectedClass = classes?.FirstOrDefault(c => c.Id == classId);
            selectedStudent = null;
            studentScores = null;

            if (selectedClass != null)
            {
                await LoadClassStudents();
                await LoadClassTeacherName();
            }
        }
    }


    private async Task OnSummaryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            selectedSummaryId = id;
            if (selectedStudent != null)
            {
                await SelectStudent(selectedStudent); // Reload điểm theo kỳ
            }
        }
    }


    private void FilterClasses()
    {
        if (selectedGrade != null && classes != null)
        {
            filteredClasses = classes.Where(c => c.Grade_Id == selectedGrade.ID).ToList();
        }
        else
        {
            filteredClasses = new List<Class>();
        }
    }

    private void ShowAddClassModal()
    {
        if (selectedGrade == null)
        {
            toastService.ShowWarning("Vui lòng chọn khối trước khi thêm lớp.");
            return;
        }

        model = new ClassWithTeacherModel
            {
                GradeId = selectedGrade.ID,
                MaxStudent = 50,
                Number = 0
            };

        showAddClassModal = true;
    }

    private void CloseAddClassModal()
    {
        showAddClassModal = false;
    }

    private async Task LoadClassTeacherName()
    {
        if (selectedClass == null) return;

        try
        {
            if (teachers == null || teachers.Count == 0)
                teachers = await ClassService.GetAllTeachersAsync();

            if (users == null || users.Count == 0)
                users = await ClassService.GetAllUser();

            // Lấy thông tin giáo viên từ Teacher_Id
            var teacher = teachers?.FirstOrDefault(t => t.Id == selectedClass.Teacher_Id);

            if (teacher == null)
            {
                classTeacherName = "Chưa xác định";
                return;
            }

            // Lấy thông tin user tương ứng
            var user = users?.FirstOrDefault(u => u.Id == teacher.User_Id);
            classTeacherName = user?.Full_Name ?? "Chưa xác định";
        }
        catch
        {
            classTeacherName = "Chưa xác định";
        }
        finally
        {
            StateHasChanged();
        }
    }



    private async Task SearchClass()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            FilterClasses();

            // Nếu có lớp trong filteredClasses, chọn lớp đầu tiên để load danh sách học sinh
            if (filteredClasses.Any())
            {
                selectedClass = filteredClasses.First();
                await LoadClassStudents();
                LoadClassTeacherName();
            }
            else
            {
                selectedClass = null;
                classStudents = null;
                classTeacherName = "";
            }
        }
        else
        {
            if (selectedGrade == null)
            {
                filteredClasses = new List<Class>();
                selectedClass = null;
                classStudents = null;
                classTeacherName = "";
                return;
            }

            var classesInGrade = classes.Where(c => c.Grade_Id == selectedGrade.ID);
            var keyword = searchTerm.Trim().ToLower();

            var matchedTeachers = users
                .Where(u => u.Role_Id == 2 && u.Full_Name.ToLower().Contains(keyword))
                .Select(u => teachers.FirstOrDefault(t => t.User_Id == u.Id))
                .Where(t => t != null)
                .ToList();

            var matchedTeacherIds = matchedTeachers.Select(t => t.Id).ToList();

            filteredClasses = classesInGrade.Where(c =>
          c.Class_Name.ToLower().Contains(keyword) ||
          matchedTeacherIds.Contains(c.Teacher_Id)
            ).ToList();

            if (filteredClasses.Any())
            {
                selectedClass = filteredClasses.First();
                await LoadClassStudents();
                LoadClassTeacherName();
            }
            else
            {
                selectedClass = null;
                classStudents = null;
                classTeacherName = "";
            }
        }
    }



    private async Task CreateNewClass()
    {
        try
        {
            var success = await ClassService.CreateClassWithTeacherAsync(model);
            if (success)
            {
                toastService.ShowSuccess($"Đã tạo lớp {model.ClassName} thành công.");
                await LoadClasses();
                FilterClasses();
            }
            else
            {
                toastService.ShowError("Không thể tạo lớp. Vui lòng thử lại.");
            }

            showAddClassModal = false;
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi tạo lớp: {ex.Message}");
            showAddClassModal = false;
        }
    }

    private void ConfirmDeleteClass()
    {
        showDeleteClassConfirm = true;
    }

    private async Task DeleteClass()
    {
        var result = await ClassService.DeleteClassAsync(selectedClass.Id);
        if (result)
        {
            toastService.ShowSuccess($"Đã xoá lớp {selectedClass.Class_Name} thành công.");
            selectedClass = null;
            await LoadClasses();
            FilterClasses();
        }
        else
        {
            toastService.ShowError("Không thể xoá lớp. Vui lòng thử lại.");
        }

        showDeleteClassConfirm = false;
    }

    private async Task LoadClassStudents()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Lấy danh sách Student_Class
            var studentClasses = await ClassService.GetAllStudentClass();
            await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {studentClasses?.Count ?? 0} student classes");

            // Lọc ra các Student_Class thuộc lớp được chọn
            var classStudentIds = studentClasses
                .Where(sc => sc.Class_Id == selectedClass.Id)
                .Select(sc => sc.Student_Id)
                .ToList();

            // Lấy danh sách tất cả học sinh (User có Role_Id = 1)
            var allStudents = await ClassService.GetStudentsAsync();

            // Lấy danh sách Student để map Student_Id → User_Id
            var allStudentEntities = await _client.GetFromJsonAsync<List<Student>>("api/Student/Get");

            // Lấy danh sách User_Id của các Student thuộc class
            var userIdsInClass = allStudentEntities
                .Where(s => classStudentIds.Contains(s.Id)) // Lấy Student có Id thuộc Class
                .Select(s => s.User_Id)
                .ToList();

            // Cuối cùng, lọc User theo User_Id
            classStudents = allStudents
                .Where(u => userIdsInClass.Contains(u.Id))
                .ToList();

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi tải danh sách học sinh: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.log", $"Error in LoadClassStudents: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectStudent(User student)
    {
        try
        {
            selectedStudent = student;

            // Lấy danh sách Student
            var students = await _client.GetFromJsonAsync<List<Student>>("api/Student/Get");
            var studentEntity = students?.FirstOrDefault(s => s.User_Id == student.Id);

            if (studentEntity == null)
            {
                toastService.ShowError("Không tìm thấy thông tin học sinh trong bảng Student.");
                studentScores = new List<Score>();
                return;
            }

            // Lấy danh sách điểm
            var allScores = await ClassService.GetAllScore();
            studentScores = allScores
                .Where(s => s.Student_Id == studentEntity.Id)
                .ToList();
            subjectDict = await ClassService.GetSubjectDictionary();
            pointTypeDict = await ClassService.GetPointTypeDictionary();
            var allPointTypes = await ClassService.GetAllPointTypes();
            var currentSummary = summaries.FirstOrDefault(s => s.Id == selectedSummaryId);

            if (currentSummary != null && allPointTypes != null)
            {
                studentScores = studentScores
     .Where(s => s.Summary_Id == selectedSummaryId)
     .ToList();
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi tải bảng điểm: {ex.Message}");
        }
    }


    // Phương thức để lấy đường dẫn ảnh đại diện của học sinh
    private string GetStudentAvatarPath(User student)
    {
        return ClassService.GetUserAvatarPath(student);
    }

    // Các phương thức xử lý quản lý học sinh
    private void AddNewStudent()
    {
        currentStudent = new User
            {
                Role_Id = 1,
                Status = 1,
                Data_Of_Birth = ConvertDateTimeToLong(DateTime.Today) ?? 0,
                Create_Time = ConvertDateTimeToLong(DateTime.Now) ?? 0,
                Last_Mordification_Time = ConvertDateTimeToLong(DateTime.Now) ?? 0
            };

        birthDate = DateTime.Today;
        previewImageUrl = "/image/avatars/default-avatar.png";
        selectedFile = null;
        isEditMode = false;
        showStudentModal = true;
    }

    private void EditStudent(User student)
    {
        try
        {
            // Gán dữ liệu hiện tại vào form sửa
            currentStudent = new User
                {
                    Id = student.Id,
                    Full_Name = student.Full_Name,
                    User_Name = student.User_Name,
                    User_Pass = student.User_Pass,
                    Email = student.Email,
                    Address = student.Address,
                    Phone_Number = student.Phone_Number,
                    Data_Of_Birth = student.Data_Of_Birth,
                    Create_Time = student.Create_Time,
                    Last_Mordification_Time = student.Last_Mordification_Time,
                    Avatar = student.Avatar,
                    Status = student.Status,
                    Role_Id = student.Role_Id
                };

            birthDate = ConvertLongToDateTime(student.Data_Of_Birth);

            previewImageUrl = string.IsNullOrWhiteSpace(student.Avatar)
                ? "/image/avatars/default-avatar.png"
                : student.Avatar.StartsWith("/") ? student.Avatar : $"/{student.Avatar}";


            selectedFile = null;
            isEditMode = true;
            showStudentModal = true;
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi tải thông tin học sinh: {ex.Message}");
            showStudentModal = false;
        }
    }


    private void ConfirmDeleteStudent(User student)
    {
        studentToDelete = student;
        showDeleteConfirmation = true;
    }

    private async Task DeleteStudent()
    {
        try
        {
            var result = await ClassService.DeleteStudent(studentToDelete.Id);
            if (result)
            {
                toastService.ShowSuccess("Đã xóa dữ liệu học sinh thành công");
                // Nếu đang chọn học sinh bị xoá, clear selection
                if (selectedStudent?.Id == studentToDelete.Id)
                {
                    selectedStudent = null;
                    studentScores = null;
                }
                await LoadClassStudents();
            }
            else
            {
                toastService.ShowError("Không thể xóa dữ liệu học sinh");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi xóa học sinh: {ex.Message}");
        }
        finally
        {
            showDeleteConfirmation = false;
            StateHasChanged();
        }
    }

    private async Task<bool> CheckIfUserExists(string userName, string phoneNumber, string email, int? currentUserId = null)
    {
        try
        {
            // Lấy tất cả user
            var existingUser = await ClassService.GetAllUser();
            if (existingUser == null || !existingUser.Any())
                return false;

            // Kiểm tra trùng username (loại trừ chính nó nếu update)
            if (existingUser.Any(u =>
                u.User_Name.Equals(userName, StringComparison.OrdinalIgnoreCase) &&
                (currentUserId == null || u.Id != currentUserId)))
            {
                toastService.ShowWarning("Tài khoản đã tồn tại.");
                return true;
            }

            // Kiểm tra trùng số điện thoại
            if (existingUser.Any(u =>
                u.Phone_Number == phoneNumber &&
                (currentUserId == null || u.Id != currentUserId)))
            {
                toastService.ShowWarning("Số điện thoại đã tồn tại.");
                return true;
            }

            // Kiểm tra trùng email
            if (existingUser.Any(u =>
                u.Email == email &&
                (currentUserId == null || u.Id != currentUserId)))
            {
                toastService.ShowWarning("Email đã tồn tại.");
                return true;
            }

            return false; // Không trùng
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi kiểm tra trùng tài khoản: {ex.Message}");
            return true;
        }
    }


    private async Task SaveStudent()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(currentStudent.Full_Name) ||
                string.IsNullOrWhiteSpace(currentStudent.User_Name) ||
                string.IsNullOrWhiteSpace(currentStudent.User_Pass))
            {
                toastService.ShowWarning("Vui lòng nhập đầy đủ thông tin bắt buộc.");
                return;
            }

            if (!birthDate.HasValue || birthDate.Value.Year < 1900)
            {
                toastService.ShowWarning("Ngày sinh không hợp lệ.");
                return;
            }

           

            currentStudent.Data_Of_Birth = ConvertDateTimeToLong(birthDate.Value) ?? 0;
            currentStudent.Last_Mordification_Time = ConvertDateTimeToLong(DateTime.Now) ?? 0;
            currentStudent.Role_Id = 1;
            currentStudent.Status = 1;

            bool success = false;

            if (isEditMode)
            {
                if (await CheckIfUserExists(currentStudent.User_Name, currentStudent.Phone_Number, currentStudent.Email, currentStudent.Id))
                {
                    toastService.ShowError("Không thể cập nhật học sinh.");
                    return; // Có trùng với người khác -> dừng
                }

                // ✅ Gọi hàm cập nhật
                success = await ClassService.UpdateStudent(currentStudent.Id, currentStudent, selectedFile);
                if (success)
                {
                    toastService.ShowSuccess($"Đã cập nhật thông tin học sinh {currentStudent.Full_Name} thành công.");
                }
                else
                {
                    toastService.ShowError("Không thể cập nhật học sinh.");
                    return;
                }
            }
            else
            {
                bool isUserExist = await CheckIfUserExists(currentStudent.User_Name, currentStudent.Phone_Number, currentStudent.Email);
                if (isUserExist)
                {
                    return;
                }
                // ✅ Gọi hàm tạo mới
                var studentId = await ClassService.CreateStuent(currentStudent, selectedFile);
                if (studentId == null)
                {
                    toastService.ShowError( "Không thể tạo học sinh mới.");
                    return;
                }

                if (selectedClass != null)
                {
                    success = await ClassService.AddStudentToClass(studentId.Value, selectedClass.Id);
                    if (!success)
                    {
                        toastService.ShowError("Không thể thêm học sinh vào lớp.");
                        return;
                    }

                    toastService.ShowSuccess($"Đã thêm học sinh {currentStudent.Full_Name} vào lớp {selectedClass.Class_Name} thành công!");
                }
                else
                {
                    toastService.ShowError("Không thể thêm học sinh vào lớp.");
                }
            }
            showStudentModal = false;
            await LoadClasses();             // Reload toàn bộ danh sách lớp
            selectedClass = classes.FirstOrDefault(c => c.Id == selectedClass.Id);
            await LoadClassTeacherName();    // Cập nhật tên giáo viên
            await LoadClassStudents();       // Cập nhật danh sách học sinh
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi lưu học sinh: {ex.Message}");
        }
    }



    private void CloseStudentModal()
    {
        showStudentModal = false;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        // Validate file size and type
        if (selectedFile != null)
        {
            if (selectedFile.Size > 2 * 1024 * 1024) // 2MB
            {
                toastService.ShowWarning("Kích thước file quá lớn. Vui lòng chọn file có kích thước nhỏ hơn 2MB.");
                return;
            }

            if (!selectedFile.ContentType.StartsWith("image/"))
            {
                toastService.ShowWarning("Vui lòng chọn file ảnh (jpg, png, etc).");
                return;
            }

            // Preview the image
            var imageFormat = "image/png";
            var resizedImage = await selectedFile.RequestImageFileAsync(imageFormat, 300, 300);
            var buffer = new byte[resizedImage.Size];

            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageBase64 = Convert.ToBase64String(buffer);
            previewImageUrl = $"data:{imageFormat};base64,{imageBase64}";
        }
    }

    private async Task<List<Score>> GetStudentScores(int studentId)
    {
        try
        {
            var allScores = await ClassService.GetAllScore();
            return allScores?
                .Where(s => s.Student_Id == studentId)
                .ToList() ?? new List<Score>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting scores: {ex.Message}");
            return new List<Score>();
        }
    }
    private async Task OpenSummaryModal()
    {
        try
        {
            if (selectedClass == null)
            {
                toastService.ShowWarning("Vui lòng chọn lớp.");
                return;
            }

            var classId = selectedClass.Id;
            classNameForSummary = selectedClass.Class_Name;

            var currentSummary = await summaryService.GetCurrentSummary();
            var summaries = await summaryService.CalculateLearningSummaryOnly(classId);
            await summaryService.SaveCalculatedSummariesToDatabase(summaries);

            if (currentSummary != null)
            {
                // ✅ Có kỳ học hiện tại → lọc theo kỳ đó
                currentSummaryName = currentSummary.Summary_Name;

                summaries = summaries
                    .Where(s => s.Summary_ID == currentSummary.Id)
                    .ToList();

                if (summaries.Any())
                {
                    learningSummaryList = summaries
                        .GroupBy(s => s.StudentId)
                        .Select(g => new Learning_SummaryView
                            {
                                StudentId = g.Key,
                                Student_Name = g.First().Student_Name,
                                SubjectScores = g
                                            .GroupBy(x => x.Subject_Name)
                                            .ToDictionary(
                                                s => s.Key,
                                                s => s.Average(x => x.Point_Summary)
                                            ),
                                Summary_ID = g.First().Summary_ID,
                                Term_Summary = g
                                            .GroupBy(x => x.Subject_Name)
                                            .Select(x => x.Average(y => y.Point_Summary))
                                            .Average()
                            })
                        .OrderBy(x => x.Student_Name)
                        .ToList();

                    summarySubjects = learningSummaryList
                        .SelectMany(s => s.SubjectScores.Keys)
                        .Distinct()
                        .ToList();
                }
                else
                {
                    learningSummaryList.Clear();
                    summarySubjects.Clear();
                    currentSummaryName = currentSummary.Summary_Name + " (Không có dữ liệu)";
                }
            }
            else
            {
                var fullYear = await summaryService.GetAnnualAverageScores(classId);
                currentSummaryName = "Tổng kết cả năm";

                learningSummaryList = fullYear
                    .GroupBy(s => s.StudentId)
                    .Select(g => new Learning_SummaryView
                        {
                            StudentId = g.Key,
                            Student_Name = g.First().Student_Name,
                            SubjectScores = g.ToDictionary(
                                        s => s.Subject_Name,
                                        s => s.Point_Summary
                                    ),
                            Term_Summary = g.Average(s => s.Point_Summary)
                        })
                    .OrderBy(x => x.Student_Name)
                    .ToList();

                summarySubjects = learningSummaryList
                    .SelectMany(s => s.SubjectScores.Keys)
                    .Distinct()
                    .ToList();
            }

            currentPage = 1; // Đặt lại về trang đầu tiên
            UpdatePagedList();
            await jsRuntime.InvokeVoidAsync("bootstrapModal.show", "#summaryModal");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi hiển thị tổng kết: {ex.Message}");
        }
    }

    private async Task ShowStudentSummary(User student)
    {
        try
        {
            selectedStudent = student;

            var allStudents = await ClassService.GetAllStudent();
            var studentEntity = allStudents?.FirstOrDefault(s => s.User_Id == student.Id);

            if (studentEntity == null)
            {
                toastService.ShowWarning("Không tìm thấy học sinh.");
                return;
            }

            var summary = await summaryService.GetCurrentSummary();
            var classId = selectedClass?.Id ?? 0;

            if (summary != null)
            {
                isAnnualSummary = false;
                currentSummaryName = summary.Summary_Name;
                // ✅ Có kỳ hiện tại → hiển thị bảng điểm theo kỳ
                var summaries = await summaryService.CalculateLearningSummaryOnly(classId);

                var studentSummaries = summaries
                    .Where(s => s.StudentId == studentEntity.Id && s.Summary_ID == summary.Id)
                    .ToList();

                if (studentSummaries.Any())
                {
                    learningSummaryList = new List<Learning_SummaryView>
                    {
                        new Learning_SummaryView
                        {
                            StudentId = studentEntity.Id,
                            Student_Name = student.Full_Name,
                            SubjectScores = studentSummaries.ToDictionary(x => x.Subject_Name, x => x.Point_Summary),
                            Summary_ID = summary?.Id ?? 0,
                            Term_Summary = studentSummaries.Average(x => x.Point_Summary)
                        }
                    };

                    summarySubjects = learningSummaryList
                        .SelectMany(s => s.SubjectScores.Keys)
                        .Distinct()
                        .ToList();
                }
                else
                {
                    learningSummaryList.Clear();
                    summarySubjects.Clear();
                    showStudentScoreMessageBox = true;
                }

                UpdatePagedList();
            }
            else
            {
                isAnnualSummary = true;
                currentSummaryName = "Tổng kết cả năm";
                // ✅ Không có kỳ hiện tại → hiển thị tổng kết cả năm của học sinh đó
                var all = await summaryService.GetAnnualAverageScores(classId);

                var studentData = all.Where(x => x.StudentId == studentEntity.Id).ToList();

                if (studentData.Any())
                {
                    learningSummaryList = new List<Learning_SummaryView>
                    {
                        new Learning_SummaryView
                        {
                            StudentId = studentEntity.Id,
                            Student_Name = student.Full_Name,
                            SubjectScores = studentData.ToDictionary(x => x.Subject_Name, x => x.Point_Summary),
                            Summary_Name = "Tổng kết cả năm",
                            Term_Summary = studentData.Average(x => x.Point_Summary)
                        }
                    };

                    summarySubjects = learningSummaryList
                        .SelectMany(s => s.SubjectScores.Keys)
                        .Distinct()
                        .ToList();
                }
                else
                {
                    learningSummaryList.Clear();
                    summarySubjects.Clear();
                    showStudentScoreMessageBox = true;
                }
                UpdatePagedList();

            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi lấy bảng điểm học sinh: {ex.Message}");
        }
    }

    private async Task CloseStudentSummary()
    {
        selectedStudent = null;
        learningSummaryList.Clear();
        summarySubjects.Clear();

        await LoadClassStudents(); 
    }
    private async Task CloseScoreMessageBox()
    {
        showStudentScoreMessageBox = false;
        selectedStudent = null;
        learningSummaryList.Clear();
        summarySubjects.Clear();
        await LoadClassStudents();
    }

    private async Task OpenStudentDetailScoreModal()
    {
        if (selectedStudent == null) return;

        splitTermScores = await ClassService.GetStudentDetailedScoresByTermSplit(selectedStudent.Id);
        showStudentDetailModal = true;
    }


    private void CloseStudentDetailScoreModal()
    {
        showStudentDetailModal = false;
    }

    private async Task<bool> CheckIfExcelDataExists(List<User> students)
    {
        try
        {
            // Lấy tất cả user trong hệ thống
            var existingUsers = await ClassService.GetAllUser();

            foreach (var student in students)
            {
                // Kiểm tra trùng tài khoản
                if (existingUsers.Any(u => u.User_Name.Equals(student.User_Name, StringComparison.OrdinalIgnoreCase)))
                {
                    toastService.ShowWarning($"Tài khoản {student.User_Name} đã tồn tại.");
                    return true;
                }

                // Kiểm tra trùng số điện thoại
                if (existingUsers.Any(u => u.Phone_Number == student.Phone_Number))
                {
                    toastService.ShowWarning($"Số điện thoại {student.Phone_Number} đã tồn tại.");
                    return true;
                }

                // Kiểm tra trùng email
                if (existingUsers.Any(u => u.Email == student.Email))
                {
                    toastService.ShowWarning($"Email {student.Email} đã tồn tại.");
                    return true;
                }
            }

            return false; // Không có trùng lặp
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Lỗi khi kiểm tra dữ liệu Excel: {ex.Message}");
            return true;
        }
    }

    private async Task HandleFileSelectedExcel(InputFileChangeEventArgs e)
    {
        try
        {
            System.Diagnostics.Debugger.Break();
            var file = e.File;
            if (file == null) return;

            var content = new MultipartFormDataContent();
            System.Diagnostics.Debugger.Break();
            var fileContent = new StreamContent(file.OpenReadStream(1024 * 1024 * 15)); // 15MB max
            System.Diagnostics.Debugger.Break();
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            System.Diagnostics.Debugger.Break();

            content.Add(fileContent, "file", file.Name);

            var classIdToSend = selectedClass?.Id ?? 0;
            if (classIdToSend == 0)
            {
                toastService.ShowError("Bạn chưa chọn lớp để import học sinh!");
                return;
            }

            bool check = await ClassService.CreateExcel(content, classIdToSend);
            if (check)
            {
                toastService.ShowSuccess("Thêm dữ liệu thành công!");
                showStudentModal = false;
                await LoadClasses();             // Reload toàn bộ danh sách lớp
                selectedClass = classes.FirstOrDefault(c => c.Id == selectedClass.Id);
                await LoadClassTeacherName();    // Cập nhật tên giáo viên
                await LoadClassStudents();       // Cập nhật danh sách học sinh
                StateHasChanged();
            }
            else
                toastService.ShowError("Thêm thất bại");
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }
}  