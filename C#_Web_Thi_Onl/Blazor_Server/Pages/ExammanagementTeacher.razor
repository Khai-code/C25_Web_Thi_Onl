@page "/exammanagement"
@using Blazor_Server.Services
@using Data_Base.Models.R
@layout TeacherLayout
@inject ExammanagementService exammanagement
<div class="p-3 border rounded shadow-sm bg-white">
    <ul class="nav nav-tabs" id="roomTabs" role="tablist">
        @foreach (var item in rooms)
        {
            <li class="nav-item" role="presentation">
                <button class="nav-link @(item.ID == selectedRoomId ? "active" : "")"
                        id="@($"tab-{item.ID}")"
                        data-bs-toggle="tab"
                        data-bs-target="@($"#tab-pane-{item.ID}")"
                        type="button" role="tab"
                        @onclick="()=>getallexam(item.ID)">
                    @item.Room_Name
                </button>
            </li>
        }
        <li class="nav-item ms-auto">
            <div class="input-group">
                <span class="input-group-text bg-transparent rounded-0 border-0 border-bottom">
                    <i class="bi bi-search"></i>
                </span>
                <input @bind="searchText" @bind:event="oninput" class="form-control rounded-0 border-0 border-bottom shadow-none" type="search" placeholder="Tìm kiếm..." aria-label="Search">
            </div>


        </li>
    </ul>
    <div class="tab-content border border-top-0 rounded-bottom bg-light ">
        @for (int i = 0; i < rooms.Count; i++)
        {
            <div class="tab-pane fade @(i == 0 ? "show active" : "")" id="@($"tab-pane-{rooms[i].ID}")" role="tabpanel">
                <div class="table">
                    <table class="table table-borderless shadow-sm">
                        <thead class="table-secondary border-top text-center " style="font-family:sans-serif;height:50px">
                            <tr class="">
                                <td scope="col">STT</td>
                                <td scope="col">Tên bài thi</td>
                                <td scope="col">Tên giáo viên</td>
                                <td scope="col">Lớp</td>
                                <td scope="col">Thời gian</td>
                                <td scope="col">Trạng thái</td>
                                <td scope="col">Hành động</td>
                            </tr>
                        </thead>
                        <tbody class="text-center">
                            @if (filteredExamList.Any())
                            {
                                @foreach (var (exam, index) in filteredExamList.Select((exam, i) => (exam, i + 1)))
                                {
                                    <tr>
                                        <td>@index</td>
                                        <td>@exam.Name</td>
                                        <td>GV1: @exam.NameTeacher1 <br />GV2: @exam.NameTeacher2</td>
                                        <td>@exam.nameclass</td>
                                        <td>@exam.StartTime - @exam.EndTime</td>
                                        <td>@(exam.Status == 1 ? "Đang thi" : "Chưa thi")</td>
                                        <td>
                                            <NavLink href="@($"/DetailExamanager/{exam.Id}")" class="btn btn-info">
                                                Chi tiết
                                            </NavLink>

                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-danger text-center">Không có bài thi nào.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>



<!-- Modal Thêm Mới -->
<div class="modal fade" id="addRoomModal" tabindex="-1" aria-labelledby="addRoomModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRoomModalLabel">Thêm phòng mới</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="text" class="form-control" placeholder="Nhập tên phòng..." @bind="newRoomName" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-primary" @onclick="AddNewRoom">Lưu</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Room> rooms = new();
    private string newRoomName = string.Empty;
    private int selectedRoomId;
    private List<ExammanagementService.ListExam> examList =new();
    private string searchText = "";
    private IEnumerable<ExammanagementService.ListExam> filteredExamList => string.IsNullOrWhiteSpace(searchText)
       ? examList
       : examList.Where(x => x.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                             x.NameTeacher1.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                             x.NameTeacher2.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                             (x.Status == 1 ? "Đang thi" : "Chưa thi").Contains(searchText, StringComparison.OrdinalIgnoreCase));
    protected override async Task OnInitializedAsync()
    {
        rooms = await exammanagement.GetallRoom() ?? new List<Room>();
        if (rooms.Any())
        {
            selectedRoomId = rooms.First().ID;
            await getallexam(selectedRoomId);
        }

    }
    private async Task getallexam(int id)
    {
        examList = await exammanagement.Listexam(id);
    }
    
    private async Task AddNewRoom()
    {
        if (!string.IsNullOrWhiteSpace(newRoomName))
        {
            var newRoom = new Room { ID = rooms.Count + 1, Room_Name = newRoomName };
            rooms.Add(newRoom);
            newRoomName = string.Empty;
        }
    }
}
