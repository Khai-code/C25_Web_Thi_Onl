@page "/exammanagement"
@using Blazor_Server.Services
@using Data_Base.GenericRepositories
@using Data_Base.Models.E
@using static Blazor_Server.Services.Package_Test_ERP
@using static Blazor_Server.Services.ExammanagementService
@layout TeacherLayout
@inject Notification notification
@inject ExammanagementService exammanagement
@inject Package_Test_ERP Pack
@inject Blazored.Toast.Services.IToastService toastService
@using Data_Base.Models.E
@using static Blazor_Server.Services.HistoriesExam
<div class="split-container">
    <div class="left-panel px-2">
        <div class="d-flex flex-wrap align-items-center justify-content-between mb-4 gap-2">
            <h6 class="text-primary fw-bold mb-0">📋 Danh sách bài thi</h6>
            <div class="d-flex align-items-center gap-2 ms-auto">
                <button class="btn btn-sm btn-success" @onclick="OpenAddExamModal">
                    ➕ Tạo mới
                </button>
                <div class="dropdown">
                    <button class="btn btn-primary btn-sm dropdown-toggle d-flex align-items-center gap-1"
                    type="button" id="filterDropdown" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                        <i class="bi bi-funnel-fill"></i> Lọc
                    </button>

                    <ul class="dropdown-menu shadow p-3" aria-labelledby="filterDropdown" style="min-width: 250px;">
                        @foreach (var option in timeOptions)
                        {
                            <li class="form-check mb-2">
                                <input class="form-check-input"
                                type="radio"
                                id="@option.Id"
                                name="timeFilter"
                                value="@option.Id"
                                checked="@(_selectedTimeFilter == option.Id)"
                                @onchange="@(() => OnTimeOptionChanged(option.Id))" />
                                <label class="form-check-label ms-1" for="@option.Id" style="cursor: pointer;">@option.Label</label>
                            </li>
                        }

                        @if (_selectedTimeFilter == 7)
                        {
                            <div class="border-top pt-3 mt-2">
                                <label class="form-label fw-semibold">Từ ngày:</label>
                                <input type="date" class="form-control form-control-sm mb-2" @bind="startDate" />
                                <label class="form-label fw-semibold">Đến ngày:</label>
                                <input type="date" class="form-control form-control-sm mb-3" @bind="endDate" />
                            </div>
                        }

                        <li>
                            <button class="btn btn-sm btn-primary w-100" @onclick="ApplyDateFilter">
                                <i class="bi bi-filter"></i> Áp dụng lọc
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="list-group">
            @if (exams == null || !exams.Any())
            {
                <div class="text-center text-muted mt-2">Không có bài thi</div>
            }
            else
            {
                @foreach (var exam in exams)
                {
                    <a class="list-group-item d-flex justify-content-between align-items-center
                   @(SelectedExam == exam.Id ? "active text-white bg-primary" : "")"
                    @onclick="() => SelectExam(exam.Id)">
                        <div>
                            <span class="fw-bold">📚 @exam.NameExam</span>
                        </div>
                        <span class="badge bg-info text-dark p-2 rounded-pill">
                            @exam.Totalpackage gói đề
                        </span>
                    </a>
                }
            }
        </div>
    </div>



    <div class="right-panel">

        <div class="top-panel">
            <h6 class="title text-success">📌 Danh sách gói đề</h6>
            @if (SelectedExam != null)
            {
                <div class="list-group">
                    @foreach (var package in Listpackages)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center
                         @(SelectedPackage == package.Id ? "active bg-primary text-white" : "")" @onclick="() => SelectPackage(package.Id)">

                            <div>
                                <span class="fw-bold">📘 @package.NamePackage</span>

                                <!-- Kiểm tra nếu đang chỉnh sửa -->
                                @if (EditingPackageId == package.Idexam)
                                {
                                    <div class="d-flex align-items-center gap-3">
                                        <label class="fw-bold mb-0">🕒 Bắt đầu:</label>
                                        <input type="datetime-local" class="form-control form-control-sm w-auto" @bind="package.StartTime" />

                                        <label class="fw-bold mb-0">⏳ Kết thúc:</label>
                                        <input type="datetime-local" class="form-control form-control-sm w-auto" @bind="package.EndTime" />
                                    </div>
                                }

                                else
                                {
                                    <div class="small @(SelectedPackage == package.Id ? "text-light" : "text-muted")">
                                        🕒 @package.StartTime.ToString("dd/MM/yyyy HH:mm") - @package.EndTime.ToString("dd/MM/yyyy HH:mm")
                                        📍 Phòng: @package.RoomName
                                    </div>
                                }
                            </div>

                            <div>
                                @if (package.PackageTypeID == 1)
                                {

                                    <button class="btn btn-success btn-sm me-2" @onclick="() => ShowGradingModal(package.Id, package.NamePackage)">Chấm điểm</button>
                                }

                                @if (EditingPackageId == package.Idexam)
                                {
                                    <button class="btn btn-success btn-sm" @onclick="() => SaveChanges(package)">
                                        <i class="bi bi-save"></i> Lưu
                                    </button>
                                    <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">
                                        ❌ Hủy
                                    </button>
                                }
                                else
                                {
                                    if (package.StartTime > status)
                                    {
                                        <button class="btn btn-warning btn-sm" @onclick="() => EditPackage(package.Idexam)">
                                            <i class="bi bi-pencil-square"></i> Chỉnh sửa
                                        </button>
                                    }
                                    else{
                                        <button class="btn btn-warning btn-sm" disabled>
                                            <i class="bi bi-pencil-square"></i> Chỉnh sửa
                                        </button>
                                    }

                                }
                            </div>

                        </div>
                    }
                </div>
            }
        </div>

        <div class="bottom-panel">
            <h6 class="title text-warning">🎓 Danh sách học sinh</h6>
            @if (SelectedPackage != null)
            {
                <ul class="list-group">
                    @foreach (var student in listStudents)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center p-3 rounded shadow-sm">
                            <div class="d-flex align-items-center">
                                <div class="avatar bg-primary  rounded-circle d-flex justify-content-center align-items-center me-3" style="width: 40px; height: 40px;">
                                    <i class="bi bi-person-circle"></i>
                                </div>
                                <div>
                                    <h6 class="mb-1 fw-bold">@student.NameStudent</h6>
                                    <small class="@GetStatusClass(student.status)">@student.status</small>

                                </div>
                            </div>
                            <button class="btn btn-sm d-flex align-items-center
                                         @(student.status.StartsWith("Đã hoàn thành") ? "btn-secondary" : "btn-outline-danger")"
                            @onclick="() => TriggerStopTest(student.Id, student.packagecode)"
                            disabled="@(student.status.StartsWith("Đã hoàn thành"))"
                            title="@(student.status.StartsWith("Đã hoàn thành") ? "Không thể hủy, bài thi đã hoàn thành" : "Hủy thi")">
                                <i class="fas fa-times me-1"></i> Hủy thi
                            </button>
                        </li>


                    }
                </ul>
            }
        </div>
    </div>

    @if (IsAddExamModalOpen)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">➕ Thêm bài thi mới</h5>
                        <button type="button" class="btn-close" @onclick="CloseAddExamModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="model" OnSubmit="CreateExam">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="examName" class="form-label">Tên bài thi</label>
                                <InputText id="examName" class="form-control" @bind-Value="model.ExamName"
                                required
                                oninvalid="this.setCustomValidity('Vui lòng nhập tên bài thi')"
                                oninput="this.setCustomValidity('')" />
                            </div>
                            <div class="mb-3">
                                <label for="subjectId" class="form-label">Môn học</label>
                                <InputSelect id="subjectId" class="form-control" @bind-Value="model.SubjectId"
                                required
                                oninvalid="this.setCustomValidity('Vui lòng chọn môn học')"
                                oninput="this.setCustomValidity('')">
                                    <option value=" ">-- Chọn gói môn --</option>
                                    @foreach (var subj in subjectViewModel)
                                    {
                                        <option value="@subj.Subject_Id">@subj.Subject_Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-primary">Lưu</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (IsGradingModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content shadow-lg border-0 rounded-3">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        📊 Trình chấm điểm chi tiết – @CurrentGradingPackageName
                    </h5>
                    <button class="btn-close btn-close-white" @onclick="CloseGradingModal"></button>
                </div>

                <div class="modal-body">
                    <div class="mb-4">
                        <h6 class="text-primary fw-bold mb-3">📄 Danh sách bài Thi</h6>
                        <ul class="list-group">
                            @foreach (var test in TestsOfPackage)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span class="fw-medium">@test.Test_Code</span>
                                    @if (test.Status != 1)
                                    {
                                        <button class="btn btn-outline-info btn-sm" @onclick="() => LoadQuestionsForTest(test.Id)">
                                            Bắt đầu chấm điểm
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-success fw-bold">Đã chấm điểm</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>

                    @if (QuestionsWithAnswers.Any())
                    {
                        <div class="border-top pt-3">
                            <h6 class="text-success fw-bold mb-3">🧠 Chi tiết bài làm </h6>
                            @{
                                int questionIndex = 1;
                            }
                            <ol class="ps-3">
                                @foreach (var q in QuestionsWithAnswers)
                                {
                                    <li class="mb-3">
                                        <div class="fw-semibold mb-1">
                                            <span class="text-primary">Câu @questionIndex:</span> @q.Questions.Question_Name
                                            <span class="text-muted">(Tối đa: @q.Questions.Maximum_Score điểm)</span>
                                        </div>
                                        <ul class="list-group">
                                            @foreach (var ans in q.Answers)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    <span>@ans.Answers_Name</span>
                                                    <input type="number" min="0" max="@q.Questions.Maximum_Score" step="0.01"
                                                    class="form-control form-control-sm border-2 border-primary "
                                                    style="width: 100px;"
                                                    @bind="ans.Points_Earned" />
                                                </li>
                                            }
                                        </ul>
                                    </li>
                                    questionIndex++;
                                }
                            </ol>

                            <div class="mt-4 text-end">
                                <button class="btn btn-success px-4" @onclick="SaveAllScores">
                                    💾 Lưu điểm
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback OnStopTest { get; set; }
    private List<listexam> exams = new List<listexam>();
    private List<listpackage> Listpackages = new List<listpackage>();
    private List<listStudent> listStudents = new List<listStudent>();
    List<SubjectViewModel> subjectViewModel = new List<SubjectViewModel>();
    private List<Exam_Room_Student> listExamRoomStudents = new();
    private int _selectedTimeFilter = 0;
    private DateTime status=DateTime.Now;
    private DateTime startDate = DateTime.Today;
    private DateTime endDate = DateTime.Today;
    private bool IsGradingModalOpen = false;
    private int CurrentGradingPackageId;
    private string CurrentGradingPackageName = "";
    private List<Data_Base.Models.T.Test> TestsOfPackage = new();
    private List<listquestion> QuestionsWithAnswers = new();
    private int CurrentGradingTestId = 0;
    [Inject] IJSRuntime JS { get; set; }
    private List<(int Id, string Label)> timeOptions = new()
{
    (0, "Tất cả"),
    (1, "Hôm nay"),
    (2, "7 ngày tới"),
    (3, "14 ngày tới"),
    (4, "30 ngày tới"),
    (5, "Tuần trước"),
    (6, "Tháng trước"),
    (7, "Tùy chọn ngày")
};
    private void OnTimeOptionChanged(int id)
    {
        _selectedTimeFilter = id;
    }
    private string GetStatusClass(string status)
    {
        return status switch
        {
            var s when s.StartsWith("Chưa thi") => "text-secondary fw-bold",
            var s when s.StartsWith("Đang thi") => "text-primary fw-bold",
            var s when s.StartsWith("Đã hoàn thành bài thi") => "text-success fw-bold",
            var s when s.StartsWith("Đã phát hiện gian lận") => "text-danger fw-bold",
            var s when s.StartsWith("Đã thi") => "text-info fw-bold",
            _ => "text-muted"
        };
    }

    private DateTime? from = null;
    private DateTime? to = null;

    private async Task ApplyDateFilter()
    {


        switch (_selectedTimeFilter)
        {
            case 1:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(1).AddTicks(-1);
                break;
            case 2:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(7);
                break;
            case 3:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(14);
                break;
            case 4:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(30);
                break;
            case 5:
                var todays = DateTime.Today;
                int delta = (int)todays.DayOfWeek - (int)DayOfWeek.Monday;
                if (delta < 0) delta += 7;
                var startOfThisWeek = todays.AddDays(-delta);
                from = startOfThisWeek.AddDays(-7); // Bắt đầu của tuần trước
                to = startOfThisWeek.AddTicks(-1);  // Kết thúc tuần trước (chủ nhật tuần trước, 23:59:59.999)
                break;
            case 6:
                var today = DateTime.Today;
                var firstDayOfThisMonth = new DateTime(today.Year, today.Month, 1);
                from = firstDayOfThisMonth.AddMonths(-1); // ngày 01 của tháng trước
                to = firstDayOfThisMonth.AddTicks(-1);    // ngày cuối cùng của tháng trước (31/05/2025 23:59:59)
                break;

            case 7:
                from = startDate;
                to = endDate;
                break;
            default:
                // Nếu là "Tất cả", lấy toàn bộ, để from và to = null
                from = null;
                to = null;
                break;
        }

        await JS.InvokeVoidAsync("eval", "document.getElementById('filterDropdown').click()");

        if (from.HasValue && to.HasValue)
        {

            Listpackages = new List<listpackage>();
            listStudents = new List<listStudent>();
            exams = await exammanagement.SeachExam(from.Value, to.Value);

        }

        else
            exams = await exammanagement.GetallExam(); 
        Listpackages = new List<listpackage>();
        listStudents = new List<listStudent>();
    }
    protected override async Task OnInitializedAsync()
    {
        try{
            exams = await exammanagement.GetallExam();
            await Subject();
        }catch{}

    }

    private async Task TriggerStopTest(int id, int code)
    {
        await exammanagement.cancelexam(id, code);
        await SelectPackage(SelectedPackage);
    }
    private bool isSearchVisible = false;
    private int SelectedExam;
    private int SelectedPackage;
    private int? EditingPackageId = null;
    private bool IsAddExamModalOpen = false;
    private ExamModel model = new ExamModel();
    private void ToggleSearch()
    {
        isSearchVisible = !isSearchVisible;
    }
    private void OpenAddExamModal()
    {
        IsAddExamModalOpen = true;
    }

    private void CloseAddExamModal()
    {
        IsAddExamModalOpen = false;
        model.ExamName = null;
        model.SubjectId = 0;
    }

    public async Task CreateExam()
    {
        try
        {
            Data_Base.Models.E.Exam exam = new Data_Base.Models.E.Exam();
            if (!string.IsNullOrEmpty(model.ExamName))
            {
                exam.Exam_Name = model.ExamName;
            }
            else
            {
                toastService.ShowWarning("Tên bài thi không đc để trống!");
                return;
            }

            if (model.SubjectId != null && model.SubjectId > 0)
            {
                exam.Subject_Id = model.SubjectId;
            }
            else
            {
                toastService.ShowWarning("Bạn chưa chọn môn học!");
                return;
            } 

            await exammanagement.AddExam(exam);
            toastService.ShowSuccess("Tạo bài thi thành công");
            model.ExamName = string.Empty;
            model.SubjectId = 0;
            exams = await exammanagement.GetallExam();
            IsAddExamModalOpen = false;

        }
        catch (Exception ex)
        {
            throw new ApplicationException("Có lỗi xảy ra khi tạo kỳ thi.", ex);
        }
    }

    public async Task Subject()

    {
        try
        {
            subjectViewModel = await Pack.GetSubject();
        }
        catch (Exception ex)
        {
            subjectViewModel = new List<SubjectViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    private async Task SelectExam(int id)
    {
        SelectedExam = id;
        Listpackages = await exammanagement.GetallPackage(id,from,to);
        listStudents = new List<listStudent>();
    }

    private async Task SelectPackage(int id)
    {
        SelectedPackage = id;
        listStudents = await exammanagement.GetAllStudent(id);
        listExamRoomStudents = await exammanagement.GetExamRoomStudentsByPackageId(id);
    }
    private void EditPackage(int id)
    {
        EditingPackageId = id;
    }

    private async Task SaveChanges(listpackage package)
    {
        DateTime now = DateTime.Now;
        if (package.StartTime < now)
        {
            await notification.ShowSweetAlert("Thời gian bắt đầu không được nhỏ hơn thời gian hiện tại!", "error");
            return;
        }
        if (package.EndTime <= package.StartTime)
        {
            await notification.ShowSweetAlert("Thời gian kết thúc phải lớn hơn thời gian bắt đầu!", "error");
            return;
        }
        var examRoom = new Exam_Room
            {
                Start_Time = ConvertLong.ConvertDateTimeToLong(package.StartTime),
                End_Time = ConvertLong.ConvertDateTimeToLong(package.EndTime)
            };
        bool isUpdated = await exammanagement.UpdateExamRoomTime(package.Idexam, examRoom);

        if (isUpdated)
        {
            await notification.ShowSweetAlert("Cập nhật thành công!", "success");
            EditingPackageId = null;
        }
        else
        {
            await notification.ShowSweetAlert("Cập nhật thất bại!", "error");
        }
    }

    private void CancelEdit()
    {
        EditingPackageId = null;
    }

    private async Task ShowGradingModal(int packageId, string packageName)
    {
        CurrentGradingPackageId = packageId;
        CurrentGradingPackageName = packageName;
        IsGradingModalOpen = true;
        TestsOfPackage = await exammanagement.GetTestsByPackage(packageId);
        QuestionsWithAnswers.Clear();
        StateHasChanged();
    }

    private void CloseGradingModal()
    {
        IsGradingModalOpen = false;
        CurrentGradingPackageId = 0;
        CurrentGradingPackageName = "";
        TestsOfPackage.Clear();
        QuestionsWithAnswers.Clear();
    }

    private async Task LoadQuestionsForTest(int testId)
    {
        CurrentGradingTestId = testId;
        QuestionsWithAnswers = await exammanagement.GetFullQuestionsByTest(testId);
        StateHasChanged();
    }

    private async Task SaveAllScores()
    {
        // if (listExamRoomStudents == null || !listExamRoomStudents.Any())
        // {
        //     toastService.ShowError("Không tìm thấy Exam_Room_Student tương ứng để lưu điểm!");
        //     return;
        // }
        // var examRoomStudentId = listExamRoomStudents.First().Id;
        // Gom hết các answer từ QuestionsWithAnswers
        var allAnswers = QuestionsWithAnswers.SelectMany(q => q.Answers).ToList();

        var result = await exammanagement.SaveAllScores(CurrentGradingTestId, allAnswers);

        if (result)
        {
            toastService.ShowSuccess("Lưu toàn bộ điểm thành công!");
            TestsOfPackage = await exammanagement.GetTestsByPackage(CurrentGradingPackageId);
            StateHasChanged();
            
        }
        else
            toastService.ShowError("Lưu điểm thất bại!");
    }

}
