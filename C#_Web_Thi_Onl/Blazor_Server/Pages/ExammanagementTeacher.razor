@page "/exammanagement"
@using Blazor_Server.Services
@using Data_Base.GenericRepositories
@using Data_Base.Models.A
@using Data_Base.Models.E
@using static Blazor_Server.Services.Package_Test_ERP
@using static Blazor_Server.Services.ExammanagementService
@layout TeacherLayout
@inject Notification notification
@inject ExammanagementService exammanagement
@inject HistoriesExam historiesExam
@inject Package_Test_ERP Pack
@inject Blazor_Server.Services.PackageManager pm
@inject Blazored.Toast.Services.IToastService toastService
@inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage SessionStorage
@using Data_Base.Models.E
@inject Package_Test_ERP PTERP
@using static Blazor_Server.Services.HistoriesExam
@using System.Globalization;
@using Data_Base.Models.R
@using Data_Base.V_Model
@using static Blazor_Server.Services.PackageManager

<div class="split-container">
    <!-- LEFT PANEL -->
    <div class="left-panel px-2">
        <div class="left-panel-inner">
            <!-- Danh sách bài thi (50%) -->
            <div class="panel-box">
                <div class="d-flex flex-wrap align-items-center justify-content-between mb-3 gap-2">
                    <h6 class="text-primary fw-bold mb-0">📋 Danh sách bài thi</h6>
                    <div class="d-flex align-items-center gap-2 ms-auto">
                        <button class="btn btn-sm btn-success" @onclick="OpenAddExamModal">
                            ➕ Tạo mới
                        </button>
                        <div class="dropdown">
                            <button class="btn btn-primary btn-sm dropdown-toggle d-flex align-items-center gap-1"
                                    type="button" id="filterDropdown" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                                <i class="bi bi-funnel-fill"></i> Lọc
                            </button>

                            <ul class="dropdown-menu shadow p-3" aria-labelledby="filterDropdown" style="min-width: 250px;">
                                @foreach (var option in timeOptions)
                                {
                                    <li class="form-check mb-2">
                                        <input class="form-check-input"
                                               type="radio"
                                               id="@option.Id"
                                               name="timeFilter"
                                               value="@option.Id"
                                               checked="@(_selectedTimeFilter == option.Id)"
                                               @onchange="@(() => OnTimeOptionChanged(option.Id))" />
                                        <label class="form-check-label ms-1" for="@option.Id" style="cursor: pointer;">@option.Label</label>
                                    </li>
                                }

                                @if (_selectedTimeFilter == 7)
                                {
                                    <div class="border-top pt-3 mt-2">
                                        <label class="form-label fw-semibold">Từ ngày:</label>
                                        <input type="date" class="form-control form-control-sm mb-2" @bind="startDate" />
                                        <label class="form-label fw-semibold">Đến ngày:</label>
                                        <input type="date" class="form-control form-control-sm mb-3" @bind="endDate" />
                                    </div>
                                }

                                <li>
                                    <button class="btn btn-sm btn-primary w-100" @onclick="ApplyDateFilter">
                                        <i class="bi bi-filter"></i> Áp dụng lọc
                                    </button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- CHỈ HIỂN THỊ TỐI ĐA 5 ITEM, DƯ CUỘN -->
                <div class="list-group exam-scroll">
                    @if (exams == null || !exams.Any())
                    {
                        <div class="text-center text-muted mt-2">Không có bài thi</div>
                    }
                    else
                    {
                        @foreach (var exam in exams)
                        {
                            <a class="list-group-item d-flex justify-content-between align-items-center exam-row
                           @(SelectedExam == exam.Id ? "active text-white bg-primary" : "")"
                               @onclick="() => SelectExam(exam.Id)">
                                <div>
                                    <span class="fw-bold">📚 @exam.NameExam</span>
                                </div>
                                <span class="badge bg-info text-dark p-2 rounded-pill">
                                    @exam.Totalpackage gói đề
                                </span>
                            </a>
                        }
                    }
                </div>
            </div>

            <!-- Danh sách phòng (50%) -->
            <div class="panel-box">
                <div class="d-flex align-items-center justify-content-between mb-2">
                    <h6 class="fw-bold text-secondary mb-0">🏫 Danh sách phòng</h6>

                    <button class="btn btn-sm btn-success" @onclick="OpenAddRoomModal">
                        ➕ Thêm phòng
                    </button>
                </div>

                @if (AllRooms == null || AllRooms.Count == 0)
                {
                    <div class="text-muted small">Chưa có phòng nào.</div>
                }
                else
                {
                    <!-- CHỈ HIỂN THỊ 5 DÒNG TBODY, DƯ CUỘN -->
                    <div class="room-scroll">
                        <table class="table table-sm table-hover align-middle mb-0">
                            <thead class="table-light position-sticky top-0" style="z-index:1;">
                                <tr>
                                    <th style="width:80px;">STT</th>
                                    <th>Tên phòng</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var r in AllRooms)
                                {
                                    <tr class="room-row">
                                        <td class="text-muted">@r.ID</td>
                                        <td class="fw-semibold">
                                            <i class="bi bi-geo-alt-fill me-1"></i>@r.Room_Name
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- RIGHT PANEL -->
    <div class="right-panel">

        <div class="top-panel">
            <h6 class="title text-success">📌 Danh sách gói đề</h6>
            @if (SelectedExam != null)
            {
                <div class="list-group">
                    @foreach (var package in Listpackages)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center
                             @(SelectedPackage == package.Id ? "active bg-primary text-white" : "")" @onclick="() => SelectPackage(package.Id)">

                            <div>
                                <span class="fw-bold">📘 @package.NamePackage</span>

                                @if (EditingPackageId == package.Idexam)
                                {
                                    <div class="d-flex align-items-center gap-3 mt-2">
                                        <label class="fw-bold mb-0">🕒 Bắt đầu:</label>
                                        <input type="datetime-local" class="form-control form-control-sm w-auto" @bind="package.StartTime" />

                                        <label class="fw-bold mb-0">⏳ Kết thúc:</label>
                                        <input type="datetime-local" class="form-control form-control-sm w-auto" @bind="package.EndTime" />
                                    </div>
                                }
                                else
                                {
                                    <div class="small @(SelectedPackage == package.Id ? "text-light" : "text-muted")">
                                        🕒 @package.StartTime.ToString("dd/MM/yyyy HH:mm") - @package.EndTime.ToString("dd/MM/yyyy HH:mm")
                                        📍 Phòng: @package.RoomName
                                    </div>
                                }
                            </div>

                            <div class="d-flex align-items-center gap-2">
                                @if (package.PackageTypeID == 1)
                                {
                                    <button class="btn btn-warning btn-sm me-2"
                                            disabled="@(teacherViewModel.Position != 1 || teacherViewModel.Teacher_Id != package.TeacherIdMark)"
                                            @onclick:stopPropagation="true"
                                            @onclick="() => TryOpenGrading(package)">
                                        Chấm điểm
                                    </button>
                                }

                                @* Nút xác nhận mở bài thi *@
                                @{
                                    var canProctor = teacherViewModel != null && package.ProctorTeacherIds.Contains(teacherViewModel.Teacher_Id);
                                    var hasThisTeacherConfirmed = teacherViewModel != null && package.ConfirmedProctorTeacherIds.Contains(teacherViewModel.Teacher_Id);
                                }

                                @if (hasThisTeacherConfirmed)
                                {
                                    <button class="btn btn-secondary btn-sm" disabled>
                                        ✅ Bạn đã xác nhận mở bài thi
                                    </button>
                                }
                                else if (canProctor)
                                {
                                    <button class="btn btn-success btn-sm"
                                            @onclick="() => ConfirmExam(package.Idexam)">
                                        ✅ Xác nhận mở bài thi
                                    </button>
                                }
                            </div>

                        </div>
                    }
                </div>
            }
        </div>

        <div class="bottom-panel">
            <h6 class="title text-warning">🎓 Danh sách học sinh</h6>

            @if (isLoading)
            {
                <div class="progress-container mb-2">
                    <div class="progress-bar rainbow"></div>
                </div>
            }
            @if (SelectedPackage != null)
            {
                <ul class="list-group border-0">
                    @foreach (var student in listStudents)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center p-3 mb-2 rounded shadow-sm border-0">

                            <!-- Thông tin học sinh -->
                            <div class="d-flex align-items-center">
                                <div class="avatar bg-primary rounded-circle d-flex justify-content-center align-items-center me-3" style="width: 40px; height: 40px;">
                                    <i class="bi bi-person-circle"></i>
                                </div>
                                <div>
                                    <h6 class="mb-1 fw-bold">@student.NameStudent</h6>
                                    <small class="@GetStatusClass(student.status)">@student.status</small>
                                </div>
                            </div>

                            <!-- Các nút thao tác -->
                            <div class="d-flex gap-2">
                                <!-- Nút Hủy thi -->
                                @if (student.Is_cheat == 0)
                                {
                                    <button class="btn btn-sm d-flex align-items-center shadow-sm
                        @(student.status.StartsWith("Đã hoàn thành") ? "btn-secondary" : "btn-outline-danger")"
                                            @onclick="() => TriggerStopTest(student.Id, student.packagecode)"
                                            disabled="@(student.status.StartsWith("Đã hoàn thành"))"
                                            title="@(student.status.StartsWith("Đã hoàn thành") ? "Không thể hủy, bài thi đã hoàn thành" : "Hủy thi")">
                                        <i class="fas fa-times me-2"></i> Hủy thi
                                    </button>
                                }
                               @*  @if (position == 0 && student.status != "Đang thi" && student.Is_cheat == 4)
                                {
                                    <button @onclick="() => openModalTests2(student.IdTest,student.packagecode)"
                                            type="button"
                                            class="btn btn-success btn-sm shadow-sm d-flex align-items-center px-3">
                                        <i class="bi bi-play-circle-fill me-2"></i>
                                        Xác nhận yêu cầu
                                    </button>
                                } *@
                               @if (position == 0)
                                {
                                    <button @onclick="() => openModalTests(student.IdTest,student.packagecode)"
                                            type="button"
                                            class="btn btn-success btn-sm shadow-sm d-flex align-items-center px-3">
                                        <i class="bi bi-play-circle-fill me-2"></i>
                                        Kích hoạt
                                    </button>

                                }
                            </div>
                        </li>
                    }
                </ul>
            }

        </div>
    </div>

    <!-- MODAL: Thêm bài thi -->
    @if (IsAddExamModalOpen)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">➕ Thêm bài thi mới</h5>
                        <button type="button" class="btn-close" @onclick="CloseAddExamModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="model" OnSubmit="CreateExam">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="examName" class="form-label">Tên bài thi</label>
                                <InputText id="examName" class="form-control" @bind-Value="model.ExamName"
                                           required
                                           oninvalid="this.setCustomValidity('Vui lòng nhập tên bài thi')"
                                           oninput="this.setCustomValidity('')" />
                            </div>
                            <div class="mb-3">
                                <label for="subjectId" class="form-label">Môn học</label>
                                <InputSelect id="subjectId" class="form-control" @bind-Value="model.SubjectId"
                                             required
                                             oninvalid="this.setCustomValidity('Vui lòng chọn môn học')"
                                             oninput="this.setCustomValidity('')">
                                    <option value=" ">-- Chọn gói môn --</option>
                                    @foreach (var subj in subjectViewModel)
                                    {
                                        <option value="@subj.Subject_Id">@subj.Subject_Name</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-primary">Lưu</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- MODAL: Chấm điểm -->
    @if (IsGradingModalOpen)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.6);">
            <div class="modal-dialog modal-xl">
                <div class="modal-content shadow-lg border-0 rounded-3">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">
                            📊 Trình chấm điểm chi tiết – @CurrentGradingPackageName
                        </h5>
                        <button class="btn-close btn-close-white" @onclick="CloseGradingModal"></button>
                    </div>

                    <div class="modal-body">
                        <div class="mb-4">
                            <h6 class="text-primary fw-bold mb-3">📄 Danh sách bài Thi</h6>
                            <ul class="list-group">
                                @foreach (var test in TestsOfPackage)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span class="fw-medium">@test.Test_Code</span>
                                        @if (test.Status != 1)
                                        {
                                            <button class="btn btn-outline-info btn-sm" @onclick="() => LoadQuestionsForTest(test.Id)">
                                                Bắt đầu chấm điểm
                                            </button>
                                        }
                                        else
                                        {
                                            <span class="text-success fw-bold">Đã chấm điểm</span>
                                        }
                                    </li>
                                }
                            </ul>
                        </div>

                        @if (QuestionsWithAnswers.Any())
                        {
                            <div class="border-top pt-3">
                                <h6 class="text-success fw-bold mb-3">🧠 Chi tiết bài làm </h6>
                                @{
                                    int questionIndex = 1;
                                }
                                <ol class="ps-3">
                                    @foreach (var q in QuestionsWithAnswers)
                                    {
                                        <li class="mb-3">
                                            <div class="fw-semibold mb-1">
                                                <span class="text-primary">Câu @questionIndex:</span> @q.Questions.Question_Name
                                                <span class="text-muted">(Tối đa: @q.Questions.Maximum_Score điểm)</span>
                                            </div>
                                            <ul class="list-group">
                                                @foreach (var ans in q.Answers)
                                                {
                                                    <li class="list-group-item d-flex flex-column">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <span>@ans.Answers_Name</span>

                                                            <input type="number"
                                                                   min="0"
                                                                   max="@q.Questions.Maximum_Score"
                                                                   step="0.01"
                                                                   class="form-control form-control-sm @(errorMessages.ContainsKey(ans.Id) ? "is-invalid" : "")"
                                                                   style="width: 100px;"
                                                                   value="@FormatScore(ans.Points_Earned)"
                                                                   @oninput="(e) => OnScoreChanged(e, ans, q.Questions.Maximum_Score)" />
                                                        </div>

                                                        @if (errorMessages.ContainsKey(ans.Id))
                                                        {
                                                            <small class="text-danger">@errorMessages[ans.Id]</small>
                                                        }
                                                    </li>
                                                }
                                            </ul>
                                        </li>
                                        questionIndex++;
                                    }
                                </ol>

                                <div class="mt-4 text-end">
                                    <button class="btn btn-success px-4" @onclick="SaveAllScores">
                                        💾 Lưu điểm
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@if (IsGradingModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content shadow-lg border-0 rounded-3">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">
                        📊 Trình chấm điểm chi tiết – @CurrentGradingPackageName
                    </h5>
                    <button class="btn-close btn-close-white" @onclick="CloseGradingModal"></button>
                </div>

                <div class="modal-body">
                    <div class="mb-4">
                        <h6 class="text-primary fw-bold mb-3">📄 Danh sách bài Thi</h6>
                        <ul class="list-group">
                            @foreach (var test in TestsOfPackage)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span class="fw-medium">@test.Test_Code</span>
                                    @if (test.Status != 1)
                                    {
                                        <button class="btn btn-outline-info btn-sm" @onclick="() => LoadQuestionsForTest(test.Id)">
                                            Bắt đầu chấm điểm
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-success fw-bold">Đã chấm điểm</span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>

                    @if (QuestionsWithAnswers.Any())
                    {
                        <div class="border-top pt-3">
                            <h6 class="text-success fw-bold mb-3">🧠 Chi tiết bài làm </h6>
                            @{
                                int questionIndex = 1;
                            }
                            <ol class="ps-3">
                                @foreach (var q in QuestionsWithAnswers)
                                {
                                    <li class="mb-3">
                                        <div class="fw-semibold mb-1">
                                            <span class="text-primary">Câu @questionIndex:</span> @q.Questions.Question_Name
                                            <span class="text-muted">(Tối đa: @q.Questions.Maximum_Score điểm)</span>
                                        </div>
                                        <ul class="list-group">
                                            @foreach (var ans in q.Answers)
                                            {
                                                <li class="list-group-item d-flex flex-column">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <span>@ans.Answers_Name</span>

                                                        <input type="number"
                                                               min="0"
                                                               max="@q.Questions.Maximum_Score"
                                                               step="0.01"
                                                               class="form-control form-control-sm @(errorMessages.ContainsKey(ans.Id) ? "is-invalid" : "")"
                                                               style="width: 100px;"
                                                               value="@FormatScore(ans.Points_Earned)"
                                                               @oninput="(e) => OnScoreChanged(e, ans, q.Questions.Maximum_Score)" />
                                                    </div>

                                                    @if (errorMessages.ContainsKey(ans.Id))
                                                    {
                                                        <small class="text-danger">@errorMessages[ans.Id]</small>
                                                    }
                                                </li>
                                            }

                                        </ul>
                                    </li>
                                    questionIndex++;
                                }
                            </ol>

                            <div class="mt-4 text-end">
                                <button class="btn btn-success px-4" @onclick="SaveAllScores">
                                    💾 Lưu điểm
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (IsAddRoomModalOpen)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">➕ Thêm phòng</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddRoomModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newRoom" OnValidSubmit="CreateRoom">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label fw-semibold">Tên phòng</label>
                            <InputText class="form-control" @bind-Value="newRoomName"
                                       required
                                       oninvalid="this.setCustomValidity('Vui lòng nhập tên phòng')"
                                       oninput="this.setCustomValidity('')" />
                        </div>


                        @* Nếu sau này có mã phòng / sức chứa thì thêm ở đây *@

                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddRoomModal">Hủy</button>
                            <button type="submit" class="btn btn-primary">Lưu</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
<EditForm Model="@studentModel" OnValidSubmit="updatecheate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="modal fade @(CheatModalOpen ? "show d-block animate__animated animate__fadeInDown" : "")"
         id="fadeModal" tabindex="-1"
         aria-labelledby="fadeModalLabel"
         aria-hidden="@(CheatModalOpen ? "false" : "true")"
         style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content shadow-lg border-0 rounded-3">

                <!-- Header -->
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title fw-bold" id="fadeModalLabel">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Xác nhận xử lý bài thi
                    </h5>

                </div>

                <!-- Body -->
                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Nội dung</label>
                        <InputText class="form-control form-control-lg border-danger shadow-sm"
                                   placeholder="Nhập nội dung xác nhận..."
                                   @bind-Value="studentModel.Name"
                                   required
                                   oninvalid="this.setCustomValidity('Vui lòng nhập thông tin')"
                                   oninput="this.setCustomValidity('')" />
                    </div>
                    <div class="alert alert-warning d-flex align-items-center mt-3" role="alert">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        Vui lòng xác nhận xử lý vi phạm gian lận trước khi tiếp tục.
                    </div>
                </div>

                <!-- Footer -->
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-outline-secondary px-4 rounded-pill" @onclick="close">
                        <i class="bi bi-x-circle me-1"></i> Đóng
                    </button>
                    <button type="submit" class="btn btn-danger px-4 rounded-pill">
                        <i class="bi bi-check2-circle me-1 "></i> Lưu xử lý
                    </button>
                </div>

            </div>
        </div>
    </div>
</EditForm>
<EditForm Model="@studentModel" OnValidSubmit="openTest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="modal fade @(CheatModalOpenTest ? "show d-block animate__animated animate__fadeInDown" : "")"
         id="fadeModal" tabindex="-1"
         aria-labelledby="fadeModalLabel"
         aria-hidden="@(CheatModalOpenTest ? "false" : "true")"
         style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content shadow-lg border-0 rounded-3">

                <!-- Header -->
                <div class="modal-header bg-warning text-white">
                    <h5 class="modal-title fw-bold" id="fadeModalLabel">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                         kích hoạt bài thi
                    </h5>

                </div>

                <!-- Body -->
                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Nội dung</label>
                        <InputText class="form-control form-control-lg border-danger shadow-sm"
                                   placeholder="Nhập nội dung yêu cầu..."
                                   @bind-Value="studentModel.Name"
                                   required
                                   oninvalid="this.setCustomValidity('Vui lòng nhập thông tin')"
                                   oninput="this.setCustomValidity('')" />
                    </div>
                    <div class="alert alert-warning d-flex align-items-center mt-3" role="alert">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        Vui lòng nhập thông tin để tiếp tục.
                    </div>
                </div>

                <!-- Footer -->
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-outline-secondary px-4 rounded-pill" @onclick="close">
                        <i class="bi bi-x-circle me-1"></i> Đóng
                    </button>
                    <button type="submit" class="btn btn-success px-4 rounded-pill">
                        <i class="bi bi-check2-circle me-1 "></i> Xác nhận
                    </button>
                </div>

            </div>
        </div>
    </div>
</EditForm>

<EditForm Model="@studentModel" OnValidSubmit="comfimTest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="modal fade @(CheatModalOpenTest2 ? "show d-block animate__animated animate__fadeInDown" : "")"
         id="fadeModal" tabindex="-1"
         aria-labelledby="fadeModalLabel"
         aria-hidden="@(CheatModalOpenTest2 ? "false" : "true")"
         style="background: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content shadow-lg border-0 rounded-3">

                <!-- Header -->
                <div class="modal-header bg-warning text-white">
                    <h5 class="modal-title fw-bold" id="fadeModalLabel">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        Xác nhận mở bài thi
                    </h5>

                </div>

                <!-- Body -->
                <div class="modal-body p-4">
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Nội dung</label>
                        <InputText class="form-control form-control-lg border-danger shadow-sm"
                                   placeholder="Nhập nội dung trả lời..."
                                   @bind-Value="studentModel.Name"
                                   required
                                   oninvalid="this.setCustomValidity('Vui lòng nhập thông tin')"
                                   oninput="this.setCustomValidity('')" />
                    </div>
                    <div class="alert alert-warning d-flex align-items-center mt-3" role="alert">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        Vui lòng nhập thông tin để tiếp tục.
                    </div>
                </div>

                <!-- Footer -->
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-outline-secondary px-4 rounded-pill" @onclick="close">
                        <i class="bi bi-x-circle me-1"></i> Từ chối
                    </button>
                    <button type="submit" class="btn btn-success px-4 rounded-pill">
                        <i class="bi bi-check2-circle me-1 "></i> Xác nhận
                    </button>
                </div>

            </div>
        </div>
    </div>
</EditForm>


@if (IsCheckTeacherMark)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content relative shadow-lg rounded-lg border border-gray-300">
                <div class="card shadow-lg border-0 rounded-4" style="max-width: 550px; margin: 40px auto; background: linear-gradient(135deg, #f0f8ff, #e6f0ff);">
                    <div class="card-body p-4">
                        <h4 class="text-center text-primary mb-4">
                            <i class="fas fa-box-open me-2"></i> Thông tin gói học
                        </h4>

                        <div class="mb-3 d-flex align-items-center">
                            <i class="fas fa-barcode text-success me-2"></i>
                            <label class="form-label fw-bold text-secondary mb-0">Mã gói:</label>
                            <span class="ms-2 text-dark">@PackageFillTeacher.PackageCode</span>
                        </div>

                        <div class="mb-3 d-flex align-items-center">
                            <i class="fas fa-book text-warning me-2"></i>
                            <label class="form-label fw-bold text-secondary mb-0">Tên gói:</label>
                            <span class="ms-2 text-dark">@PackageFillTeacher.NamePackage</span>
                        </div>

                        <div>
                            <label for="teacher" class="block text-sm font-medium text-gray-700 mb-1">Giáo viên coi thi 2</label>
                            <select id="teacher" class="w-full border border-gray-300 rounded-md px-3 py-2"
                                    @bind="teacherMarkId">
                                <option value="">-- Chọn giáo viên --</option>
                                @foreach (var tea in teacherViewModels)
                                {
                                    <option value="@tea.Teacher_Id">@tea.Teacher_Name</option>
                                }
                            </select>
                        </div>

                        <div class="text-center mt-4">
                            <button class="btn btn-gradient px-4 py-2 rounded-pill shadow-sm" @onclick="UpdatePackage">
                                <i class="fas fa-check-circle me-2"></i> Xác nhận
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Parameter] public EventCallback OnStopTest { get; set; }
    private Data_Base.Models.T.Teacher Teacher = new Data_Base.Models.T.Teacher();
    private V_Package v_Package = new V_Package();
    private List<V_Package> v_Packages = new List<V_Package>();
    private List<listexam> exams = new List<listexam>();
    private List<listpackage> Listpackages = new List<listpackage>();
    private List<listStudent> listStudents = new List<listStudent>();
    List<SubjectViewModel> subjectViewModel = new List<SubjectViewModel>();
    private List<Exam_Room_Student> listExamRoomStudents = new();
    private int _selectedTimeFilter = 0;
    private DateTime status = DateTime.Now;
    private DateTime startDate = DateTime.Today;
    private DateTime endDate = DateTime.Today;
    private bool IsGradingModalOpen = false;
    private int CurrentGradingPackageId;
    private string CurrentGradingPackageName = "";
    private List<Data_Base.Models.T.Test> TestsOfPackage = new();
    private List<listquestion> QuestionsWithAnswers = new();
    private int CurrentGradingTestId = 0;
    private int? teacherMarkId;
    [Inject] IJSRuntime JS { get; set; }
    private List<(int Id, string Label)> timeOptions = new()
{
    (0, "Tất cả"),
    (1, "Hôm nay"),
    (2, "7 ngày tới"),
    (3, "14 ngày tới"),
    (4, "30 ngày tới"),
    (5, "Tuần trước"),
    (6, "Tháng trước"),
    (7, "Tùy chọn ngày")
};
    private void OnTimeOptionChanged(int id)
    {
        _selectedTimeFilter = id;
    }
    private string GetStatusClass(string status)
    {
        return status switch
        {
            var s when s.StartsWith("Chưa thi") => "text-secondary fw-bold",
            var s when s.StartsWith("Đang thi") => "text-primary fw-bold",
            var s when s.StartsWith("Đã hoàn thành bài thi") => "text-success fw-bold",
            var s when s.StartsWith("Bài thi có cảnh báo gian lận nhưng đã được hoàn thành") => "text-warning fw-bold",
            var s when s.StartsWith("Đang thi (có cảnh báo gian lận)") => "text-warning fw-bold",
            var s when s.StartsWith("Bài thi gian lận đã bị hủy") => "text-danger fw-bold",
            var s when s.StartsWith("Đã thi") => "text-info fw-bold",
            _ => "text-muted"
        };
    }

    private DateTime? from = null;
    private DateTime? to = null;

    private async Task ApplyDateFilter()
    {


        switch (_selectedTimeFilter)
        {
            case 1:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(1).AddTicks(-1);
                break;
            case 2:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(7);
                break;
            case 3:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(14);
                break;
            case 4:
                from = DateTime.Today;
                to = DateTime.Today.AddDays(30);
                break;
            case 5:
                var todays = DateTime.Today;
                int delta = (int)todays.DayOfWeek - (int)DayOfWeek.Monday;
                if (delta < 0) delta += 7;
                var startOfThisWeek = todays.AddDays(-delta);
                from = startOfThisWeek.AddDays(-7); // Bắt đầu của tuần trước
                to = startOfThisWeek.AddTicks(-1);  // Kết thúc tuần trước (chủ nhật tuần trước, 23:59:59.999)
                break;
            case 6:
                var today = DateTime.Today;
                var firstDayOfThisMonth = new DateTime(today.Year, today.Month, 1);
                from = firstDayOfThisMonth.AddMonths(-1); // ngày 01 của tháng trước
                to = firstDayOfThisMonth.AddTicks(-1);    // ngày cuối cùng của tháng trước (31/05/2025 23:59:59)
                break;

            case 7:
                from = startDate;
                to = endDate;
                break;
            default:
                // Nếu là "Tất cả", lấy toàn bộ, để from và to = null
                from = null;
                to = null;
                break;
        }

        await JS.InvokeVoidAsync("eval", "document.getElementById('filterDropdown').click()");

        if (from.HasValue && to.HasValue)
        {

            Listpackages = new List<listpackage>();
            listStudents = new List<listStudent>();
            exams = await exammanagement.SeachExam(from.Value, to.Value);

        }

        else
            exams = await exammanagement.GetallExam();
        Listpackages = new List<listpackage>();
        listStudents = new List<listStudent>();
    }
    private string ID;
    private int position;
    private List<Room> AllRooms = new List<Room>();
    private listcheck check = new listcheck();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Subject();
            _timer = new System.Threading.Timer(async _ => await RefreshData(), null, 0, 5000);
            await LoadCurrentTeacherAsync();
            exams = await exammanagement.GetallExam();    
            AllRooms = await exammanagement.GetAllRooms();
            isLoading = false;
            var result = await SessionStorage.GetAsync<string>("Id");
            ID = result.Success ? result.Value : string.Empty;
            position = await exammanagement.GetPositionAsync2(int.Parse(ID));
        }
        catch { }

    }

    private async Task TriggerStopTest(int id, int code)
    {
        await exammanagement.cancelexam(id, code);
        await SelectPackage(SelectedPackage);
    }
    private bool isSearchVisible = false;
    private int SelectedExam;
    private int SelectedPackage;
    private int? EditingPackageId = null;
    private bool IsAddExamModalOpen = false;
    private ExamModel model = new ExamModel();
    private void ToggleSearch()
    {
        isSearchVisible = !isSearchVisible;
    }
    private void OpenAddExamModal()
    {
        IsAddExamModalOpen = true;
    }

    private void CloseAddExamModal()
    {
        IsAddExamModalOpen = false;
        model.ExamName = null;
        model.SubjectId = 0;
    }

    public async Task CreateExam()
    {
        try
        {
            Data_Base.Models.E.Exam exam = new Data_Base.Models.E.Exam();
            if (!string.IsNullOrEmpty(model.ExamName))
            {
                exam.Exam_Name = model.ExamName;
            }
            else
            {
                toastService.ShowWarning("Tên bài thi không đc để trống!");
                return;
            }

            if (model.SubjectId != null && model.SubjectId > 0)
            {
                exam.Subject_Id = model.SubjectId;
            }
            else
            {
                toastService.ShowWarning("Bạn chưa chọn môn học!");
                return;
            }

            await exammanagement.AddExam(exam);
            toastService.ShowSuccess("Tạo bài thi thành công");
            model.ExamName = string.Empty;
            model.SubjectId = 0;
            exams = await exammanagement.GetallExam();
            IsAddExamModalOpen = false;

        }
        catch (Exception ex)
        {
            throw new ApplicationException("Có lỗi xảy ra khi tạo kỳ thi.", ex);
        }
    }

    public async Task Subject()
    {
        try
        {
            subjectViewModel = await Pack.GetSubject();
        }
        catch (Exception ex)
        {
            subjectViewModel = new List<SubjectViewModel>();
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    private async Task SelectExam(int id)
    {
        SelectedExam = id;
        Listpackages = await exammanagement.GetAllVPackage(id, from, to);
        listStudents = new List<listStudent>();
        SelectedPackage = 0;
        isLoading = false;
    }
    public class StudentModel
    {

        public string Name { get; set; } = string.Empty;
    }
    private StudentModel studentModel = new();
    private bool CheatModalOpen = false;
    private bool CheatModalOpenTest = false;
    private System.Threading.Timer? _timer;
    private bool isLoading = false;
    private async Task RefreshData()
    {
        try
        {
            isLoading = true;

            if (SelectedPackage != 0)
            {
                listStudents = await exammanagement.GetAllStudent(SelectedPackage);

                foreach (var item in listStudents)
                {
                    // 🚫 Nếu modal đang mở => không mở thêm alert nào khác
                    if (CheatModalOpen)
                    {
                        return;
                        StateHasChanged();
                    }

                    // 🚫 nếu = 3 thì tắt modal + đóng alert
                    if (item.Is_cheat == 3)
                    {
                        CheatModalOpen = false;
                        await JS.InvokeVoidAsync("closeAlert");
                        continue;
                    }

                    // ⚠️ nếu = 1 thì hiện cảnh báo
                    if (item.Is_cheat == 1)
                    {
                        var confirm = await JS.InvokeAsync<bool>(
                            "showAlert",
                            "Phát hiện học sinh",
                            $"⚠️ {item.NameStudent} có hành vi gian lận, yêu cầu giáo viên xác nhận và xử lý",
                            "warning"
                        );

                        if (confirm)
                        {
                            // Giáo viên chọn "Hủy thi"
                            var result = TriggerStopTest(item.Id, item.packagecode);
                            if (result != null)
                            {
                                await exammanagement.UpdateTestShow(item.IdTest, 3, "");
                                toastService.ShowInfo($"Đã hủy bài thi của {item.NameStudent}.");
                            }
                        }
                        else
                        {
                            // Giáo viên chọn "Xác nhận" => mở modal xử lý
                            CheatModalOpen = true;
                            idtest = item.IdTest;
                        }

                        // 🚨 chỉ xử lý 1 học sinh / lần
                        break;
                    }
                }

                listExamRoomStudents = await exammanagement.GetExamRoomStudentsByPackageId(SelectedPackage);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi RefreshData: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task openTest()
    {
        try
        {
            var result = await exammanagement.UpdateOpenTest(idtest, studentModel.Name);
            if (result != null)
            {
                toastService.ShowSuccess(" kích hoạt thi thành công!");
                CheatModalOpenTest = false;
            }
            else
                toastService.ShowError(" kích hoạt thi thất bại!");
        }
        catch (Exception ex)
        {
            toastService.ShowError("Gửi yêu cầu kích hoạt thi thất bại!");
        }
    }

    private int idtest;
    private async Task updatecheate()
    {
        try
        {
            var result = await exammanagement.UpdateTestShow(idtest, 2, studentModel.Name);
            if (result)
            {
                toastService.ShowSuccess("Lưu xử lý thành công!");
                CheatModalOpen = false;
            }
            else
                toastService.ShowError("Lưu xử lý thất bại!");
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lưu xử lý thất bại!");
        }

    }

    private void close()
    {
        CheatModalOpen = false;
        CheatModalOpenTest = false;
    }


    private async Task SelectPackage(int id)
    {
        SelectedPackage = id;
        check = await exammanagement.GetPositionAsync(int.Parse(ID), id);
        listStudents = await exammanagement.GetAllStudent(id);
        listExamRoomStudents = await exammanagement.GetExamRoomStudentsByPackageId(id);
    }

    private void EditPackage(int id)
    {
        EditingPackageId = id;
    }

    private async Task SaveChanges(listpackage package)
    {
        try
        {
            DateTime now = DateTime.Now;
            if (package.StartTime < now)
            {
                await notification.ShowSweetAlert("Thời gian bắt đầu không được nhỏ hơn thời gian hiện tại!", "error");
                return;
            }
            if (package.EndTime <= package.StartTime)
            {
                await notification.ShowSweetAlert("Thời gian kết thúc phải lớn hơn thời gian bắt đầu!", "error");
                return;
            }
            var examRoom = new Exam_Room
                {
                    Start_Time = ConvertLong.ConvertDateTimeToLong(package.StartTime),
                    End_Time = ConvertLong.ConvertDateTimeToLong(package.EndTime)
                };
            bool isUpdated = await exammanagement.UpdateExamRoomTime(package.Idexam, examRoom);

            if (isUpdated)
            {
                await notification.ShowSweetAlert("Cập nhật thành công!", "success");
                EditingPackageId = null;
            }
            else
            {
                await notification.ShowSweetAlert("Cập nhật thất bại!", "error");
            }
        }
        catch (Exception ex)
        {
            await notification.ShowSweetAlert("Cập nhật thất bại!", "error");
        }

    }


    private void CancelEdit()
    {
        EditingPackageId = null;
    }

    private async Task ShowGradingModal(int packageId, string packageName)
    {
        CurrentGradingPackageId = packageId;
        CurrentGradingPackageName = packageName;
        IsGradingModalOpen = true;
        TestsOfPackage = await exammanagement.GetTestsByPackage(packageId);
        QuestionsWithAnswers.Clear();
        StateHasChanged();
    }

    private void CloseGradingModal()
    {
        IsGradingModalOpen = false;
        CurrentGradingPackageId = 0;
        CurrentGradingPackageName = "";
        TestsOfPackage.Clear();
        QuestionsWithAnswers.Clear();
    }

    private async Task LoadQuestionsForTest(int testId)
    {
        CurrentGradingTestId = testId;
        QuestionsWithAnswers = await exammanagement.GetFullQuestionsByTest(testId);
        StateHasChanged();
    }

    bool IsCheckTeacherMark;
    private async Task TryOpenGrading(listpackage CurrentPackage)
    {
        // Phòng hờ trường hợp gọi trực tiếp handler
        if (teacherViewModel == null)
        {
            toastService.ShowWarning("Không xác định được giáo viên!");
            return;
        }
        // if (teacherViewModel.Teacher_Id != CurrentPackage.TeacherId)
        // {
        //     toastService.ShowWarning("Chỉ giáo viên ra đề mới có quyền chấm bài này.");
        //     return;
        // }
        if (teacherViewModel.Teacher_Id == CurrentPackage.TeacherIdMark)
        {
            await ShowGradingModal(CurrentPackage.Id, CurrentPackage.NamePackage);
        }
        else
        {
            v_Package = await exammanagement.GetByPackage(CurrentPackage.Id);
            IsCheckTeacherMark = true;
            PackageFillTeacher = CurrentPackage;
        }
    }

    public listpackage PackageFillTeacher = new listpackage();

    private async Task SaveAllScores()
    {
        var allAnswers = QuestionsWithAnswers.SelectMany(q => q.Answers).ToList();

        var result = await exammanagement.SaveAllScores(CurrentGradingTestId, allAnswers);

        if (result)
        {
            toastService.ShowSuccess("Lưu toàn bộ điểm thành công!");
            TestsOfPackage = await exammanagement.GetTestsByPackage(CurrentGradingPackageId);
            StateHasChanged();

        }
        else
            toastService.ShowError("Lưu điểm thất bại!");
    }

    private int CurrentTeacherId;
    private int UserId;
    private string errorMessage;
    private List<TeacherViewModel> teacherViewModels = new List<TeacherViewModel>();
    private TeacherViewModel teacherViewModel = new TeacherViewModel();

    public async Task LoadCurrentTeacherAsync()
    {
        var result = await SessionStorage.GetAsync<string>("authToken");
        if (result.Success && !string.IsNullOrEmpty(result.Value))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(result.Value) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
            var userIdClaim = jsonToken?.Claims.FirstOrDefault(c => c.Type == "Id");

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int parsedId))
            {
                UserId = parsedId;

                var teacher = await historiesExam.GetTeacherByUserIdAsync(UserId);
                CurrentTeacherId = teacher.Id;
                teacherViewModels = await pm.GetTeacher();
                teacherViewModel = teacherViewModels.Where(o => o.Teacher_Id == CurrentTeacherId).First();
            }
        }
        else
        {
            errorMessage = "Không tìm thấy token trong session storage.";
        }
    }


    private async Task ConfirmExam(int examRoomId)
    {
        if (CurrentTeacherId == null)
        {
            toastService.ShowWarning("Không xác định được giáo viên!");
            return;
        }

        bool success = await exammanagement.ConfirmExamRoom(examRoomId, teacherViewModel.Teacher_Id);

        if (success)
        {
            toastService.ShowSuccess("✅ Đã xác nhận mở bài thi!");
            Listpackages = await exammanagement.GetAllVPackage(SelectedExam, from, to);

        }
        else
            toastService.ShowError("❌ Xác nhận thất bại!");
    }

    private Dictionary<int, string> errorMessages = new();

    private string FormatScore(double? v)
        => v?.ToString("0.##", CultureInfo.InvariantCulture) ?? string.Empty;

    private void OnScoreChanged(ChangeEventArgs e, Answers ans, double? maxScore)
    {
        errorMessages.Remove(ans.Id);

        var str = e.Value?.ToString() ?? string.Empty;
        if (double.TryParse(str, NumberStyles.Float, CultureInfo.InvariantCulture, out var value))
        {
            if (maxScore.HasValue)
            {
                if (value < 0)
                    errorMessages[ans.Id] = "⚠️ Điểm không được âm";
                else if (value > maxScore.Value)
                    errorMessages[ans.Id] = $"⚠️ Điểm không được vượt quá {maxScore.Value}";
            }

            ans.Points_Earned = value;
        }
        else
        {
            ans.Points_Earned = null;
        }
    }

    // ====== ADD ROOM MODAL STATE ======
    private bool IsAddRoomModalOpen = false;
    private string newRoomName = string.Empty;
    private Room newRoom = new Room();

    private void OpenAddRoomModal()
    {
        newRoomName = "Phòng";
        newRoom = new Room();
        IsAddRoomModalOpen = true;
    }

    private void CloseAddRoomModal()
    {
        IsAddRoomModalOpen = false;
    }

    // Submit tạo phòng
    private async Task CreateRoom()
    {
        if (string.IsNullOrWhiteSpace(newRoomName))
        {
            toastService.ShowWarning("Vui lòng nhập tên phòng!");
            return;
        }

        // Chuẩn hóa dữ liệu
        newRoom.Room_Name = newRoomName.Trim();

        // Gọi service để tạo phòng
        var ok = await exammanagement.AddRoom(newRoom);
        if (ok)
        {
            toastService.ShowSuccess("Thêm phòng thành công!");
            IsAddRoomModalOpen = false;

            // Refresh lại list phòng
            AllRooms = await exammanagement.GetAllRooms();
            StateHasChanged();
        }
        else
        {
            toastService.ShowError("Thêm phòng thất bại!");
        }
    }

    private async Task UpdatePackage()
    {
        try
        {

            if (teacherMarkId != null)
            {
                v_Package.TeacherMark_Id = teacherMarkId;
            }
            else
            {
                toastService.ShowError("Chưa chọn giáo viên nhập đểm co bài thi!!!");
                return;
            }

            bool check = await PTERP.UpdatePackage(v_Package);

            if (check)
            {
                IsCheckTeacherMark = false;
                toastService.ShowSuccess("Chọn giáo viên chấm điểm thành công");
            }
            else
            {
                toastService.ShowError("Update giao viên nhập điểm thâ thất bại");
                return;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
            return;
        }
    }
    private async Task comfimTest()
    {
        try
        {
            var respon = await exammanagement.ConfimTestAdmin(idtest, studentModel.Name);
            if (respon != null)
            {
                toastService.ShowSuccess("Xác nhận thành công!");
            }
            else
            {
                toastService.ShowError("Xác nhận thất bại!");
            }
        }
        catch (Exception ex)
        {

        }
    }

    private int packagecode;
    private bool CheatModalOpenTest2 = false;
    private void openModalTests2(int id, int codepackage)
    {
        CheatModalOpenTest2 = true;
        idtest = id;
        packagecode = codepackage;

    }
    private void openModalTests(int id, int codepackage)
    {
        CheatModalOpenTest = true;
        idtest = id;
        packagecode = codepackage;

    }


}
