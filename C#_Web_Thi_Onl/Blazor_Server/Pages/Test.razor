@page "/Test"
@using Blazor_Server.Services
@using Blazored.TextEditor
@using Data_Base.Models.A
@using Data_Base.Models.E
@using Data_Base.Models.Q
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.IdentityModel.Tokens.Jwt
@using static Blazor_Server.Services.Test
@using static Blazor_Server.Services.Package_Test_ERP
@inject NavigationManager Navigation
@inject Package_Test_ERP PTERP
@inject Notification notification
@layout StudentLayout
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JSRuntime
@inject Blazor_Server.Services.Test TestService
@inject Blazored.Toast.Services.IToastService toastService


@if (histDTO != null && histDTO.Questions != null)
{
    <div class="text-center mb-3">
        <h3 class="fw-bold text-uppercase">BÀI KIỂM TRA</h3>
        <h5 class="text-muted">Môn: @histDTO.SubjectName – Lớp: @histDTO.ClassName</h5>
        <div class="fst-italic">(Thời gian làm bài: @poi phút)</div>
        <div class="text-danger fw-semibold">Thời gian còn lại: @FormatTime(timeInSecondsMinute)</div>
    </div>

    <!-- Test Info -->
    <div class="row mb-4 text-dark">
        <div class="col-md-4"><strong>Mã gói đề:</strong> @histDTO.PackageId</div>       
        <div class="col-md-4"><strong>Tên gói đề:</strong> @histDTO.PackageName</div>
        <div class="col-md-4"><strong>Loại đề:</strong> @histDTO.PackageType</div>
        <div class="col-md-4"><strong>Mã bài thi:</strong> @histDTO.TestCode</div>
    </div>

    if (histDTO.PackageTypeId == 1)
    {
        @foreach (var Que in histDTO.Questions)
        {
            var answer = listAnswers.FirstOrDefault(x => x.QuesId == Que.QuestionId);
            if (answer != null)
            {
                <div class="mb-4 p-3 border rounded bg-white">
                    <div class="mb-2 fw-bold">
                        Câu hỏi @Que.QuestionId: @Que.QuestionName (@Que.MaximumScore)
                    </div>
                    <textarea @bind="answer.Name" class="form-control" rows="5"></textarea>
                </div>
            }
        }
        <div class="mt-3">
            <button type="submit" class="btn btn-success" @onclick="() =>SaveAllAnswers()">Kết thúc bài thi</button>
        </div>
    }
    else
    {

        @foreach (var QueTN in histDTO.Questions)
        {
            <div class="mb-4 p-3 border rounded bg-white">
                <div class="mb-2 fw-bold">Câu hỏi @QueTN.QuestionId: @QueTN.QuestionName</div>

                @if (QueTN.Type == 1 || QueTN.Type == 2) // Radio
                {
                    foreach (var a in QueTN.Answers)
                    {
                        <div class="input-group mb-2">
                            <span class="input-group-text">
                                <input type="radio"
                                name="answer_@QueTN.QuestionId"
                                @onchange="@((ChangeEventArgs e) => OnAnswerChanged(e, QueTN.QuestionId, QueTN.Type, a.AnswerId))" />
                            </span>
                            <label class="form-control">@a.AnswersName</label>
                        </div>
                    }
                }
                else if (QueTN.Type == 3) // Checkbox
                {
                    foreach (var a in QueTN.Answers)
                    {
                        <div class="input-group mb-2">
                            <span class="input-group-text">
                                <input type="checkbox"
                                @onchange="@((ChangeEventArgs e) => OnAnswerChanged(e, QueTN.QuestionId, QueTN.Type, a.AnswerId))" />
                            </span>
                            <label class="form-control">@a.AnswersName</label>
                        </div>
                    }
                }
            </div>
        }
        <div class="mt-3">
            <button type="submit" class="btn btn-success" @onclick="() =>CreateStudentAns(selectedAnsIds)">Kết thúc bài thi</button>
        </div>
    }

}

@code {
    private int minutes;
    private int seconds;
    private bool isTimeUp;
    private Timer countdownTimer;
    int timeInSecondsMinute;
    int poi;
    private int packageCode;
    private string studentCode;
    private HistDTO histDTO = new HistDTO();                  
    private int currentQuestionIndex = 0;
    private Dictionary<int, List<int>> selectedAnswers = new();
    private bool isLoaded = false;
    private bool isFinished = false;
    private bool isSubmitted = false;
    public List<int> selectedAnsIds = new List<int>();
    public List<Exam_Room_Student_Answer_HisTory> his = new List<Exam_Room_Student_Answer_HisTory>();
    private BlazoredTextEditor textEditor;
    private Ans ans = new Ans();
    private List<Ans> listAnswers = new();
    Dictionary<int, List<int>> selectedAnsByQuestionId = new();
    private DotNetObjectReference<Test>? dotnetHelper;
    private string plainText;
    private int index = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotnetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("registerDotnetHelper", dotnetHelper);
        }
    }
  
    [JSInvokable]
    public async Task<bool> load()
    {
        bool abc = await TestService.GetExamHis(histDTO.TestId);
        if (abc == true)
        {
            if (histDTO.PackageTypeId == 1)
            {
                await SaveAllAnswers();
            }
            else
            {
                await CreateStudentAns(selectedAnsIds);
            }

            toastService.ShowError("Đã phát hiện gian lận, bài thi đã kết thúc.");
            Navigation.NavigateTo("/His");  // Điều hướng đến trang lịch sử // ✅ Bắt đầu countdown và chờ chạy xong
            return true;
        }
        return false;
    }
    
    [JSInvokable]
    public async Task ResetExamTime()
    {
        try
        {
            if (countdownTimer != null)
            {
                countdownTimer.Dispose();  // Dừng bộ đếm thời gian
            }
            isTimeUp = true;  // Đánh dấu hết thời gian

            // Lưu kết quả (nếu chưa lưu)
            if (histDTO.PackageTypeId == 1)
            {
                await SaveAllAnswers();
            }
            else
            {
                await CreateStudentAns(selectedAnsIds);
            }

            toastService.ShowError("Đã phát hiện gian lận, bài thi đã kết thúc.");
            Navigation.NavigateTo("/His");  // Điều hướng đến trang lịch sử
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi khi dừng thời gian và lưu dữ liệu: " + ex.Message);
        }

    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("startPersistentFullscreen");
            var codeResult = await SessionStorage.GetAsync<int>("packagecode");
            if (!codeResult.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không tìm thấy mã dự thi. Vui lòng đăng nhập lại.");
                Navigation.NavigateTo("/login-package");
                return;
            }
            packageCode = codeResult.Value;

            var studentcodeResult = await SessionStorage.GetAsync<string>("studentcode");
            if (!studentcodeResult.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không tìm thấy mã thí sinh dự thi. Vui lòng đăng nhập lại.");
                Navigation.NavigateTo("/login-package");
                return;
            }
            studentCode = studentcodeResult.Value;

            var timeResult = await SessionStorage.GetAsync<int>("thoigian");
            if (!timeResult.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không tìm thấy mã thí sinh dự thi. Vui lòng đăng nhập lại.");
                Navigation.NavigateTo("/login-package");
                return;
            }
            timeInSecondsMinute = timeResult.Value;

            await PackageType();
            if (histDTO == null)
            {
                toastService.ShowError("Đăng nhập vào thi thất bại");
                return;
            }
            else
            {
                if (histDTO.PackageTypeId == 1)
                {
                    listAnswers.Clear();
                    foreach (var question in histDTO.Questions)
                    {
                        listAnswers.Add(new Ans
                            {
                                QuesId = question.QuestionId,
                                Name = string.Empty
                            });
                    }
                }
            }
            _ = StartCountdown();

        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    private void OnAnswerChanged(ChangeEventArgs e, int questionId, int questionType, int answerId)
    {
        try
        {
            if (!selectedAnsByQuestionId.ContainsKey(questionId))
                selectedAnsByQuestionId[questionId] = new List<int>();

            List<int> selectedList = selectedAnsByQuestionId[questionId];

            if (questionType == 1 || questionType == 2) // Radio
            {
                selectedList.Clear();
                selectedList.Add(answerId);
                selectedAnsIds = selectedAnsByQuestionId.Values.SelectMany(x => x).Distinct().ToList();
            }
            else if (questionType == 3) // Checkbox
            {
                var isChecked = (bool?)e.Value ?? false;

                if (isChecked)
                    selectedList.Add(answerId);
                else
                    selectedList.Remove(answerId);

                selectedAnsIds = selectedAnsByQuestionId.Values.SelectMany(x => x).Distinct().ToList();
            }

        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }


    private async Task SaveAllAnswers()// lưu tự luận
    {
        try
        {
            if (listAnswers != null && listAnswers.Count > 0 && !isSubmitted)
            {
                bool checkAns = await TestService.CreateAnswerStudentAns(listAnswers, studentCode, histDTO.TestId);
                if (checkAns)
                {
                    isSubmitted = true;
                    toastService.ShowSuccess("Lưu bài thành công");

                    await SessionStorage.SetAsync("TestId", histDTO.TestId);
                    await SessionStorage.SetAsync("PackageTypeId", histDTO.PackageTypeId);
                    Navigation.NavigateTo("/His");
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    public  async Task CreateStudentAns(List<int>? lstAnsId) // lưu trắc nghiệm
    {
        try
        {
            if (!isSubmitted)
            {
                bool checkAns = await TestService.CreateStudentAnswer(lstAnsId, studentCode, histDTO.TestId);
                if (checkAns)
                {
                    isSubmitted = true;
                    toastService.ShowSuccess("Đã lưu bài thi");

                    await SessionStorage.SetAsync("TestId", histDTO.TestId);
                    await SessionStorage.SetAsync("PackageTypeId", histDTO.PackageTypeId);
                    Navigation.NavigateTo("/His");
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
        }
    }

    public async Task<HistDTO> PackageType()
    {
        try
        {
            histDTO = await TestService.GetQuestionAnswers(packageCode, studentCode);
            if (histDTO != null)
            {
                poi = histDTO.ExecutionTime / 60;
            }

            return histDTO;
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex);
            return histDTO;
        }
    }

    private async Task StartCountdown()
    {
        while (timeInSecondsMinute > 0 && !isSubmitted)
        {
            await Task.Delay(1000);
            timeInSecondsMinute--;
            StateHasChanged();
        }

        if (!isSubmitted)
        {
            toastService.ShowError("Hết giờ làm bài");
            if (histDTO.PackageTypeId == 1)
            {
                await SaveAllAnswers();
            }
            else
            {
                await CreateStudentAns(selectedAnsIds);
            }
            
        }
    }

    private string FormatTime(int seconds)
    {
        int minutes = seconds / 60;
        int secs = seconds % 60;
        return $"{minutes:D2}:{secs:D2}";
    }
    // [JSInvokable]
    // public async Task<bool> load()
    // {
    //     return await TestService.GetExamHis(histDTO.TestId);
    // }
}