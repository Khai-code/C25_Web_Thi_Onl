@page "/Test"
@using Blazor_Server.Services
@using Data_Base.Models.A
@using Data_Base.Models.Q
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.IdentityModel.Tokens.Jwt
@using static Blazor_Server.Services.Package_Test_ERP
@inject NavigationManager Navigation
@inject Package_Test_ERP PTERP
@inject Notification notification
@layout StudentLayout
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JSRuntime

<h3>Test</h3>

<div class="quiz-container">
    <h2>📝 Bài thi trắc nghiệm</h2>
    <div id="countdown-timer" style="font-size: 24px; font-weight: bold; text-align: center; margin-bottom: 20px;">
        @GetFormattedTime()
    </div>

    <div id="question-container">
        <!-- Câu hỏi sẽ được hiển thị ở đây -->
    </div>

    <div class="navigation">
        <button id="prev-btn">⬅ Lùi</button>
        <button id="next-btn">Tiếp ➡</button>
    </div>

    <button id="finish-btn">✅ Kết thúc bài thi</button>
    <div id="result"></div>
</div>
<ChildComponent OnStopTest="StopTest" />
@code {
    private int minutes;
    private int seconds;
    private bool isTimeUp;
    private Timer countdownTimer;

    protected override async Task OnInitializedAsync()
    {
        var checktimeResult = await SessionStorage.GetAsync<Dictionary<int, int>>("thoigian");

        if (checktimeResult.Success)
        {
            var checktime = checktimeResult.Value;
            foreach (var item in checktime)
            {
                Console.WriteLine($"Key: {item.Key}, Value: {item.Value}");
                minutes = item.Key; 
                seconds = item.Value; 
            }
            StartCountdown();
        }
    }

    private void StartCountdown()
    {
        countdownTimer = new Timer(UpdateCountdown, null, 0, 1000); 
    }

    private void UpdateCountdown(object? state)
    {
        if (seconds == 0 && minutes == 0)
        {
            isTimeUp = true;
            countdownTimer?.Dispose(); 
            InvokeAsync(StateHasChanged); 
            return;
        }

        if (seconds == 0)
        {
            if (minutes > 0)
            {
                minutes--;
                seconds = 59;
            }
        }
        else
        {
            seconds--;
        }

        InvokeAsync(StateHasChanged); 
    }

    private string GetFormattedTime() => $"{minutes:D2}:{seconds:D2}";
    private void ResetCountdown()
    {
        var checktimeResult = SessionStorage.GetAsync<Dictionary<int, int>>("thoigian").Result;

        if (checktimeResult.Success)
        {
            var checktime = checktimeResult.Value;
            minutes = checktime.ContainsKey(0) ? checktime[0] : 0;
            seconds = checktime.ContainsKey(1) ? checktime[1] : 0;
        }

        isTimeUp = false; // Reset trạng thái hết thời gian
        countdownTimer?.Dispose(); // Dừng đồng hồ hiện tại
        StartCountdown(); // Bắt đầu lại đồng hồ đếm ngược
    }
    public void StopTest()
    {
        isTimeUp = true; // Đánh dấu hết thời 
        ResetCountdown();
        countdownTimer?.Dispose(); // Dừng đồng hồ
        InvokeAsync(StateHasChanged); // Cập nhật UI
    }
}