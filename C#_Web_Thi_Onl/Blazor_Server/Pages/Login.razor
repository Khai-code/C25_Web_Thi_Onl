@page "/"
@using Blazor_Server.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager Navigation
@inject AuthSerrvice AuthService
@inject Notification notification
@layout LoginLayout 
@inject ProtectedSessionStorage SessionStorage

<div class="flex items-center justify-center h-screen bg-gray-100">
    <div class="bg-white p-8 rounded-2xl shadow-lg w-96">
        <h2 class="text-2xl font-semibold text-center mb-6 text-gray-700">Đăng nhập</h2>

        <div class="mb-4">
            <label class="block text-gray-600 font-medium">Tên đăng nhập</label>
            <input type="text" @bind="username"
            class="w-full px-4 py-2 mt-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" />
        </div>
        <div class="mb-4">
            <label class="block text-gray-600 font-medium">Mật khẩu</label>
            <input type="password" @bind="password"
            class="w-full px-4 py-2 mt-1 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" />
        </div>
        <button @onclick="HandleLogin"
        class="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 rounded-lg transition duration-200">
            Đăng nhập
        </button>
    </div>
</div>

@code {
    private string username;
    private string password;
    private string errorMessage;
    private async Task HandleLogin()
    {
        var token = await AuthService.Login(username, password);

        if (token != null && !string.IsNullOrEmpty(token.Token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(token.Token) as JwtSecurityToken;

            if (jsonToken != null)
            {
                await SessionStorage.SetAsync("authToken", token.Token);

                foreach (var claim in jsonToken.Claims)
                {
                    await SessionStorage.SetAsync(claim.Type, claim.Value);
                    Console.WriteLine($"Claim type: {claim.Type}, value: {claim.Value}");
                }

                var roleIdClaim = jsonToken.Claims.FirstOrDefault(c => c.Type == "Role");
                if (roleIdClaim != null)
                {
                    await SessionStorage.SetAsync("userRole", roleIdClaim.Value);
                }

                Navigation.NavigateTo("/", forceLoad: true); 
                return;
            }
        }
        await notification.ShowToast("Tên đăng nhập hoặc mật khẩu không đúng!", "error");
    }

}
