    @page "/exam-history"
    @using System.Globalization
    @using Blazor_Server.Services
    @using Data_Base.GenericRepositories
    @using Data_Base.Models.C
    @using Data_Base.Models.P
    @using Data_Base.Models.S
@using Data_Base.Models.T
    @inject Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage.ProtectedSessionStorage SessionStorage
    @using static Blazor_Server.Services.HistoriesExam
    @layout TeacherLayout
    @inject IJSRuntime jSRuntime
    @inject HistoriesExam HistoriesExam
    @inject Blazored.Toast.Services.IToastService toastService
    @using System.Globalization;

<div>
    <div class="bg-body-secondary p-3 rounded shadow-sm mb-4">
        <div class="row g-2 align-items-end">
            <!-- Chọn lớp -->
            <div class="col-md-2">
                <label class="form-label fw-semibold text-dark">Lớp</label>
                <select class="form-select form-select-sm" @bind="selectedClassId">
                    <option value="">-- Chọn lớp --</option>
                    @foreach (var cls in classList)
                    {
                        <option value="@cls.Id">@cls.Class_Name</option>
                    }
                </select>
            </div>

            <!-- Chọn môn -->
            <div class="col-md-2">
                <label class="form-label fw-semibold text-dark">Môn học</label>
                <select class="form-select form-select-sm" @bind="selectedSubjectId">
                    <option value="">-- Chọn môn --</option>
                    @foreach (var subject in subjectList)
                    {
                        <option value="@subject.Id">@subject.Subject_Name</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-dark">Từ ngày</label>
                <input type="datetime-local" class="form-control form-control-sm" @bind="startDate" />
            </div>
            <div class="col-md-3">
                <label class="form-label fw-semibold text-dark">Đến ngày</label>
                <input type="datetime-local" class="form-control form-control-sm" @bind="endDate" />
            </div>
            <div class="col-md-2 d-grid">
                <button class="btn btn-success btn-sm" @onclick="OnSearch">
                    <i class="bi bi-search me-1"></i> Tìm kiếm
                </button>
            </div>
        </div>
    </div>
    <div class="row g-4">
        <div class="@((selectedExamId == null ? "col-md-12" : "col-md-4"))">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-journal-bookmark-fill me-2"></i> Danh sách gói đề
                    </div>
                    <div class="dropdown">
                        <span class=" text-white d-flex align-items-center dropdown-toggle"
                        type="button" id="filterDropdown"
                        data-bs-toggle="dropdown" aria-expanded="false"
                        title="Lọc loại gói đề"
                        style="position: relative;">
                            <i class="bi bi-funnel-fill me-1"></i> <span>Lọc</span>
                        </span>
                        <ul class="dropdown-menu dropdown-menu-end p-3" aria-labelledby="filterDropdown" style="min-width: 250px;">
                            <div class="dropdown-arrow"></div>
                            <li>
                                <button class="btn btn-sm btn-outline-primary mb-2 w-100" @onclick="ToggleSelectAll">
                                    @(selectedTypes.Count < packageTypes.Count ? "Chọn tất cả" : "Bỏ chọn tất cả")
                                </button>
                            </li>
                            @foreach (var type in packageTypes)
                            {
                                <li class="form-check mb-1">
                                    <input class="form-check-input"
                                    type="checkbox"
                                    id="@type"
                                    checked="@selectedTypes.Contains(type)"
                                    @onchange="@(() => ToggleFilter(type))" />
                                    <label class="form-check-label" for="@type">@type</label>
                                </li>
                            }
                        </ul>
                    </div>
                </div>


                <ul class="list-group list-group-flush">
                    @foreach (var exam in FilteredPackages)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center list-hover"
                        @onclick="() => SelectExam(exam.Id)">
                            <div>
                                <i class="bi bi-journal-text me-2 text-primary"></i>@exam.Name_package (@exam.Name_Package_Type)
                            </div>
                        </li>
                    }
                </ul>
            </div>

        </div>
        @if (selectedExamId.HasValue)
        {
            <div class="col-md-8">
                <div class="card shadow-sm">
                    <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
                        <div>
                            <i class="bi bi-clipboard-data me-2"></i> Danh sách bài thi
                        </div>
                        <button class="btn btn-sm btn-outline-light" @onclick="() => selectedExamId = null">
                            <i class="bi bi-x-circle"></i> Đóng
                        </button>
                    </div>

                    <div class="card-body">
                        <input type="text" class="form-control mb-3" placeholder="🔍 Tìm kiếm bài thi..."
                        @bind="studentSearch" />

                        @if (listTests.Any(r => r.Idpackage == selectedExamId && MatchesSearch(r.Test_Code)))
                        {
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover align-middle">
                                    <thead class="table-light text-center">
                                        <tr>
                                            <th>👩‍🎓 Tên học sinh</th>
                                            <th>📦 Mã bài thi</th>
                                            <th>🏆 Điểm</th>
                                            <th>📊 Trạng thái</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var r in listTests)
                                        {
                                            <tr class="@((selectedStudent == r.Id ? "table-info" : "")) text-center"
                                            @onclick="() => SelectStudent(r.Id)">
                                                <td>@r.Name_Student</td>
                                                <td>@r.Test_Code</td>
                                                <td>@($"{r.score:0.00}")</td>
                                                <td class="text-center">
                                                    @if (r.Status == 0)
                                                    {
                                                        <span class="badge bg-success">Đã thi</span>
                                                    }
                                                    else if (r.Status == 2)
                                                    {
                                                        <span class="badge bg-danger">Đã phát hiện gian lận</span>
                                                    }
                                                    else if (r.Status == 1)
                                                    {
                                                        if (r.statustest == 1)
                                                        {
                                                            <span class="badge bg-warning">có yêu cầu phúc khảo</span>
                                                        }
                                                        else if (r.statustest == 2)
                                                        {
                                                            <span class="badge bg-success">Chấp nhận điều chỉnh điểm</span>
                                                        }
                                                        else if (r.statustest == 3 || r.statustest == 5)
                                                        {
                                                            <span class="badge bg-danger">Từ chối phúc khảo</span>
                                                        }
                                                        else if (r.statustest == 4)
                                                        {
                                                            <span class="badge bg-secondary">Phúc khảo thành công</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-success">Đã chấm điểm</span>
                                                        }

                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-warning text-dark">Chưa thi</span>
                                                    }
                                                </td>
                                            </tr>

                                            @if (selectedStudent == r.Id)
                                            {
                                                bool hasReview = r.statustest >= 1 && r.statustest <= 5;
                                                bool isWaitingReview = r.statustest == 1;

                                                <tr>
                                                    <td colspan="10" class="bg-light px-3 py-3">
                                                        <div class="row">
                                                            <!-- Cột trái: Thông tin bài làm -->
                                                            <div class="@(hasReview ? "col-md-6" : "col-md-12") mb-3">
                                                                <div class="border rounded p-3 shadow-sm bg-white h-100">
                                                                    <h6 class="fw-bold text-primary mb-3">Thông tin bài làm</h6>
                                                                    <p><strong>Điểm:</strong> @($"{r.score:0.00}")</p>
                                                                    <p><strong>Thời gian bắt đầu:</strong> @r.Check_Time</p>
                                                                    <p><strong>Thời gian kết thúc:</strong> @r.End_Time</p>


                                                                    <button @onclick="() => ShowQuestions(r.Id)" class="btn btn-sm btn-primary mt-2">
                                                                        <i class="bi bi-eye"></i> Xem chi tiết
                                                                    </button>

                                                                </div>
                                                            </div>

                                                            @if (IsAdmin || // admin luôn thấy
                                                          (CurrentTeacherId.HasValue && r.Teacher_Id == CurrentTeacherId.Value)) // giáo viên đúng bài)
                                                            {
                                                                <!-- Cột phải: Phúc khảo -->
                                                                <div class="col-md-6 mb-3">
                                                                    <div class="border rounded p-3 shadow-sm bg-white h-100">
                                                                        <h6 class="fw-bold text-danger mb-3">Thông tin phúc khảo</h6>
                                                                        <p><strong>Ý kiến học sinh:</strong></p>
                                                                        <p class="mb-3">@r.comenttest</p>

                                                                        <p><strong>Phản hồi của giáo viên:</strong></p>

                                                                        @if (r.statustest == 2 && r.score != r.Point)
                                                                        {
                                                                            <div class="alert alert-info mt-2">
                                                                                Điểm của học sinh đã được phúc khảo từ <strong>@($"{r.score:0.00}")</strong> sang <strong>@($"{r.Point:0.00}")</strong>
                                                                            </div>
                                                                        }

                                                                        @if (isWaitingReview)
                                                                        {
                                                                            <textarea class="form-control mb-3" rows="2" @bind="comment" placeholder="Nhập phản hồi..."></textarea>

                                                                            <div class="d-flex gap-2">
                                                                                <button class="btn btn-success" @onclick="()=>updateReview(r.IdReview, 2)">
                                                                                    Xác nhận
                                                                                </button>
                                                                                <button class="btn btn-danger" @onclick="()=>updateReview(r.IdReview, 3)">
                                                                                    Từ chối
                                                                                </button>

                                                                                @if (IsAdmin && (r.Teacher_Id == null || r.Teacher_Id == 0))
                                                                                {
                                                                                    <button class="btn btn-outline-primary" @onclick="() => OpenAssignModal(r.IdReview, r.Idpackage)">
                                                                                        <i class="bi bi-person-check"></i> Phân quyền giáo viên chấm lại
                                                                                    </button>
                                                                                }
                                                                                else if (IsAdmin && r.Teacher_Id > 0)
                                                                                {
                                                                                    <span class="text-success">
                                                                                        <i class="bi bi-check-circle"></i> Đã phân cho giáo viên: <b>@GetTeacherName(r.Teacher_Id)</b>
                                                                                    </span>
                                                                                }

                                                                            </div>
                                                                        }
                                                                        else
                                                                        {
                                                                            <p class="mb-3">@r.comenteacher</p>
                                                                        }
                                                                    </div>
                                                                </div>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning text-center">
                                Không tìm thấy học sinh nào phù hợp.
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@if (showQuestionModal && selectedQuestions != null)
{
    bool hasEssayQuestion = selectedQuestions.Any(q => q.question_type == 1);
    bool isEssayQuestion = selectedQuestions.Any(q => q.statuss == 1);
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Danh sách câu hỏi</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>

                <div class="modal-body">
                    @foreach (var item in selectedQuestions)
                    {
                        <div class="mb-3 border p-3 rounded shadow-sm">
                            <p><strong>Câu hỏi:</strong> @item.Questions.Question_Name</p>

                            @if (item.question_type == 2)
                            {
                                @if (item.statuss == 1 && (IsAdmin || (CurrentTeacherId.HasValue && item.Teacher_Id == CurrentTeacherId.Value)))
                                {
                                    <button class="btn btn-warning btn-sm"
                                    @onclick="() => StartEditQuestion(MapToListQuesAnsReview(item))">
                                        Sửa
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-warning btn-sm" disabled>
                                        Sửa
                                    </button>
                                }
                            }


                            <div class="mb-2">
                                <span class="badge bg-info me-2">Độ khó: @item.question_lever</span>
                                <span class="badge bg-warning text-dark">Điểm tối đa: @item.Questions.Maximum_Score</span>
                            </div>

                            <ul class="list-group">
                                @foreach (var ans in item.Answers)
                                {
                                    var isChosen = item.Exam_Room_Student_Answer_HisTories.Any(h => h.Answer_Id == ans.Id);
                                    bool isCorrect = ans.Right_Answer == 1;
                                    string cssClass = "list-group-item";

                                    if (isChosen && isCorrect)
                                        cssClass += " bg-success text-white";
                                    else if (isChosen && !isCorrect)
                                        cssClass += " border border-danger";
                                    else if (!isChosen && isCorrect)
                                        cssClass += " border border-success";

                                    <li class="@cssClass p-2 mb-2 rounded">
                                        @if (item.question_type == 1)
                                        {
                                            @if (!answerComments.ContainsKey(item.Questions.Id))
                                            {
                                                answerComments[item.Questions.Id] = "";
                                            }

                                            <div class="row">
                                                <div class="col-md-6">
                                                    <p class="mb-1"><strong>Đáp án:</strong> @ans.Answers_Name</p>
                                                </div>
                                                <div class="col-md-6">
                                                    @if (item.statuss == 1 && (IsAdmin || (CurrentTeacherId.HasValue && item.Teacher_Id == CurrentTeacherId.Value)))
                                                    {
                                                        <div class="row">
                                                            <div class="col-md-6 mb-2">
                                                                <label class="form-label">Nhập điểm</label>
                                                                <input type="number"
                                                                min="0"
                                                                max="@item.Questions.Maximum_Score"
                                                                step="0.1"
                                                                value="@(answerScores.TryGetValue(ans.Id, out var s) ? s : (ans.Points_Earned?.ToString(CultureInfo.InvariantCulture) ?? ""))"
                                                                oninput="@((ChangeEventArgs e) => UpdateAnswerScore(ans.Id, e.Value?.ToString(), item.Questions.Maximum_Score))"
                                                                class="form-control form-control-sm @(errorMessages.ContainsKey(ans.Id) ? "is-invalid" : "")" />

                                                                @if (errorMessages.TryGetValue(ans.Id, out var msg))
                                                                {
                                                                    <div class="invalid-feedback d-block">@msg</div>
                                                                }

                                                            </div>
                                                            <div class="col-md-6 mb-2">
                                                                <label class="form-label">Nhận xét</label>
                                                                <input type="text"
                                                                @bind="answerComments[item.Questions.Id]"
                                                                class="form-control form-control-sm"
                                                                placeholder="Nhận xét tại đây..." />
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="row">
                                                            <div class="col-md-6 mb-2">
                                                                <label class="form-label">Kết quả</label>   
                                                                <span>@ans.Points_Earned</span>
                                                            </div>
                                                            <div class="col-md-6 mb-2">
                                                                <label class="form-label">Nhận xét</label>
                                                                <span>@item.Questions.Note</span>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        else if (item.question_type == 2) // Câu hỏi trắc nghiệm)
                                        {
                                            if (item.statuss == 1)
                                            {
                                                if (item.Questions.Question_Type_Id == 1)
                                                {
                                                    <div class="d-flex align-items-center">
                                                        <span>@(ans.Right_Answer == 1 ? "Đúng" : "Sai")</span>
                                                    </div>
                                                }
                                                else if (item.Questions.Question_Type_Id == 2)
                                                {
                                                    <div class="d-flex align-items-center">
                                                        <span>@ans.Answers_Name</span>
                                                    </div>
                                                }
                                                else
                                                {

                                                    <div class="d-flex align-items-center">
                                                        <span>@ans.Answers_Name</span>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div class="d-flex align-items-center">
                                                    <span>@ans.Answers_Name</span>
                                                </div>
                                            }


                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                    @if (hasEssayQuestion)
                    {
                        <div class="d-flex justify-content-end mt-3">
                            <strong>Tổng điểm: </strong>&nbsp;<span>@totalScore</span>
                        </div>
                    }
                </div>

                <div class="modal-footer">
                    @if (hasEssayQuestion)
                    {
                        if (isEssayQuestion)
                        {
                            <button type="submit" class="btn btn-primary" @onclick="() => updateexamhis(idtest, totalScore)">
                                Lưu chấm điểm
                            </button>
                        }

                    }
                    <button class="btn btn-secondary" @onclick="CloseModal">Đóng</button>
                </div>
            </div>
        </div>
    </div>
}

@if (isEditing && lstQuesAns != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content shadow-lg rounded-4 border-0 position-relative">
                <!-- Nút đóng (X) -->
                <button type="button"
                class="btn-close position-absolute top-0 end-0 m-3"
                aria-label="Close"
                @onclick="CancelEdit">
                </button>
                <form onsubmit="return false" class="p-4">
                    <div class="mb-4">
                        <label class="form-label fw-bold fs-5">Câu hỏi:</label>
                        <input type="text" class="form-control form-control-lg"
                        @bind="lstQuesAns.QuestionName"
                        placeholder="Nhập nội dung câu hỏi..." />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold fs-5">Danh sách đáp án:</label>
                        @for (int i = 0; i < lstQuesAns.Answers.Count; i++)
                        {
                            int index = i;
                            <div class="d-flex mb-3 align-items-center">
                                <span class="me-2 fw-bold">@((char)(65 + i)).</span>
                                <input type="text"
                                class="form-control me-3"
                                value="@lstQuesAns.Answers[i].AnswersName"/>
                                @if (lstQuesAns.QuestionTypeId == 1 || lstQuesAns.QuestionTypeId == 2)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input"
                                        type="radio"
                                        name="correctAnswer"
                                        checked="@(lstQuesAns.Answers[i].Right_Answer == 1)"
                                        @onclick="() => SetCorrectAnswer(index)" />
                                        <label class="form-check-label ms-1 text-success fw-semibold">✔️ Đúng</label>
                                    </div>
                                }
                                else if (lstQuesAns.QuestionTypeId == 3)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input"
                                        type="checkbox"
                                        checked="@(lstQuesAns.Answers[i].Right_Answer == 1)"
                                        @onclick="() => ToggleCorrectAnswer(index)" />
                                        <label class="form-check-label ms-1 text-success fw-semibold">✔️ Đúng</label>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert alert-danger mb-3">
                            @validationMessage
                        </div>
                    }

                    <div class="d-flex justify-content-end mt-4">
                        <button type="button"
                        class="btn btn-outline-secondary me-2 px-4 py-2 rounded-pill"
                        @onclick="CancelEdit">
                            ❌ Hủy
                        </button>
                        <button type="button"
                        class="btn btn-primary px-4 py-2 rounded-pill"
                        @onclick="SaveEditedQuestion">
                            💾 Lưu
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@if (showAssignModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-md modal-dialog-centered">
            <div class="modal-content shadow-lg rounded-4 border-0">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Phân quyền giáo viên chấm lại</h5>
                    <button type="button" class="btn-close" @onclick="CloseAssignModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Chọn giáo viên</label>
                        <select class="form-select"
                        @bind="selectedTeacherIdForAssign">
                            <option value="0">-- Chọn giáo viên --</option>
                            @foreach (var t in teachers)
                            {
                                <option value="@t.Id">@t.FullName</option>
                            }
                        </select>
                    </div>

                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseAssignModal">Đóng</button>
                    <button class="btn btn-primary" @onclick="ConfirmAssignAsync">
                        <i class="bi bi-check2-circle"></i> Xác nhận gán
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@code
{
    private List<lispackage> packagess = new List<lispackage>();
    private List<listTest> listTests = new List<listTest>();
    private List<Class> classList = new List<Class>();
    public List<Subject> subjectList = new List<Subject>();
    private int selectedClassId;
    private int selectedSubjectId;
    private int idtest;
    private DateTime startDate = DateTime.Today.AddDays(-4);
    private DateTime endDate = DateTime.Now;
    private List<string> packageTypes = new();
    private HashSet<string> selectedTypes = new();
    private Dictionary<int, string> answerScores = new Dictionary<int, string>(); // Lưu trữ điểm theo Answer ID
    private double totalScore = 0;
    private Dictionary<int, string> answerComments = new();
    private string comment;
    public List<ListQuesAnsReview> lstQues = new List<ListQuesAnsReview>();
    public ListQuesAnsReview lstQuesAns = new ListQuesAnsReview();
    private bool isEditing = false;
    public List<int> selectedQuestionIds = new List<int>();
    private string validationMessage = "";

    // Cảnh báo theo AnswerId
    private Dictionary<int, string> errorMessages = new();
    // Set các AnswerId đang invalid
    private HashSet<int> invalidAnswerIds = new();


    private ListQuesAnsReview MapToListQuesAnsReview(listquestion item)
    {
        return new ListQuesAnsReview
                {
                    QuestionId = item.Questions.Id,
                    QuestionName = item.Questions.Question_Name,
                    QuestionTypeId = item.question_type,
                    PackageId = item.Questions.Package_Id,
                    MaximumScore = item.Questions.Maximum_Score,
            // Leva = item.question_lever,
                    Answers = item.Answers?.Select(a => new AnswerReview
                    {
                        AnswerId = a.Id,
                        AnswersName = a.Answers_Name,
                        Right_Answer = a.Right_Answer,
                        QuestionId = a.Question_Id
                    }).ToList() ?? new List<AnswerReview>()
                };
    }


    private void StartEditQuestion(ListQuesAnsReview question)
    {
        lstQuesAns = new ListQuesAnsReview
                {
                    QuestionId = question.QuestionId,
                    QuestionName = question.QuestionName,
                    QuestionTypeId = question.QuestionTypeId,
                    PackageId = question.PackageId,
                    MaximumScore = question.MaximumScore,
                    Leva = question.Leva,
                    Answers = question.Answers.Select(a => new AnswerReview
                    {
                        AnswerId = a.AnswerId,
                        AnswersName = a.AnswersName,
                        Right_Answer = a.Right_Answer,
                        QuestionId = a.QuestionId
                    }).ToList()
                };
        validationMessage = "";
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;
        lstQuesAns = null;
        validationMessage = "";
    }

    private void SetCorrectAnswer(int index)
    {
        // Reset tất cả về 0
        for (int i = 0; i < lstQuesAns.Answers.Count; i++)
        {
            lstQuesAns.Answers[i].Right_Answer = 0;
        }
        // Set đáp án được chọn thành 1
        lstQuesAns.Answers[index].Right_Answer = 1;

        // Clear validation message khi user thực hiện action
        validationMessage = "";

        // Trigger re-render
        StateHasChanged();
    }

    private void ToggleCorrectAnswer(int index)
    {
        lstQuesAns.Answers[index].Right_Answer = lstQuesAns.Answers[index].Right_Answer == 1 ? 0 : 1;

        // Clear validation message khi user thực hiện action
        validationMessage = "";

        // Trigger re-render
        StateHasChanged();
    }

    private async Task SaveEditedQuestion()
    {
        try
        {

            bool check = await HistoriesExam.UpdateReviewedQuestionAns(lstQuesAns);
            if (check)
            {
                totalScore = HistoriesExam.doubleScore;
                isEditing = false;
                lstQuesAns = null;
                validationMessage = "";
                toastService.ShowSuccess("Sửa câu hỏi thành công");
                // await GetLstQues(packageId, packageTypeId);
            }
            else
            {
                toastService.ShowError("Sửa câu hỏi thất bại");
                return;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Lỗi: " + ex.Message);
        }
    }

    private double GetQuestionTotalScore(dynamic questionItem)
    {
        if (questionItem?.Answers == null) return 0;

        double sum = 0;
        foreach (var ans in questionItem.Answers)
        {
            double score = ans.Points_Earned; // Lấy điểm mặc định

            if (answerScores.ContainsKey(ans.Id))
            {
                double updatedScore = 0; // ✅ Gán giá trị mặc định
                if (double.TryParse(answerScores[ans.Id], out updatedScore))
                {
                    score = updatedScore;
                }
            }

            sum += score;
        }
        return sum;
    }


    private async Task LoadListTests(int examId)
    {
        listTests = await HistoriesExam.GetTests(examId);
        teachers = await HistoriesExam.GetListTeacherSubJect(examId);
        StateHasChanged();
    }


    private async Task updateReview(int id, int status)
    {
        try
        {
            bool confirmed = await jSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc muốn cập nhật đánh giá không?");
            if (!confirmed)
                return;

            var respon = await HistoriesExam.UpdateReviewforteacher(id, status, comment, int.Parse(iduser), totalScore);
            if (respon != null)
            {
                toastService.ShowSuccess("✅ Cập nhật thành công");
                if (selectedExamId.HasValue)
                {
                    await LoadListTests(selectedExamId.Value); 
                }
            }
            else
            {
                toastService.ShowError("❌ Cập nhật thất bại");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi cập nhật đánh giá: {ex.Message}");
        }
    }

    private async Task CalculateTotalScore()
    {
        totalScore = 0;
        if (selectedQuestions == null) return;

        foreach (var question in selectedQuestions)
        {
            totalScore += GetQuestionTotalScore(question);
        }
        StateHasChanged(); // Cập nhật UI
    }
    private async Task UpdateAnswerScore(int answerId, string? score, double? maxScore)
    {
        // Clear lỗi cũ
        errorMessages.Remove(answerId);
        invalidAnswerIds.Remove(answerId);

        // Lưu raw input (để giữ nguyên cái user gõ)
        if (answerScores.ContainsKey(answerId))
            answerScores[answerId] = score ?? "";
        else
            answerScores.Add(answerId, score ?? "");

        // Validate
        if (string.IsNullOrWhiteSpace(score))
        {
            invalidAnswerIds.Add(answerId);
            errorMessages[answerId] = "⚠️ Vui lòng nhập điểm.";
            await CalculateTotalScore();
            return;
        }

        if (!double.TryParse(score, NumberStyles.Float, CultureInfo.InvariantCulture, out var value))
        {
            invalidAnswerIds.Add(answerId);
            errorMessages[answerId] = "⚠️ Điểm không hợp lệ.";
            await CalculateTotalScore();
            return;
        }

        if (value < 0)
        {
            invalidAnswerIds.Add(answerId);
            errorMessages[answerId] = "⚠️ Điểm không được âm.";
        }
        else if (maxScore.HasValue && value > maxScore.Value)
        {
            invalidAnswerIds.Add(answerId);
            errorMessages[answerId] = $"⚠️ Không vượt quá {maxScore.Value}.";
        }

        await CalculateTotalScore();
    }

    private string iduser;
    protected override async Task OnInitializedAsync()
    {
        try
        {

            await LoadCurrentTeacherAsync();

            var resuilt = await SessionStorage.GetAsync<string>("Id");
            if (resuilt.Success && !string.IsNullOrEmpty(resuilt.Value))
            {
                iduser = resuilt.Value;
            }
            classList = await HistoriesExam.getallclasses();
            subjectList = await HistoriesExam.getallsubjects();
        }
        catch { }

    }

    private int UserId;
    private int? CurrentTeacherId;
    private int? CurrentTeacherPosition;  // 0 = admin, 1 = teacher
    private bool IsAdmin => CurrentTeacherPosition == 0;
    private string? errorMessage;
    // Load token để lấy status

    public async Task LoadCurrentTeacherAsync()
    {
        var result = await SessionStorage.GetAsync<string>("authToken");
        if (result.Success && !string.IsNullOrEmpty(result.Value))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(result.Value) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
            var userIdClaim = jsonToken?.Claims.FirstOrDefault(c => c.Type == "Id");

            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int parsedId))
            {
                UserId = parsedId;

                var teacher = await HistoriesExam.GetTeacherByUserIdAsync(UserId);
                CurrentTeacherId = teacher?.Id;
                CurrentTeacherPosition = teacher?.Position; // 0 = admin, 1 = teacher
            }
        }
        else
        {
            errorMessage = "Không tìm thấy token trong session storage.";
        }
    }

        private void ToggleFilter(string type)
        {
            if (selectedTypes.Contains(type))
            {
                selectedTypes.Remove(type);
                listTests = new List<listTest>();
                selectedExamId = 0;
            }

            else
                selectedTypes.Add(type);
        }

        private void ToggleSelectAll()
        {
            if (selectedTypes.Count < packageTypes.Count)
            {
                selectedTypes = packageTypes.ToHashSet(); // chọn hết
                listTests = new List<listTest>();
                selectedExamId = 0;
            }

            else
            {
                selectedTypes.Clear();
                listTests = new List<listTest>();
                selectedExamId = 0;// bỏ chọn hết
            }

        }

        private IEnumerable<lispackage> FilteredPackages =>
            selectedTypes.Count == 0
                ? Enumerable.Empty<lispackage>()
                : packagess.Where(p => selectedTypes.Contains(p.Name_Package_Type));
        private async Task OnSearch()
        {
            if (selectedClassId <= 0)
            {
                toastService.ShowWarning("vui lòng chọn lớp!");
                return;
            }

            if (selectedSubjectId <= 0)
            {
                toastService.ShowWarning("vui lòng chọn môn học!");
                return;
            }

            if (startDate == default || endDate == default)
            {
                toastService.ShowWarning("vui lòng chọn khoảng thời gian hợp lệ!");
                return;
            }

            if (startDate > endDate)
            {
                toastService.ShowWarning("Ngày bắt đầu phải nhỏ hơn hoặc bằng ngày kết thúc!");
                return;
            }

            packagess = await HistoriesExam.GetAllHistories(selectedClassId, selectedSubjectId, startDate, endDate);
            selectedExamId = null;
            packageTypes = packagess.Select(p => p.Name_Package_Type).Distinct().OrderBy(x => x).ToList();
            selectedTypes = packageTypes.ToHashSet();
            if (packagess.Count == 0)
            {
                toastService.ShowInfo("Không có bài thi nào trong khoảng thời gian này!");
            }
        }

        private async Task<bool> UpdateScoreByTestId(int testId, double totalScore)
        {
            // Gọi đúng API update Score với TestId truyền vào
            var result = await HistoriesExam.SaveAllScoresByTestId(testId, totalScore);
            return result;
        }

        private async Task updateexamhis(int id, double score)
        {

        if (invalidAnswerIds.Count > 0)
        {
            toastService.ShowWarning("⚠️ Vẫn còn điểm không hợp lệ. Vui lòng kiểm tra lại.");
            return;
        }

            if (score > 10)
            {
                toastService.ShowWarning("⚠️ Điểm bạn nhập vượt quá thang điểm 10!");
                return;
            }

            var respon = await UpdateScoreByTestId(id, score); // Chỉ gọi update Score
            var resspon = await SubmitComments();

            if (respon && resspon)
            {
                toastService.ShowSuccess("✅ Cập nhật điểm thành công!");
            }
            else
            {
                toastService.ShowError("❌ Cập nhật điểm thất bại! Vui lòng thử lại.");
            }
        }


        private async Task<bool> SubmitComments()
        {
            foreach (var entry in answerComments)
            {
                int answerId = entry.Key;
                string? comment = entry.Value;

                bool success = await HistoriesExam.updatecomemt(answerId, comment);

                if (!success)
                {
                    Console.WriteLine($"Không thể cập nhật comment cho AnswerId {answerId}");
                    return false;
                }
            }

            return true;
        }

        private async Task gettest(int id)
        {
            try
            {
                listTests = await HistoriesExam.GetTests(id);
                teachers = await HistoriesExam.GetListTeacherSubJect(id); // 🔹 nạp danh sách GV của package
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi lấy bài thi: {ex.Message}");
            }

        }
        bool showQuestionModal = false;
        List<listquestion> selectedQuestions;

        async Task ShowQuestions(int testId)
        {
            selectedQuestions = await HistoriesExam.GetQuestions(testId);
            answerComments = selectedQuestions
          .Where(x => x.Questions != null)
          .ToDictionary(
              x => x.Questions.Id,
              x => x.Questions.Note ?? ""
          );
            idtest = testId;
            totalScore = listTests.FirstOrDefault()?.score ?? 0;
            answerScores = new Dictionary<int, string>();
            showQuestionModal = true;
        }

        void CloseModal()
        {
            showQuestionModal = false;
            selectedQuestions = null;
        }

        int? selectedExamId = null;
        int? selectedStudent = null;
        string studentSearch = "";

        private async Task SelectExam(int id)
        {
            await gettest(id);
            selectedExamId = selectedExamId == id ? null : id;
            selectedStudent = null;
            studentSearch = "";

        }

        void SelectStudent(int name)
        {
            selectedStudent = selectedStudent == name ? null : name;
        }

        bool MatchesSearch(string name) =>
            string.IsNullOrWhiteSpace(studentSearch) || name.Contains(studentSearch, StringComparison.OrdinalIgnoreCase);


    // === Phân quyền (modal) ===
    private bool showAssignModal = false;
    private int assignReviewId = 0;               // review đang gán
    private int selectedTeacherIdForAssign = 0;   // giáo viên đang chọn trong modal
    private List<TeacherWithName> teachers = new();


    // Mở/đóng modal
    private async Task OpenAssignModal(int reviewId, int packageId)
    {
        assignReviewId = reviewId;
        selectedTeacherIdForAssign = 0;

        if (IsAdmin)
            teachers = await HistoriesExam.GetListTeacherSubJect(packageId);
        else
            teachers = new();

        showAssignModal = true;
    }
    private void CloseAssignModal()
    {
        showAssignModal = false;
    }

    // Xác nhận gán
    private async Task ConfirmAssignAsync()
    {
        if (selectedTeacherIdForAssign <= 0)
        {
            toastService.ShowWarning("Vui lòng chọn giáo viên!");
            return;
        }

        var ok = await HistoriesExam.AssignReviewToTeacherAsync(assignReviewId, selectedTeacherIdForAssign);
        if (ok)
        {
            toastService.ShowSuccess("Đã gán giáo viên chấm phúc khảo!");
            showAssignModal = false;

            // reload danh sách bài test của gói đang mở (nếu có)
            if (selectedExamId.HasValue)
                await LoadListTests(selectedExamId.Value);
        }
        else
        {
            toastService.ShowError("Gán giáo viên thất bại!");
        }
    }

    private string GetTeacherName(int? teacherId)
    {
        var t = teachers.FirstOrDefault(x => x.Id == teacherId);
        return t?.FullName ?? "Chưa rõ";
    }

}